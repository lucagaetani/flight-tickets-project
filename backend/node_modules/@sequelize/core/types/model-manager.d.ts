import type { ModelStatic } from './model';
import type { Sequelize } from './sequelize';
export declare class ModelManager {
    #private;
    models: ModelStatic[];
    constructor(sequelize: Sequelize);
    addModel<T extends ModelStatic>(model: T): T;
    removeModel(modelToRemove: ModelStatic): void;
    getModel(modelName: string): ModelStatic | undefined;
    findModel(callback: (model: ModelStatic) => boolean): ModelStatic | undefined;
    hasModel(targetModel: ModelStatic): boolean;
    get all(): ModelStatic[];
    /**
     * Returns an array that lists every model, sorted in order
     * of foreign key references: The first model is a model that is depended upon,
     * the last model is a model that is not depended upon.
     *
     * If there is a cyclic dependency, this returns null.
     */
    getModelsTopoSortedByForeignKey(): ModelStatic[] | null;
    /**
     * Iterate over Models in an order suitable for e.g. creating tables.
     * Will take foreign key constraints into account so that dependencies are visited before dependents.
     *
     * @param iterator method to execute on each model
     * @param options
     * @param options.reverse
     * @private
     *
     * @deprecated
     */
    forEachModel(iterator: (model: ModelStatic) => void, options?: {
        reverse?: boolean;
    }): void;
}
