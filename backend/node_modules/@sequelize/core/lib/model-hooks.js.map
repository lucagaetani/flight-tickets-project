{
  "version": 3,
  "sources": ["../src/model-hooks.ts"],
  "sourcesContent": ["import type { AfterAssociateEventData, AssociationOptions, BeforeAssociateEventData } from './associations/index.js';\nimport type { AsyncHookReturn } from './hooks.js';\nimport { HookHandlerBuilder } from './hooks.js';\nimport type { ValidationOptions } from './instance-validator.js';\nimport type {\n  BulkCreateOptions,\n  CountOptions,\n  CreateOptions,\n  DestroyOptions,\n  FindOptions,\n  InstanceDestroyOptions,\n  InstanceRestoreOptions,\n  InstanceUpdateOptions,\n  Model,\n  ModelStatic,\n  RestoreOptions,\n  UpdateOptions,\n  UpsertOptions,\n} from './model.js';\nimport type { SyncOptions } from './sequelize.js';\n\nexport interface ModelHooks<M extends Model = Model, TAttributes = any> {\n  beforeValidate(instance: M, options: ValidationOptions): AsyncHookReturn;\n  afterValidate(instance: M, options: ValidationOptions): AsyncHookReturn;\n  validationFailed(instance: M, options: ValidationOptions, error: unknown): AsyncHookReturn;\n  beforeCreate(attributes: M, options: CreateOptions<TAttributes>): AsyncHookReturn;\n  afterCreate(attributes: M, options: CreateOptions<TAttributes>): AsyncHookReturn;\n  beforeDestroy(instance: M, options: InstanceDestroyOptions): AsyncHookReturn;\n  afterDestroy(instance: M, options: InstanceDestroyOptions): AsyncHookReturn;\n  beforeRestore(instance: M, options: InstanceRestoreOptions): AsyncHookReturn;\n  afterRestore(instance: M, options: InstanceRestoreOptions): AsyncHookReturn;\n  beforeUpdate(instance: M, options: InstanceUpdateOptions<TAttributes>): AsyncHookReturn;\n  afterUpdate(instance: M, options: InstanceUpdateOptions<TAttributes>): AsyncHookReturn;\n  beforeUpsert(attributes: M, options: UpsertOptions<TAttributes>): AsyncHookReturn;\n  afterUpsert(attributes: [ M, boolean | null ], options: UpsertOptions<TAttributes>): AsyncHookReturn;\n  beforeSave(\n    instance: M,\n    options: InstanceUpdateOptions<TAttributes> | CreateOptions<TAttributes>\n  ): AsyncHookReturn;\n  afterSave(\n    instance: M,\n    options: InstanceUpdateOptions<TAttributes> | CreateOptions<TAttributes>\n  ): AsyncHookReturn;\n  beforeBulkCreate(instances: M[], options: BulkCreateOptions<TAttributes>): AsyncHookReturn;\n  afterBulkCreate(instances: readonly M[], options: BulkCreateOptions<TAttributes>): AsyncHookReturn;\n  beforeBulkDestroy(options: DestroyOptions<TAttributes>): AsyncHookReturn;\n  afterBulkDestroy(options: DestroyOptions<TAttributes>): AsyncHookReturn;\n  beforeBulkRestore(options: RestoreOptions<TAttributes>): AsyncHookReturn;\n  afterBulkRestore(options: RestoreOptions<TAttributes>): AsyncHookReturn;\n  beforeBulkUpdate(options: UpdateOptions<TAttributes>): AsyncHookReturn;\n  afterBulkUpdate(options: UpdateOptions<TAttributes>): AsyncHookReturn;\n\n  /**\n   * A hook that is run at the start of {@link Model.count}\n   */\n  beforeCount(options: CountOptions<TAttributes>): AsyncHookReturn;\n\n  /**\n   * A hook that is run before a find (select) query\n   */\n  beforeFind(options: FindOptions<TAttributes>): AsyncHookReturn;\n\n  /**\n   * A hook that is run before a find (select) query, after any `{ include: {all: ...} }` options are expanded\n   *\n   * @deprecated use `beforeFind` instead\n   */\n  beforeFindAfterExpandIncludeAll(options: FindOptions<TAttributes>): AsyncHookReturn;\n\n  /**\n   * A hook that is run before a find (select) query, after all option have been normalized\n   *\n   * @deprecated use `beforeFind` instead\n   */\n  beforeFindAfterOptions(options: FindOptions<TAttributes>): AsyncHookReturn;\n  /**\n   * A hook that is run after a find (select) query\n   */\n  afterFind(instancesOrInstance: readonly M[] | M | null, options: FindOptions<TAttributes>): AsyncHookReturn;\n\n  /**\n   * A hook that is run at the start of {@link Model.sync}\n   */\n  beforeSync(options: SyncOptions): AsyncHookReturn;\n\n  /**\n   * A hook that is run at the end of {@link Model.sync}\n   */\n  afterSync(options: SyncOptions): AsyncHookReturn;\n  beforeAssociate(data: BeforeAssociateEventData, options: AssociationOptions<any>): AsyncHookReturn;\n  afterAssociate(data: AfterAssociateEventData, options: AssociationOptions<any>): AsyncHookReturn;\n\n  /**\n   * Runs before the definition of the model changes because {@link ModelDefinition#refreshAttributes} was called.\n   */\n  beforeDefinitionRefresh(): void;\n\n  /**\n   * Runs after the definition of the model has changed because {@link ModelDefinition#refreshAttributes} was called.\n   */\n  afterDefinitionRefresh(): void;\n}\n\nexport const validModelHooks: Array<keyof ModelHooks> = [\n  'beforeValidate', 'afterValidate', 'validationFailed',\n  'beforeCreate', 'afterCreate',\n  'beforeDestroy', 'afterDestroy',\n  'beforeRestore', 'afterRestore',\n  'beforeUpdate', 'afterUpdate',\n  'beforeUpsert', 'afterUpsert',\n  'beforeSave', 'afterSave',\n  'beforeBulkCreate', 'afterBulkCreate',\n  'beforeBulkDestroy', 'afterBulkDestroy',\n  'beforeBulkRestore', 'afterBulkRestore',\n  'beforeBulkUpdate', 'afterBulkUpdate',\n  'beforeCount',\n  'beforeFind', 'beforeFindAfterExpandIncludeAll', 'beforeFindAfterOptions', 'afterFind',\n  'beforeSync', 'afterSync',\n  'beforeAssociate', 'afterAssociate',\n  'beforeDefinitionRefresh', 'afterDefinitionRefresh',\n];\n\nexport const staticModelHooks = new HookHandlerBuilder<ModelHooks>(validModelHooks, async (\n  eventTarget,\n  isAsync,\n  hookName: keyof ModelHooks,\n  args,\n) => {\n  // This forwards hooks run on Models to the Sequelize instance's hooks.\n  const model = eventTarget as ModelStatic;\n\n  if (!model.sequelize) {\n    throw new Error('Model must be initialized before running hooks on it.');\n  }\n\n  if (isAsync) {\n    await model.sequelize.hooks.runAsync(hookName, ...args);\n  } else {\n    model.sequelize.hooks.runSync(hookName, ...args);\n  }\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,mBAAmC;AAqG5B,MAAM,kBAA2C;AAAA,EACtD;AAAA,EAAkB;AAAA,EAAiB;AAAA,EACnC;AAAA,EAAgB;AAAA,EAChB;AAAA,EAAiB;AAAA,EACjB;AAAA,EAAiB;AAAA,EACjB;AAAA,EAAgB;AAAA,EAChB;AAAA,EAAgB;AAAA,EAChB;AAAA,EAAc;AAAA,EACd;AAAA,EAAoB;AAAA,EACpB;AAAA,EAAqB;AAAA,EACrB;AAAA,EAAqB;AAAA,EACrB;AAAA,EAAoB;AAAA,EACpB;AAAA,EACA;AAAA,EAAc;AAAA,EAAmC;AAAA,EAA0B;AAAA,EAC3E;AAAA,EAAc;AAAA,EACd;AAAA,EAAmB;AAAA,EACnB;AAAA,EAA2B;AAC7B;AAEO,MAAM,mBAAmB,IAAI,gCAA+B,iBAAiB,OAClF,aACA,SACA,UACA,SACG;AAEH,QAAM,QAAQ;AAEd,MAAI,CAAC,MAAM,WAAW;AACpB,UAAM,IAAI,MAAM,uDAAuD;AAAA,EACzE;AAEA,MAAI,SAAS;AACX,UAAM,MAAM,UAAU,MAAM,SAAS,UAAU,GAAG,IAAI;AAAA,EACxD,OAAO;AACL,UAAM,UAAU,MAAM,QAAQ,UAAU,GAAG,IAAI;AAAA,EACjD;AACF,CAAC;",
  "names": []
}
