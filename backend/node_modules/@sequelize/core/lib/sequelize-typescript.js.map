{
  "version": 3,
  "sources": ["../src/sequelize-typescript.ts"],
  "sourcesContent": ["import { AsyncLocalStorage } from 'node:async_hooks';\nimport { initDecoratedAssociations } from './decorators/legacy/associations.js';\nimport { initDecoratedModel } from './decorators/shared/model.js';\nimport type { AbstractConnectionManager, Connection, GetConnectionOptions } from './dialects/abstract/connection-manager.js';\nimport type { AbstractDialect } from './dialects/abstract/index.js';\nimport type { EscapeOptions } from './dialects/abstract/query-generator-typescript.js';\nimport type { QiDropAllSchemasOptions } from './dialects/abstract/query-interface.types.js';\nimport type { AbstractQuery } from './dialects/abstract/query.js';\nimport {\n  legacyBuildAddAnyHook,\n  legacyBuildAddHook,\n  legacyBuildHasHook,\n  legacyBuildRemoveHook,\n  legacyBuildRunHook,\n} from './hooks-legacy.js';\nimport type { AsyncHookReturn, HookHandler } from './hooks.js';\nimport { HookHandlerBuilder } from './hooks.js';\nimport type { ModelHooks } from './model-hooks.js';\nimport { validModelHooks } from './model-hooks.js';\nimport { setTransactionFromCls } from './model-internals.js';\nimport type { ModelManager } from './model-manager.js';\nimport type { ConnectionOptions, NormalizedOptions, Options, QueryRawOptions, Sequelize } from './sequelize.js';\nimport type { ManagedTransactionOptions, TransactionOptions } from './transaction.js';\nimport {\n  Transaction,\n  TransactionNestMode,\n  assertTransactionIsCompatibleWithOptions,\n  normalizeTransactionOptions,\n} from './transaction.js';\nimport type { PartialBy } from './utils/types.js';\nimport type {\n  CreateSchemaOptions,\n  DestroyOptions,\n  ModelAttributes,\n  ModelOptions,\n  ModelStatic,\n  QueryOptions,\n  ShowAllSchemasOptions,\n  SyncOptions,\n  TruncateOptions,\n} from '.';\n\nexport interface SequelizeHooks extends ModelHooks {\n  /**\n   * A hook that is run at the start of {@link Sequelize#define} and {@link Model.init}\n   */\n  beforeDefine(attributes: ModelAttributes<any>, options: ModelOptions): void;\n\n  /**\n   * A hook that is run at the end of {@link Sequelize#define} and {@link Model.init}\n   */\n  afterDefine(model: ModelStatic): void;\n\n  /**\n   * A hook that is run before a connection is created\n   */\n  beforeConnect(config: ConnectionOptions): AsyncHookReturn;\n\n  /**\n   * A hook that is run after a connection is created\n   */\n  afterConnect(connection: Connection, config: ConnectionOptions): AsyncHookReturn;\n\n  /**\n   * A hook that is run before a connection is disconnected\n   */\n  beforeDisconnect(connection: Connection): AsyncHookReturn;\n\n  /**\n   * A hook that is run after a connection is disconnected\n   */\n  afterDisconnect(connection: unknown): AsyncHookReturn;\n  beforeQuery(options: QueryOptions, query: AbstractQuery): AsyncHookReturn;\n  afterQuery(options: QueryOptions, query: AbstractQuery): AsyncHookReturn;\n\n  /**\n   * A hook that is run at the start of {@link Sequelize#sync}\n   */\n  beforeBulkSync(options: SyncOptions): AsyncHookReturn;\n\n  /**\n   * A hook that is run at the end of {@link Sequelize#sync}\n   */\n  afterBulkSync(options: SyncOptions): AsyncHookReturn;\n\n  /**\n   * A hook that is run before a connection to the pool\n   */\n  beforePoolAcquire(options?: GetConnectionOptions): AsyncHookReturn;\n\n  /**\n   * A hook that is run after a connection to the pool\n   */\n  afterPoolAcquire(connection: Connection, options?: GetConnectionOptions): AsyncHookReturn;\n}\n\nexport interface StaticSequelizeHooks {\n  /**\n   * A hook that is run at the beginning of the creation of a Sequelize instance.\n   */\n  beforeInit(options: Options): void;\n\n  /**\n   * A hook that is run at the end of the creation of a Sequelize instance.\n   */\n  afterInit(sequelize: Sequelize): void;\n}\n\nexport interface SequelizeTruncateOptions extends TruncateOptions {\n  /**\n   * Most dialects will not allow you to truncate a table while other tables have foreign key references to it (even if they are empty).\n   * This option will disable those checks while truncating all tables, and re-enable them afterwards.\n   *\n   * This option is currently only supported for MySQL, SQLite, and MariaDB.\n   *\n   * Postgres can use {@link TruncateOptions.cascade} to achieve a similar goal.\n   *\n   * If you're experiencing this problem in other dialects, consider using {@link Sequelize.destroyAll} instead.\n   */\n  withoutForeignKeyChecks?: boolean;\n}\n\nexport interface WithConnectionOptions extends PartialBy<GetConnectionOptions, 'type'> {\n  /**\n   * Close the connection when the callback finishes instead of returning it to the pool.\n   * This is useful if you want to ensure that the connection is not reused,\n   * for example if you ran queries that changed session options.\n   */\n  destroyConnection?: boolean;\n}\n\nconst staticSequelizeHooks = new HookHandlerBuilder<StaticSequelizeHooks>([\n  'beforeInit', 'afterInit',\n]);\n\nconst instanceSequelizeHooks = new HookHandlerBuilder<SequelizeHooks>([\n  'beforeQuery', 'afterQuery',\n  'beforeBulkSync', 'afterBulkSync',\n  'beforeConnect', 'afterConnect',\n  'beforeDisconnect', 'afterDisconnect',\n  'beforeDefine', 'afterDefine',\n  'beforePoolAcquire', 'afterPoolAcquire',\n  ...validModelHooks,\n]);\n\ntype TransactionCallback<T> = (t: Transaction) => PromiseLike<T> | T;\ntype SessionCallback<T> = (connection: Connection) => PromiseLike<T> | T;\n\n// DO NOT MAKE THIS CLASS PUBLIC!\n/**\n * This is a temporary class used to progressively migrate the Sequelize class to TypeScript by slowly moving its functions here.\n * Always use {@link Sequelize} instead.\n */\nexport abstract class SequelizeTypeScript {\n  // created by the Sequelize subclass. Will eventually be migrated here.\n  abstract readonly modelManager: ModelManager;\n  abstract readonly dialect: AbstractDialect;\n  declare readonly connectionManager: AbstractConnectionManager;\n  declare readonly options: NormalizedOptions;\n\n  static get hooks(): HookHandler<StaticSequelizeHooks> {\n    return staticSequelizeHooks.getFor(this);\n  }\n\n  static addHook = legacyBuildAddAnyHook(staticSequelizeHooks);\n  static removeHook = legacyBuildRemoveHook(staticSequelizeHooks);\n  static hasHook = legacyBuildHasHook(staticSequelizeHooks);\n  static hasHooks = legacyBuildHasHook(staticSequelizeHooks);\n  static runHooks = legacyBuildRunHook(staticSequelizeHooks);\n\n  static beforeInit = legacyBuildAddHook(staticSequelizeHooks, 'beforeInit');\n  static afterInit = legacyBuildAddHook(staticSequelizeHooks, 'afterInit');\n\n  get hooks(): HookHandler<SequelizeHooks> {\n    return instanceSequelizeHooks.getFor(this);\n  }\n\n  addHook = legacyBuildAddAnyHook(instanceSequelizeHooks);\n  removeHook = legacyBuildRemoveHook(instanceSequelizeHooks);\n  hasHook = legacyBuildHasHook(instanceSequelizeHooks);\n  hasHooks = legacyBuildHasHook(instanceSequelizeHooks);\n  runHooks = legacyBuildRunHook(instanceSequelizeHooks);\n\n  beforeQuery = legacyBuildAddHook(instanceSequelizeHooks, 'beforeQuery');\n  afterQuery = legacyBuildAddHook(instanceSequelizeHooks, 'afterQuery');\n\n  beforeBulkSync = legacyBuildAddHook(instanceSequelizeHooks, 'beforeBulkSync');\n  afterBulkSync = legacyBuildAddHook(instanceSequelizeHooks, 'afterBulkSync');\n\n  beforeConnect = legacyBuildAddHook(instanceSequelizeHooks, 'beforeConnect');\n  afterConnect = legacyBuildAddHook(instanceSequelizeHooks, 'afterConnect');\n\n  beforeDisconnect = legacyBuildAddHook(instanceSequelizeHooks, 'beforeDisconnect');\n  afterDisconnect = legacyBuildAddHook(instanceSequelizeHooks, 'afterDisconnect');\n\n  beforeDefine = legacyBuildAddHook(instanceSequelizeHooks, 'beforeDefine');\n  afterDefine = legacyBuildAddHook(instanceSequelizeHooks, 'afterDefine');\n\n  beforePoolAcquire = legacyBuildAddHook(instanceSequelizeHooks, 'beforePoolAcquire');\n  afterPoolAcquire = legacyBuildAddHook(instanceSequelizeHooks, 'afterPoolAcquire');\n\n  beforeValidate = legacyBuildAddHook(instanceSequelizeHooks, 'beforeValidate');\n  afterValidate = legacyBuildAddHook(instanceSequelizeHooks, 'afterValidate');\n  validationFailed = legacyBuildAddHook(instanceSequelizeHooks, 'validationFailed');\n\n  beforeCreate = legacyBuildAddHook(instanceSequelizeHooks, 'beforeCreate');\n  afterCreate = legacyBuildAddHook(instanceSequelizeHooks, 'afterCreate');\n\n  beforeDestroy = legacyBuildAddHook(instanceSequelizeHooks, 'beforeDestroy');\n  afterDestroy = legacyBuildAddHook(instanceSequelizeHooks, 'afterDestroy');\n\n  beforeRestore = legacyBuildAddHook(instanceSequelizeHooks, 'beforeRestore');\n  afterRestore = legacyBuildAddHook(instanceSequelizeHooks, 'afterRestore');\n\n  beforeUpdate = legacyBuildAddHook(instanceSequelizeHooks, 'beforeUpdate');\n  afterUpdate = legacyBuildAddHook(instanceSequelizeHooks, 'afterUpdate');\n\n  beforeUpsert = legacyBuildAddHook(instanceSequelizeHooks, 'beforeUpsert');\n  afterUpsert = legacyBuildAddHook(instanceSequelizeHooks, 'afterUpsert');\n\n  beforeSave = legacyBuildAddHook(instanceSequelizeHooks, 'beforeSave');\n  afterSave = legacyBuildAddHook(instanceSequelizeHooks, 'afterSave');\n\n  beforeBulkCreate = legacyBuildAddHook(instanceSequelizeHooks, 'beforeBulkCreate');\n  afterBulkCreate = legacyBuildAddHook(instanceSequelizeHooks, 'afterBulkCreate');\n\n  beforeBulkDestroy = legacyBuildAddHook(instanceSequelizeHooks, 'beforeBulkDestroy');\n  afterBulkDestroy = legacyBuildAddHook(instanceSequelizeHooks, 'afterBulkDestroy');\n\n  beforeBulkRestore = legacyBuildAddHook(instanceSequelizeHooks, 'beforeBulkRestore');\n  afterBulkRestore = legacyBuildAddHook(instanceSequelizeHooks, 'afterBulkRestore');\n\n  beforeBulkUpdate = legacyBuildAddHook(instanceSequelizeHooks, 'beforeBulkUpdate');\n  afterBulkUpdate = legacyBuildAddHook(instanceSequelizeHooks, 'afterBulkUpdate');\n\n  beforeCount = legacyBuildAddHook(instanceSequelizeHooks, 'beforeCount');\n\n  beforeFind = legacyBuildAddHook(instanceSequelizeHooks, 'beforeFind');\n  beforeFindAfterExpandIncludeAll = legacyBuildAddHook(instanceSequelizeHooks, 'beforeFindAfterExpandIncludeAll');\n  beforeFindAfterOptions = legacyBuildAddHook(instanceSequelizeHooks, 'beforeFindAfterOptions');\n  afterFind = legacyBuildAddHook(instanceSequelizeHooks, 'afterFind');\n\n  beforeSync = legacyBuildAddHook(instanceSequelizeHooks, 'beforeSync');\n  afterSync = legacyBuildAddHook(instanceSequelizeHooks, 'afterSync');\n\n  beforeAssociate = legacyBuildAddHook(instanceSequelizeHooks, 'beforeAssociate');\n  afterAssociate = legacyBuildAddHook(instanceSequelizeHooks, 'afterAssociate');\n\n  #transactionCls: AsyncLocalStorage<Transaction> | undefined;\n\n  /**\n   * The QueryInterface instance, dialect dependant.\n   */\n  get queryInterface() {\n    return this.dialect.queryInterface;\n  }\n\n  /**\n   * The QueryGenerator instance, dialect dependant.\n   */\n  get queryGenerator() {\n    return this.dialect.queryGenerator;\n  }\n\n  private _setupTransactionCls() {\n    this.#transactionCls = new AsyncLocalStorage<Transaction>();\n  }\n\n  addModels(models: ModelStatic[]) {\n    const registeredModels = models.filter(model => initDecoratedModel(\n      model,\n      // @ts-expect-error -- remove once this class has been merged back with the Sequelize class\n      this,\n    ));\n\n    for (const model of registeredModels) {\n      initDecoratedAssociations(\n        model,\n        // @ts-expect-error -- remove once this class has been merged back with the Sequelize class\n        this,\n      );\n    }\n  }\n\n  /**\n   * Escape value to be used in raw SQL.\n   *\n   * If you are using this to use the value in a {@link literal}, consider using {@link sql} instead, which automatically\n   * escapes interpolated values.\n   *\n   * @param value The value to escape\n   * @param options\n   */\n  escape(value: unknown, options?: EscapeOptions) {\n    return this.dialect.queryGenerator.escape(value, options);\n  }\n\n  /**\n   * Returns the transaction that is associated to the current asynchronous operation.\n   * This method returns undefined if no transaction is active in the current asynchronous operation,\n   * or if {@link Options.disableClsTransactions} is true.\n   */\n  getCurrentClsTransaction(): Transaction | undefined {\n    return this.#transactionCls?.getStore();\n  }\n\n  /**\n   * Start a managed transaction: Sequelize will create a transaction, pass it to your callback, and commit\n   * it once the promise returned by your callback resolved, or execute a rollback if the promise rejects.\n   *\n   * ```ts\n   * try {\n   *   await sequelize.transaction(() => {\n   *     const user = await User.findOne(...);\n   *     await user.update(...);\n   *   });\n   *\n   *   // By now, the transaction has been committed\n   * } catch {\n   *   // If the transaction callback threw an error, the transaction has been rolled back\n   * }\n   * ```\n   *\n   * By default, Sequelize uses AsyncLocalStorage to automatically pass the transaction to all queries executed inside the callback (unless you already pass one or set the `transaction` option to null).\n   * This can be disabled by setting {@link Options.disableClsTransactions} to true. You will then need to pass transactions to your queries manually.\n   *\n   * ```ts\n   * const sequelize = new Sequelize({\n   *   // ...\n   *   disableClsTransactions: true,\n   * })\n   *\n   * await sequelize.transaction(transaction => {\n   *   // transactions are not automatically passed around anymore, you need to do it yourself:\n   *   const user = await User.findOne(..., { transaction });\n   *   await user.update(..., { transaction });\n   * });\n   * ```\n   *\n   * If you want to manage your transaction yourself, use {@link startUnmanagedTransaction}.\n   *\n   * @param callback Async callback during which the transaction will be active\n   */\n  transaction<T>(callback: TransactionCallback<T>): Promise<T>;\n  /**\n   * @param options Transaction Options\n   * @param callback Async callback during which the transaction will be active\n   */\n  transaction<T>(options: ManagedTransactionOptions, callback: TransactionCallback<T>): Promise<T>;\n  async transaction<T>(\n    optionsOrCallback: ManagedTransactionOptions | TransactionCallback<T>,\n    maybeCallback?: TransactionCallback<T>,\n  ): Promise<T> {\n    let options: ManagedTransactionOptions;\n    let callback: TransactionCallback<T>;\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      callback = maybeCallback!;\n      options = optionsOrCallback;\n    }\n\n    if (!callback) {\n      throw new Error('sequelize.transaction requires a callback. If you wish to start an unmanaged transaction, please use sequelize.startUnmanagedTransaction instead');\n    }\n\n    const nestMode: TransactionNestMode = options.nestMode ?? this.options.defaultTransactionNestMode;\n\n    // @ts-expect-error -- will be fixed once this class has been merged back with the Sequelize class\n    const normalizedOptions = normalizeTransactionOptions(this, options);\n\n    if (nestMode === TransactionNestMode.separate) {\n      delete normalizedOptions.transaction;\n    } else {\n      // @ts-expect-error -- will be fixed once this class has been merged back with the Sequelize class\n      setTransactionFromCls(normalizedOptions, this);\n\n      // in reuse & savepoint mode,\n      // we use the same transaction, so we need to make sure it's compatible with the requested options\n      if (normalizedOptions.transaction) {\n        assertTransactionIsCompatibleWithOptions(normalizedOptions.transaction, normalizedOptions);\n      }\n    }\n\n    const transaction = nestMode === TransactionNestMode.reuse && normalizedOptions.transaction\n      ? normalizedOptions.transaction\n      : new Transaction(\n        // @ts-expect-error -- will be fixed once this class has been merged back with the Sequelize class\n        this,\n        normalizedOptions,\n      );\n\n    const isReusedTransaction = transaction === normalizedOptions.transaction;\n\n    const wrappedCallback = async () => {\n      // We did not create this transaction, so we're not responsible for managing it.\n      if (isReusedTransaction) {\n        return callback(transaction);\n      }\n\n      await transaction.prepareEnvironment();\n\n      let result;\n      try {\n        result = await callback(transaction);\n      } catch (error) {\n        try {\n          await transaction.rollback();\n        } catch {\n          // ignore, because 'rollback' will already print the error before killing the connection\n        }\n\n        throw error;\n      }\n\n      await transaction.commit();\n\n      return result;\n    };\n\n    const cls = this.#transactionCls;\n    if (!cls) {\n      return wrappedCallback();\n    }\n\n    return cls.run(transaction, wrappedCallback);\n  }\n\n  /**\n   * We highly recommend using {@link Sequelize#transaction} instead.\n   * If you really want to use the manual solution, don't forget to commit or rollback your transaction once you are done with it.\n   *\n   * Transactions started by this method are not automatically passed to queries. You must pass the transaction object manually,\n   * even if {@link Options.disableClsTransactions} is false.\n   *\n   * @example\n   * ```ts\n   * try {\n   *   const transaction = await sequelize.startUnmanagedTransaction();\n   *   const user = await User.findOne(..., { transaction });\n   *   await user.update(..., { transaction });\n   *   await transaction.commit();\n   * } catch(err) {\n   *   await transaction.rollback();\n   * }\n   * ```\n   *\n   * @param options\n   */\n  async startUnmanagedTransaction(options?: TransactionOptions): Promise<Transaction> {\n    const transaction = new Transaction(\n      // @ts-expect-error -- remove once this class has been merged back with the Sequelize class\n      this,\n      options,\n    );\n\n    await transaction.prepareEnvironment();\n\n    return transaction;\n  }\n\n  /**\n   * A slower alternative to {@link truncate} that uses DELETE FROM instead of TRUNCATE,\n   * but which works with foreign key constraints in dialects that don't support TRUNCATE CASCADE (postgres),\n   * or temporarily disabling foreign key constraints (mysql, mariadb, sqlite).\n   *\n   * @param options\n   */\n  async destroyAll(options?: Omit<DestroyOptions, 'where' | 'limit' | 'truncate'>) {\n    const sortedModels = this.modelManager.getModelsTopoSortedByForeignKey();\n    const models = sortedModels || this.modelManager.models;\n\n    // It does not make sense to apply a limit to something that will run on all models\n    if (options && 'limit' in options) {\n      throw new Error('sequelize.destroyAll does not support the limit option.');\n    }\n\n    // We will eventually remove the \"truncate\" option from Model.destroy, in favor of using Model.truncate,\n    // so we don't support it in new methods.\n    if (options && 'truncate' in options) {\n      throw new Error('sequelize.destroyAll does not support the truncate option. Use sequelize.truncate instead.');\n    }\n\n    for (const model of models) {\n      // eslint-disable-next-line no-await-in-loop\n      await model.destroy({ ...options, where: {} });\n    }\n  }\n\n  /**\n   * Truncate all models registered in this instance.\n   * This is done by calling {@link Model.truncate} on each model.\n   *\n   * @param options The options passed to {@link Model.truncate}, plus \"withoutForeignKeyChecks\".\n   */\n  async truncate(options?: SequelizeTruncateOptions): Promise<void> {\n    const sortedModels = this.modelManager.getModelsTopoSortedByForeignKey();\n    const models = sortedModels || this.modelManager.models;\n    const hasCyclicDependencies = sortedModels == null;\n\n    if (hasCyclicDependencies && !options?.cascade && !options?.withoutForeignKeyChecks) {\n      throw new Error('Sequelize#truncate: Some of your models have cyclic references (foreign keys). You need to use the \"cascade\" or \"withoutForeignKeyChecks\" options to be able to delete rows from models that have cyclic references.');\n    }\n\n    if (options?.withoutForeignKeyChecks) {\n      if (!this.dialect.supports.constraints.foreignKeyChecksDisableable) {\n        throw new Error(`Sequelize#truncate: ${this.dialect.name} does not support disabling foreign key checks. The \"withoutForeignKeyChecks\" option cannot be used.`);\n      }\n\n      // Dialects that don't support cascade will throw if a foreign key references a table that is truncated,\n      // even if there are no actual rows in the referencing table. To work around this, we disable foreign key.\n      return this.queryInterface.withoutForeignKeyChecks(options, async connection => {\n        const truncateOptions = { ...options, connection };\n\n        await Promise.all(models.map(async model => model.truncate(truncateOptions)));\n      });\n    }\n\n    if (options?.cascade) {\n      for (const model of models) {\n        // If cascade is enabled, we can assume there are foreign keys between the models, so we must truncate them sequentially.\n        // eslint-disable-next-line no-await-in-loop\n        await model.truncate(options);\n      }\n\n      return;\n    }\n\n    await Promise.all(models.map(async model => model.truncate(options)));\n  }\n\n  async withConnection<T>(options: WithConnectionOptions, callback: SessionCallback<T>): Promise<T>;\n  async withConnection<T>(callback: SessionCallback<T>): Promise<T>;\n  async withConnection<T>(\n    optionsOrCallback: SessionCallback<T> | WithConnectionOptions,\n    maybeCallback?: SessionCallback<T>,\n  ): Promise<T> {\n    let options: WithConnectionOptions;\n    let callback: SessionCallback<T>;\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n      options = { type: 'write' };\n    } else {\n      callback = maybeCallback!;\n      options = { type: 'write', ...optionsOrCallback };\n    }\n\n    const connection = await this.connectionManager.getConnection(options as GetConnectionOptions);\n\n    try {\n      return await callback(connection);\n    } finally {\n      if (options.destroyConnection) {\n        await this.connectionManager.destroyConnection(connection);\n      } else {\n        this.connectionManager.releaseConnection(connection);\n      }\n    }\n  }\n\n  /**\n   * Alias of {@link AbstractQueryInterface#createSchema}\n   *\n   * @param schema Name of the schema\n   * @param options\n   */\n  async createSchema(schema: string, options?: CreateSchemaOptions): Promise<void> {\n    return this.queryInterface.createSchema(schema, options);\n  }\n\n  /**\n   * Alias of {@link AbstractQueryInterface#showAllSchemas}\n   *\n   * @param options\n   */\n  async showAllSchemas(options?: ShowAllSchemasOptions) {\n    return this.queryInterface.showAllSchemas(options);\n  }\n\n  /**\n   * Alias of {@link AbstractQueryInterface#dropSchema}\n   *\n   * @param schema\n   * @param options\n   */\n  async dropSchema(schema: string, options?: QueryRawOptions) {\n    return this.queryInterface.dropSchema(schema, options);\n  }\n\n  /**\n   * Alias of {@link AbstractQueryInterface#dropAllSchemas}\n   *\n   * @param options\n   */\n  async dropAllSchemas(options?: QiDropAllSchemasOptions) {\n    return this.queryInterface.dropAllSchemas(options);\n  }\n\n  /**\n   * Throws if the database version hasn't been loaded yet.\n   * It is automatically loaded the first time Sequelize connects to your database.\n   *\n   * You can use {@link Sequelize#authenticate} to cause a first connection.\n   *\n   * @returns current version of the dialect that is internally loaded\n   */\n  getDatabaseVersion(): string {\n    if (this.options.databaseVersion == null) {\n      throw new Error('The current database version is unknown. Please call `sequelize.authenticate()` first to fetch it, or manually configure it through options.');\n    }\n\n    return this.options.databaseVersion;\n  }\n\n  /**\n   * Alias of {@link AbstractQueryInterface#fetchDatabaseVersion}\n   *\n   * @param options\n   */\n  async fetchDatabaseVersion(options?: QueryRawOptions) {\n    return this.queryInterface.fetchDatabaseVersion(options);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
