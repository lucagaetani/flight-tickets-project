{
  "version": 3,
  "sources": ["../src/transaction.ts"],
  "sourcesContent": ["import assert from 'node:assert';\nimport type { Class } from 'type-fest';\nimport { EMPTY_OBJECT } from './utils/object.js';\nimport type { StrictRequiredBy } from './utils/types.js';\nimport type { Connection, ConstraintChecking, Logging, Sequelize } from './index.js';\n\ntype TransactionCallback = (transaction: Transaction) => void | Promise<void>;\n\n/**\n * The transaction object is used to identify a running transaction.\n * It is created by calling `Sequelize.transaction()`.\n * To run a query under a transaction, you should pass the transaction in the options object.\n *\n * @class Transaction\n * @see {Sequelize.transaction}\n */\nexport class Transaction {\n\n  sequelize: Sequelize;\n\n  readonly #afterCommitHooks: Set<TransactionCallback> = new Set();\n  readonly #afterRollbackHooks: Set<TransactionCallback> = new Set();\n  readonly #afterHooks: Set<TransactionCallback> = new Set();\n\n  private readonly savepoints: Transaction[] = [];\n  readonly options: Readonly<NormalizedTransactionOptions>;\n  readonly parent: Transaction | null;\n  readonly id: string;\n  private readonly name: string;\n  private finished: 'commit' | undefined;\n  #connection: Connection | undefined;\n\n  /**\n   * Creates a new transaction instance\n   *\n   * @param sequelize A configured sequelize Instance\n   * @param options An object with options\n   * @param [options.type] Sets the type of the transaction. Sqlite only\n   * @param [options.isolationLevel] Sets the isolation level of the transaction.\n   * @param [options.constraintChecking] Sets the constraints to be deferred or immediately checked. PostgreSQL only\n   */\n  constructor(sequelize: Sequelize, options: TransactionOptions) {\n    this.sequelize = sequelize;\n\n    // get dialect specific transaction options\n    const generateTransactionId = this.sequelize.dialect\n      .queryGenerator\n      .generateTransactionId;\n\n    const normalizedOptions = normalizeTransactionOptions(this.sequelize, options);\n    this.parent = normalizedOptions.transaction ?? null;\n    delete normalizedOptions.transaction;\n\n    this.options = Object.freeze(normalizedOptions);\n\n    if (this.parent) {\n      this.id = this.parent.id;\n      this.parent.savepoints.push(this);\n      this.name = `${this.id}-sp-${this.parent.savepoints.length}`;\n    } else {\n      const id = generateTransactionId();\n      this.id = id;\n      this.name = id;\n    }\n  }\n\n  getConnection(): Connection {\n    if (!this.#connection) {\n      throw new Error('This transaction is not bound to a connection.');\n    }\n\n    return this.#connection;\n  }\n\n  getConnectionIfExists(): Connection | undefined {\n    return this.#connection;\n  }\n\n  /**\n   * Commit the transaction.\n   */\n  async commit(): Promise<void> {\n    if (this.finished) {\n      throw new Error(`Transaction cannot be committed because it has been finished with state: ${this.finished}`);\n    }\n\n    try {\n      await this.sequelize.queryInterface.commitTransaction(this, this.options);\n\n      await this.#dispatchHooks(this.#afterCommitHooks);\n      await this.#dispatchHooks(this.#afterHooks);\n\n      this.cleanup();\n    } catch (error) {\n      console.warn(`Committing transaction ${this.id} failed with error ${error instanceof Error ? JSON.stringify(error.message) : String(error)}. We are killing its connection as it is now in an undetermined state.`);\n      await this.forceCleanup();\n\n      throw error;\n    } finally {\n      this.finished = 'commit';\n    }\n  }\n\n  /**\n   * Rollback (abort) the transaction\n   */\n  async rollback(): Promise<void> {\n    if (this.finished) {\n      throw new Error(`Transaction cannot be rolled back because it has been finished with state: ${this.finished}`);\n    }\n\n    if (!this.#connection) {\n      throw new Error('Transaction cannot be rolled back because it never started');\n    }\n\n    try {\n      await this\n        .sequelize\n        .queryInterface\n        .rollbackTransaction(this, this.options);\n\n      await this.#dispatchHooks(this.#afterRollbackHooks);\n      await this.#dispatchHooks(this.#afterHooks);\n\n      this.cleanup();\n    } catch (error) {\n      console.warn(`Rolling back transaction ${this.id} failed with error ${error instanceof Error ? JSON.stringify(error.message) : String(error)}. We are killing its connection as it is now in an undetermined state.`);\n      await this.forceCleanup();\n\n      throw error;\n    }\n  }\n\n  async #dispatchHooks(hooks: Set<TransactionCallback>) {\n    for (const hook of hooks) {\n      // eslint-disable-next-line no-await-in-loop -- sequentially call hooks\n      await Reflect.apply(hook, this, [this]);\n    }\n  }\n\n  /**\n   * Called to acquire a connection to use and set the correct options on the connection.\n   * We should ensure all the environment that's set up is cleaned up in `cleanup()` below.\n   */\n  async prepareEnvironment() {\n    let connection;\n    if (this.parent) {\n      connection = this.parent.#connection;\n    } else {\n      connection = await this.sequelize.connectionManager.getConnection({\n        type: this.options.readOnly ? 'read' : 'write',\n        uuid: this.id,\n      });\n    }\n\n    assert(connection != null, 'Transaction failed to acquire Connection.');\n\n    connection.uuid = this.id;\n\n    this.#connection = connection;\n\n    let result;\n    try {\n      await this.begin();\n\n      result = await this.setDeferrable();\n    } catch (error) {\n      try {\n        await this.rollback();\n      } finally {\n        throw error; // eslint-disable-line no-unsafe-finally -- while this will mask the error thrown by `rollback`, the previous error is more important.\n      }\n    }\n\n    return result;\n  }\n\n  async setDeferrable(): Promise<void> {\n    if (this.options.constraintChecking) {\n      await this\n        .sequelize\n        .queryInterface\n        .deferConstraints(this.options.constraintChecking, { transaction: this });\n    }\n  }\n\n  async begin() {\n    const queryInterface = this.sequelize.queryInterface;\n\n    if (this.sequelize.dialect.supports.settingIsolationLevelDuringTransaction) {\n      await queryInterface.startTransaction(this, this.options);\n\n      if (this.options.isolationLevel) {\n        await queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\n      }\n\n      return;\n    }\n\n    if (this.options.isolationLevel) {\n      await queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\n    }\n\n    await queryInterface.startTransaction(this, this.options);\n  }\n\n  cleanup(): void {\n    // Don't release the connection if there's a parent transaction or\n    // if we've already cleaned up\n    if (this.parent || this.#connection?.uuid === undefined) {\n      return;\n    }\n\n    this.sequelize.connectionManager.releaseConnection(this.#connection);\n    this.#connection.uuid = undefined;\n    this.#connection = undefined;\n  }\n\n  /**\n   * Kills the connection this transaction uses.\n   * Used as a last resort, for instance because COMMIT or ROLLBACK resulted in an error\n   * and the transaction is left in a broken state,\n   * and releasing the connection to the pool would be dangerous.\n   */\n  async forceCleanup() {\n    // Don't release the connection if there's a parent transaction or\n    // if we've already cleaned up\n    if (this.parent || this.#connection?.uuid === undefined) {\n      return;\n    }\n\n    this.#connection.uuid = undefined;\n\n    const connection = this.#connection;\n    this.#connection = undefined;\n\n    await this.sequelize.connectionManager.destroyConnection(connection);\n  }\n\n  /**\n   * Adds a hook that is run after a transaction is committed.\n   *\n   * @param callback A callback function that is called with the transaction\n   */\n  afterCommit(callback: TransactionCallback): this {\n    if (typeof callback !== 'function') {\n      throw new TypeError('\"callback\" must be a function');\n    }\n\n    this.#afterCommitHooks.add(callback);\n\n    return this;\n  }\n\n  /**\n   * Adds a hook that is run after a transaction is rolled back.\n   *\n   * @param callback A callback function that is called with the transaction\n   */\n  afterRollback(callback: TransactionCallback): this {\n    if (typeof callback !== 'function') {\n      throw new TypeError('\"callback\" must be a function');\n    }\n\n    this.#afterRollbackHooks.add(callback);\n\n    return this;\n  }\n\n  /**\n   * Adds a hook that is run after a transaction completes, no matter if it was committed or rolled back.\n   *\n   * @param callback A callback function that is called with the transaction\n   */\n  afterTransaction(callback: TransactionCallback): this {\n    if (typeof callback !== 'function') {\n      throw new TypeError('\"callback\" must be a function');\n    }\n\n    this.#afterHooks.add(callback);\n\n    return this;\n  }\n\n  /**\n   * Types can be set per-transaction by passing `options.type` to `sequelize.transaction`.\n   * Default to `DEFERRED` but you can override the default type by passing `options.transactionType` in `new Sequelize`.\n   * Sqlite only.\n   *\n   * Pass in the desired level as the first argument:\n   *\n   * @example\n   * try {\n   *   await sequelize.transaction({ type: Sequelize.Transaction.TYPES.EXCLUSIVE }, transaction => {\n   *      // your transactions\n   *   });\n   *   // transaction has been committed. Do something after the commit if required.\n   * } catch(err) {\n   *   // do something with the err.\n   * }\n   *\n   * @property DEFERRED\n   * @property IMMEDIATE\n   * @property EXCLUSIVE\n   *\n   * @deprecated use the {@link TransactionType} export\n   */\n  static get TYPES() {\n    return TransactionType;\n  }\n\n  /**\n   * Isolation levels can be set per-transaction by passing `options.isolationLevel` to `sequelize.transaction`.\n   * Sequelize uses the default isolation level of the database, you can override this by passing `options.isolationLevel` in Sequelize constructor options.\n   *\n   * Pass in the desired level as the first argument:\n   *\n   * @example\n   * try {\n   *   const result = await sequelize.transaction({isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE}, transaction => {\n   *     // your transactions\n   *   });\n   *   // transaction has been committed. Do something after the commit if required.\n   * } catch(err) {\n   *   // do something with the err.\n   * }\n   *\n   * @property READ_UNCOMMITTED\n   * @property READ_COMMITTED\n   * @property REPEATABLE_READ\n   * @property SERIALIZABLE\n   *\n   * @deprecated use the {@link IsolationLevel} export\n   */\n  static get ISOLATION_LEVELS() {\n    return IsolationLevel;\n  }\n\n  /**\n   * Possible options for row locking. Used in conjunction with `find` calls:\n   *\n   * @example\n   * // t1 is a transaction\n   * Model.findAll({\n   *   where: ...,\n   *   transaction: t1,\n   *   lock: t1.LOCK...\n   * });\n   *\n   * @example Postgres also supports specific locks while eager loading by using OF:\n   * ```ts\n   * UserModel.findAll({\n   *   where: ...,\n   *   include: [TaskModel, ...],\n   *   transaction: t1,\n   *   lock: {\n   *     level: t1.LOCK...,\n   *     of: UserModel\n   *   }\n   * });\n   * ```\n   *\n   * UserModel will be locked but TaskModel won't!\n   *\n   * @example You can also skip locked rows:\n   * ```ts\n   * // t1 is a transaction\n   * Model.findAll({\n   *   where: ...,\n   *   transaction: t1,\n   *   lock: true,\n   *   skipLocked: true\n   * });\n   * ```\n   *\n   * The query will now return any rows that aren't locked by another transaction\n   *\n   * @returns possible options for row locking\n   * @property UPDATE\n   * @property SHARE\n   * @property KEY_SHARE Postgres 9.3+ only\n   * @property NO_KEY_UPDATE Postgres 9.3+ only\n   *\n   * @deprecated use the {@link Lock} export\n   */\n  static get LOCK() {\n    return Lock;\n  }\n\n  /**\n   * Same as {@link Transaction.LOCK}, but can also be called on instances of\n   * transactions to get possible options for row locking directly from the\n   * instance.\n   *\n   * @deprecated use the {@link Lock} export\n   */\n  get LOCK() {\n    return Lock;\n  }\n\n  /**\n   * Get the root transaction if nested, or self if this is a root transaction\n   */\n  get rootTransaction(): Transaction {\n    if (this.parent !== null) {\n      return this.parent.rootTransaction;\n    }\n\n    return this;\n  }\n}\n\n/**\n * Isolations levels can be set per-transaction by passing `options.isolationLevel` to `sequelize.transaction`.\n * Default to `REPEATABLE_READ` but you can override the default isolation level by passing `options.isolationLevel` in `new Sequelize`.\n *\n * The possible isolations levels to use when starting a transaction:\n *\n * ```js\n * {\n *   READ_UNCOMMITTED: \"READ UNCOMMITTED\",\n *   READ_COMMITTED: \"READ COMMITTED\",\n *   REPEATABLE_READ: \"REPEATABLE READ\",\n *   SERIALIZABLE: \"SERIALIZABLE\"\n * }\n * ```\n *\n * Pass in the desired level as the first argument:\n *\n * ```js\n * try {\n *   await sequelize.transaction({isolationLevel: Sequelize.Transaction.SERIALIZABLE}, transaction => {\n *      // your transactions\n *   });\n *   // transaction has been committed. Do something after the commit if required.\n * } catch(err) {\n *   // do something with the err.\n * }\n * ```\n */\nexport enum IsolationLevel {\n  READ_UNCOMMITTED = 'READ UNCOMMITTED',\n  READ_COMMITTED = 'READ COMMITTED',\n  REPEATABLE_READ = 'REPEATABLE READ',\n  SERIALIZABLE = 'SERIALIZABLE',\n}\n\nexport enum TransactionType {\n  DEFERRED = 'DEFERRED',\n  IMMEDIATE = 'IMMEDIATE',\n  EXCLUSIVE = 'EXCLUSIVE',\n}\n\n/**\n * Possible options for row locking. Used in conjunction with `find` calls:\n *\n * Usage:\n * ```js\n * import { LOCK } from '@sequelize/core';\n *\n * Model.findAll({\n *   transaction,\n *   lock: LOCK.UPDATE,\n * });\n * ```\n *\n * Postgres also supports specific locks while eager loading by using OF:\n * ```js\n * import { LOCK } from '@sequelize/core';\n *\n * UserModel.findAll({\n *   transaction,\n *   lock: {\n *     level: LOCK.KEY_SHARE,\n *     of: UserModel,\n *   },\n * });\n * ```\n * UserModel will be locked but other models won't be!\n *\n * [Read more on transaction locks here](https://sequelize.org/docs/v7/other-topics/transactions/#locks)\n */\nexport enum Lock {\n  UPDATE = 'UPDATE',\n  SHARE = 'SHARE',\n  /**\n   * Postgres 9.3+ only\n   */\n  KEY_SHARE = 'KEY SHARE',\n  /**\n   * Postgres 9.3+ only\n   */\n  NO_KEY_UPDATE = 'NO KEY UPDATE',\n}\n\nexport enum TransactionNestMode {\n  /**\n   * In this mode, nesting a transaction block in another will reuse the parent transaction\n   * if its options are compatible (or throw an error otherwise).\n   *\n   * This is the default mode.\n   */\n  reuse = 'reuse',\n\n  /**\n   * In this mode, nesting a transaction block will cause the creation of a SAVEPOINT\n   * on the current transaction if the options provided to the nested transaction block are compatible with the parent one.\n   */\n  savepoint = 'savepoint',\n\n  /**\n   * In this mode, nesting a transaction block will always create a new transaction, in a separate connection.\n   * This mode is equivalent to setting the \"transaction\" option to \"null\" in the nested transaction block.\n   *\n   * Be very careful when using this mode, as it can easily lead to transaction deadlocks if used improperly.\n   */\n  separate = 'separate',\n}\n\n/**\n * Options provided when the transaction is created\n */\nexport interface TransactionOptions extends Logging {\n  /**\n   * Whether this transaction will only be used to read data.\n   * Used to determine whether sequelize is allowed to use a read replication server.\n   */\n  readOnly?: boolean | undefined;\n  isolationLevel?: IsolationLevel | null | undefined;\n  type?: TransactionType | undefined;\n  constraintChecking?: ConstraintChecking | Class<ConstraintChecking> | undefined;\n\n  /**\n   * Parent transaction.\n   * Will be retrieved from CLS automatically if not provided or if null.\n   */\n  transaction?: Transaction | null | undefined;\n}\n\nexport type NormalizedTransactionOptions = StrictRequiredBy<Omit<TransactionOptions, 'constraintChecking'>, 'type' | 'isolationLevel' | 'readOnly'> & {\n  constraintChecking?: ConstraintChecking | undefined,\n};\n\n/**\n * Options accepted by {@link Sequelize#transaction}.\n */\nexport interface ManagedTransactionOptions extends TransactionOptions {\n  /**\n   * How the transaction block should behave if a parent transaction block exists.\n   */\n  nestMode?: TransactionNestMode;\n}\n\nexport function normalizeTransactionOptions(\n  sequelize: Sequelize,\n  options: TransactionOptions = EMPTY_OBJECT,\n): NormalizedTransactionOptions {\n  return {\n    ...options,\n    type: options.type ?? sequelize.options.transactionType,\n    isolationLevel: options.isolationLevel === undefined\n      ? (sequelize.options.isolationLevel ?? null)\n      : options.isolationLevel,\n    readOnly: options.readOnly ?? false,\n    constraintChecking: typeof options.constraintChecking === 'function' ? new options.constraintChecking() : options.constraintChecking,\n  };\n}\n\nexport function assertTransactionIsCompatibleWithOptions(transaction: Transaction, options: NormalizedTransactionOptions) {\n  if (options.isolationLevel !== transaction.options.isolationLevel) {\n    throw new Error(\n      `Requested isolation level (${options.isolationLevel ?? 'unspecified'}) is not compatible with the one of the existing transaction (${transaction.options.isolationLevel ?? 'unspecified'})`,\n    );\n  }\n\n  if (options.readOnly !== transaction.options.readOnly) {\n    throw new Error(\n      `Requested a transaction in ${options.readOnly ? 'read-only' : 'read/write'} mode, which is not compatible with the existing ${transaction.options.readOnly ? 'read-only' : 'read/write'} transaction`,\n    );\n  }\n\n  if (options.type !== transaction.options.type) {\n    throw new Error(\n      `Requested transaction type (${options.type}) is not compatible with the one of the existing transaction (${transaction.options.type})`,\n    );\n  }\n\n  if (\n    options.constraintChecking !== transaction.options.constraintChecking\n    && !options.constraintChecking?.isEqual(transaction.options.constraintChecking)\n  ) {\n    throw new Error(\n      `Requested transaction constraintChecking (${options.constraintChecking ?? 'none'}) is not compatible with the one of the existing transaction (${transaction.options.constraintChecking ?? 'none'})`,\n    );\n  }\n}\n"],
  "mappings": "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",
  "names": ["assert", "IsolationLevel", "TransactionType", "Lock", "TransactionNestMode"]
}
