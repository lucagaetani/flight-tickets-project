{
  "version": 3,
  "sources": ["../src/geo-json.ts"],
  "sourcesContent": ["import util from 'node:util';\nimport { isPlainObject } from './utils/check.js';\nimport { validator as Validator } from './utils/validator-extras.js';\n\nexport enum GeoJsonType {\n  Point = 'Point',\n  LineString = 'LineString',\n  Polygon = 'Polygon',\n  MultiPoint = 'MultiPoint',\n  MultiLineString = 'MultiLineString',\n  MultiPolygon = 'MultiPolygon',\n  GeometryCollection = 'GeometryCollection',\n}\n\ninterface BaseGeoJson<Type> {\n  type: Type;\n  properties?: Record<string, unknown>;\n  crs?: {\n    type: 'name',\n    properties: {\n      name: string,\n    },\n  };\n}\n\nexport type PositionPosition = [x: number, y: number, elevation?: number];\n\nexport interface GeoJsonPoint extends BaseGeoJson<'Point'> {\n  coordinates: PositionPosition | [];\n}\n\nexport interface GeoJsonLineString extends BaseGeoJson<'LineString'> {\n  coordinates: PositionPosition[];\n}\n\nexport interface GeoJsonPolygon extends BaseGeoJson<'Polygon'> {\n  coordinates: PositionPosition[][];\n}\n\nexport interface GeoJsonMultiPoint extends BaseGeoJson<'MultiPoint'> {\n  coordinates: PositionPosition[];\n}\n\nexport interface GeoJsonMultiLineString extends BaseGeoJson<'MultiLineString'> {\n  coordinates: PositionPosition[][];\n}\n\nexport interface GeoJsonMultiPolygon extends BaseGeoJson<'MultiPolygon'> {\n  coordinates: PositionPosition[][][];\n}\n\nexport interface GeoJsonGeometryCollection extends BaseGeoJson<'GeometryCollection'> {\n  geometries: GeoJson[];\n}\n\nexport type GeoJson =\n  | GeoJsonPoint\n  | GeoJsonLineString\n  | GeoJsonPolygon\n  | GeoJsonMultiPoint\n  | GeoJsonMultiLineString\n  | GeoJsonMultiPolygon\n  | GeoJsonGeometryCollection;\n\nconst geoJsonTypeArray = Object.keys(GeoJsonType);\n\nexport function assertIsGeoJson(value: unknown): asserts value is GeoJson {\n  assertIsBaseGeoJson(value);\n\n  switch (value.type) {\n    case GeoJsonType.Point:\n      assertIsGeoJsonPoint(value);\n      break;\n\n    case GeoJsonType.LineString:\n      assertIsGeoJsonLineString(value);\n      break;\n\n    case GeoJsonType.Polygon:\n      assertIsGeoJsonPolygon(value);\n      break;\n\n    case GeoJsonType.MultiPoint:\n      assertIsGeoJsonMultiPoint(value);\n      break;\n\n    case GeoJsonType.MultiLineString:\n      assertIsGeoJsonMultiLineString(value);\n      break;\n\n    case GeoJsonType.MultiPolygon:\n      assertIsGeoJsonMultiPolygon(value);\n      break;\n\n    case GeoJsonType.GeometryCollection:\n      assertIsGeoJsonGeometryCollection(value);\n      break;\n\n    default:\n      throw new Error(`GeoJSON object ${util.inspect(value)} has an invalid or missing \"type\" property. Expected one of ${geoJsonTypeArray.join(', ')}`);\n  }\n}\n\nfunction validatePosition(tuple: unknown, source: GeoJson): void {\n  if (!Array.isArray(tuple)) {\n    throw new Error(`GeoJSON ${source.type} object ${util.inspect(source)} specifies an invalid position: ${util.inspect(tuple)}. Expected an array of numeric values.`);\n  }\n\n  // Prevent a SQL injection attack, as coordinates are inlined in the query without escaping.\n  for (const coordinate of tuple) {\n    if (!Validator.isNumeric(String(coordinate))) {\n      throw new Error(`GeoJSON ${source.type} object ${util.inspect(source)} specifies an invalid point: ${util.inspect(tuple)}. ${util.inspect(coordinate)} is not a numeric value.`);\n    }\n  }\n}\n\nfunction assertIsBaseGeoJson(value: unknown): asserts value is GeoJson {\n  if (!isPlainObject(value)) {\n    throw new Error(`${util.inspect(value)} is not a valid GeoJSON object: it must be a plain object.`);\n  }\n}\n\nexport function assertIsGeoJsonPoint(value: unknown): asserts value is GeoJsonPoint {\n  assertIsBaseGeoJson(value);\n\n  if (value.type !== 'Point') {\n    throw new Error(`GeoJSON Point object ${util.inspect(value)} has an invalid or missing \"type\" property. Expected \"Point\".`);\n  }\n\n  const coordinates = value.coordinates;\n  // Some Point implementations accepts empty coordinates.\n  if (Array.isArray(coordinates) && coordinates.length === 0) {\n    return;\n  }\n\n  validatePosition(coordinates, value);\n}\n\nexport function assertIsGeoJsonLineString(value: unknown): asserts value is GeoJsonLineString {\n  assertIsBaseGeoJson(value);\n\n  if (value.type !== 'LineString') {\n    throw new Error(`GeoJSON LineString object ${util.inspect(value)} has an invalid or missing \"type\" property. Expected \"LineString\".`);\n  }\n\n  const coordinates = value.coordinates;\n  if (!Array.isArray(coordinates)) {\n    throw new Error(`GeoJSON LineString object ${util.inspect(value)} has an invalid or missing \"coordinates\" property. Expected an array of positions (array of numeric values).`);\n  }\n\n  for (const position of coordinates) {\n    validatePosition(position, value);\n  }\n}\n\nexport function assertIsGeoJsonPolygon(value: unknown): asserts value is GeoJsonPolygon {\n  assertIsBaseGeoJson(value);\n\n  if (value.type !== 'Polygon') {\n    throw new Error(`GeoJSON Polygon object ${util.inspect(value)} has an invalid or missing \"type\" property. Expected \"Polygon\".`);\n  }\n\n  const coordinates = value.coordinates;\n  if (!Array.isArray(coordinates)) {\n    throw new Error(`GeoJSON Polygon object ${util.inspect(value)} has an invalid or missing \"coordinates\" property. Expected an array of linear ring coordinate arrays. Refer to the GeoJSON specification for more information.`);\n  }\n\n  for (const ring of coordinates) {\n    if (!Array.isArray(ring)) {\n      throw new Error(`GeoJSON Polygon object ${util.inspect(value)} has an invalid or missing \"coordinates\" property. Expected an array of linear ring coordinate arrays. Refer to the GeoJSON specification for more information.`);\n    }\n\n    for (const position of ring) {\n      validatePosition(position, value);\n    }\n  }\n}\n\nexport function assertIsGeoJsonMultiPoint(value: unknown): asserts value is GeoJsonMultiPoint {\n  assertIsBaseGeoJson(value);\n\n  if (value.type !== 'MultiPoint') {\n    throw new Error(`GeoJSON MultiPoint object ${util.inspect(value)} has an invalid or missing \"type\" property. Expected \"MultiPoint\".`);\n  }\n\n  const coordinates = value.coordinates;\n  if (!Array.isArray(coordinates)) {\n    throw new Error(`GeoJSON MultiPoint object ${util.inspect(value)} has an invalid or missing \"coordinates\" property. Expected an array of point coordinates.`);\n  }\n\n  for (const position of coordinates) {\n    validatePosition(position, value);\n  }\n}\n\nexport function assertIsGeoJsonMultiLineString(value: unknown): asserts value is GeoJsonMultiLineString {\n  assertIsBaseGeoJson(value);\n\n  if (value.type !== 'MultiLineString') {\n    throw new Error(`GeoJSON MultiLineString object ${util.inspect(value)} has an invalid or missing \"type\" property. Expected \"MultiLineString\".`);\n  }\n\n  const coordinates = value.coordinates;\n  if (!Array.isArray(coordinates)) {\n    throw new Error(`GeoJSON MultiLineString object ${util.inspect(value)} has an invalid or missing \"coordinates\" property. Expected an array of line string coordinates.`);\n  }\n\n  for (const lineString of coordinates) {\n    if (!Array.isArray(lineString)) {\n      throw new Error(`GeoJSON MultiLineString object ${util.inspect(value)} has an invalid or missing \"coordinates\" property. Expected an array of line string coordinates.`);\n    }\n\n    for (const position of lineString) {\n      validatePosition(position, value);\n    }\n  }\n}\n\nexport function assertIsGeoJsonMultiPolygon(value: unknown): asserts value is GeoJsonMultiPolygon {\n  assertIsBaseGeoJson(value);\n\n  if (value.type !== 'MultiPolygon') {\n    throw new Error(`GeoJSON MultiPolygon object ${util.inspect(value)} has an invalid or missing \"type\" property. Expected \"MultiPolygon\".`);\n  }\n\n  const coordinates = value.coordinates;\n  if (!Array.isArray(coordinates)) {\n    throw new Error(`GeoJSON MultiPolygon object ${util.inspect(value)} has an invalid or missing \"coordinates\" property. Expected an array of polygon coordinates.`);\n  }\n\n  for (const polygon of coordinates) {\n    if (!Array.isArray(polygon)) {\n      throw new Error(`GeoJSON MultiPolygon object ${util.inspect(value)} has an invalid or missing \"coordinates\" property. Expected an array of polygon coordinates.`);\n    }\n\n    for (const ring of polygon) {\n      if (!Array.isArray(ring)) {\n        throw new Error(`GeoJSON MultiPolygon object ${util.inspect(value)} has an invalid or missing \"coordinates\" property. Expected an array of polygon coordinates.`);\n      }\n\n      for (const position of ring) {\n        validatePosition(position, value);\n      }\n    }\n  }\n}\n\nexport function assertIsGeoJsonGeometryCollection(value: unknown): asserts value is GeoJsonGeometryCollection {\n  assertIsBaseGeoJson(value);\n\n  if (value.type !== 'GeometryCollection') {\n    throw new Error(`GeoJSON GeometryCollection object ${util.inspect(value)} has an invalid or missing \"type\" property. Expected \"GeometryCollection\".`);\n  }\n\n  const geometries = value.geometries;\n  if (!Array.isArray(geometries)) {\n    throw new Error(`GeoJSON GeometryCollection object ${util.inspect(value)} has an invalid or missing \"geometries\" property. Expected an array of GeoJSON geometry objects.`);\n  }\n\n  for (const geometry of geometries) {\n    assertIsGeoJson(geometry);\n  }\n}\n"],
  "mappings": "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",
  "names": ["GeoJsonType", "util", "Validator"]
}
