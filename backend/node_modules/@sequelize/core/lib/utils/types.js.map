{
  "version": 3,
  "sources": ["../../src/utils/types.ts"],
  "sourcesContent": ["export type DeepPartial<T> = T extends object ? {\n  [P in keyof T]?: DeepPartial<T[P]>;\n} : T;\n\nexport type DeepWriteable<T> = {\n  -readonly [K in keyof T]: T[K] extends Function ? T[K] : DeepWriteable<T[K]>\n};\n\nexport type AnyFunction = (...args: any[]) => any;\n\n/**\n * Returns all shallow properties that accept `undefined` or `null`.\n * Does not include Optional properties, only `undefined` or `null`.\n *\n * @example\n * ```typescript\n * type UndefinedProps = NullishPropertiesOf<{\n *   id: number | undefined,\n *   createdAt: string | undefined,\n *   firstName: string | null, // nullable properties are included\n *   lastName?: string, // optional properties are not included.\n * }>;\n *\n * // is equal to\n *\n * type UndefinedProps = 'id' | 'createdAt' | 'firstName';\n * ```\n */\nexport type NullishPropertiesOf<T> = {\n  [P in keyof T]-?: undefined extends T[P] ? P\n    : null extends T[P] ? P\n      : never\n}[keyof T];\n\n/**\n * Makes all shallow properties of an object `optional` if they accept `undefined` or `null` as a value.\n *\n * @example\n * ```typescript\n * type MyOptionalType = MakeUndefinedOptional<{\n *   id: number | undefined,\n *   firstName: string,\n *   lastName: string | null,\n * }>;\n *\n * // is equal to\n *\n * type MyOptionalType = {\n *   // this property is optional.\n *   id?: number | undefined,\n *   firstName: string,\n *   // this property is optional.\n *   lastName?: string | null,\n * };\n * ```\n */\nexport type MakeNullishOptional<T extends object> = PartialBy<T, NullishPropertiesOf<T>>;\n\n/**\n * Makes the type accept null & undefined\n */\nexport type Nullish<T> = T | null | undefined;\n\nexport type NonNullish<T> = T extends null | undefined ? never : T;\n\nexport type NonUndefined<T> = T extends undefined ? never : T;\n\nexport type NonUndefinedKeys<T, K extends keyof T> = {\n  [P in keyof T]: P extends K ? NonUndefined<T[P]> : T[P];\n};\n\nexport type AllowArray<T> = T | T[];\n\nexport type AllowIterable<T> = T | Iterable<T>;\n\nexport type AllowLowercase<T extends string> = T | Lowercase<T>;\n\nexport type AllowReadonlyArray<T> = T | readonly T[];\n\nexport type ConstructorKeys<T> = ({ [P in keyof T]: T[P] extends new () => any ? P : never })[keyof T];\n\ntype NonConstructorKeys<T> = ({ [P in keyof T]: T[P] extends new () => any ? never : P })[keyof T];\n\nexport type OmitConstructors<T> = Pick<T, NonConstructorKeys<T>>;\n\n/**\n * Type helper for making certain fields of an object optional.\n */\nexport type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\nexport type RequiredBy<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;\n\nexport type StrictRequiredBy<T, K extends keyof T> = NonUndefinedKeys<Omit<T, K> & Required<Pick<T, K>>, K>;\n\nexport type ReadOnlyRecord<K extends PropertyKey, V> = Readonly<Record<K, V>>;\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
