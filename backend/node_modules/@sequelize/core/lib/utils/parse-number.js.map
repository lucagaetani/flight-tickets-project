{
  "version": 3,
  "sources": ["../../src/utils/parse-number.ts"],
  "sourcesContent": ["import type { Class } from 'type-fest';\n\nconst BASE10_NUMBER_SCIENTIFIC_REGEX = /^[-+]?[0-9]*(\\.[0-9]+)?([eE][-+]?[0-9]+)?$/;\n\n/**\n * Parses a string as a number in base 10.\n * Unlike {@link Number}, this method doesn't return 0 for ''\n * Unlike {@link parseInt}, this method returns NaN if it encounters any character that is not part of the number.\n *\n * @param value The string to parse as a floating point number\n * @returns NaN if the input is not a base 10 number, or Infinity\n */\nexport function parseNumber(value: string | bigint): number {\n  if (typeof value === 'bigint') {\n    if (value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER) {\n      throw new TypeError(`Cannot cast BigInt ${value} to Number, because the value would be outside of the Safe Integer range.`);\n    }\n\n    return Number(value);\n  }\n\n  if (!BASE10_NUMBER_SCIENTIFIC_REGEX.test(value) && value !== 'Infinity' && value !== '-Infinity') {\n    return Number.NaN;\n  }\n\n  if (value === '') {\n    return Number.NaN;\n  }\n\n  return Number(value);\n}\n\nexport function parseNumberOrThrow(value: string | bigint, ErrorClass: Class<Error> = SyntaxError): number {\n  const result = parseNumber(value);\n\n  if (Number.isNaN(result)) {\n    throw new ErrorClass(`Cannot parse String ${value} as a Number.`);\n  }\n\n  return result;\n}\n\nconst BASE10_INTEGER_REGEX = /^[-+]?[0-9]+$/;\n\nexport function parseBigInt(value: number | string): bigint {\n  if (typeof value === 'number') {\n    if (Number.isInteger(value) && !Number.isSafeInteger(value)) {\n      throw new TypeError(`Cannot cast Number ${value} to BigInt, because the value is already outside of the Safe Integer range. You need to use a String or BigInt instead of a Number for this value.`);\n    }\n  } else if (!BASE10_INTEGER_REGEX.test(value)) {\n    throw new SyntaxError(`Cannot parse String ${value} as a BigInt.`);\n  }\n\n  return BigInt(value);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,MAAM,iCAAiC;AAUhC,SAAS,YAAY,OAAgC;AAC1D,MAAI,OAAO,UAAU,UAAU;AAC7B,QAAI,QAAQ,OAAO,oBAAoB,QAAQ,OAAO,kBAAkB;AACtE,YAAM,IAAI,UAAU,sBAAsB,gFAAgF;AAAA,IAC5H;AAEA,WAAO,OAAO,KAAK;AAAA,EACrB;AAEA,MAAI,CAAC,+BAA+B,KAAK,KAAK,KAAK,UAAU,cAAc,UAAU,aAAa;AAChG,WAAO,OAAO;AAAA,EAChB;AAEA,MAAI,UAAU,IAAI;AAChB,WAAO,OAAO;AAAA,EAChB;AAEA,SAAO,OAAO,KAAK;AACrB;AAEO,SAAS,mBAAmB,OAAwB,aAA2B,aAAqB;AACzG,QAAM,SAAS,YAAY,KAAK;AAEhC,MAAI,OAAO,MAAM,MAAM,GAAG;AACxB,UAAM,IAAI,WAAW,uBAAuB,oBAAoB;AAAA,EAClE;AAEA,SAAO;AACT;AAEA,MAAM,uBAAuB;AAEtB,SAAS,YAAY,OAAgC;AAC1D,MAAI,OAAO,UAAU,UAAU;AAC7B,QAAI,OAAO,UAAU,KAAK,KAAK,CAAC,OAAO,cAAc,KAAK,GAAG;AAC3D,YAAM,IAAI,UAAU,sBAAsB,yJAAyJ;AAAA,IACrM;AAAA,EACF,WAAW,CAAC,qBAAqB,KAAK,KAAK,GAAG;AAC5C,UAAM,IAAI,YAAY,uBAAuB,oBAAoB;AAAA,EACnE;AAEA,SAAO,OAAO,KAAK;AACrB;",
  "names": []
}
