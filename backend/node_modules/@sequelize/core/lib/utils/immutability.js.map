{
  "version": 3,
  "sources": ["../../src/utils/immutability.ts"],
  "sourcesContent": ["import NodeUtil from 'node:util';\nimport type { InspectOptions } from 'node:util';\n\nexport class SetView<V> {\n  #target: Set<V>;\n\n  constructor(target: Set<V>) {\n    this.#target = target;\n  }\n\n  /**\n   * @param value\n   * @returns a boolean indicating whether an element with the specified value exists in the Set or not.\n   */\n  has(value: V): boolean {\n    return this.#target.has(value);\n  }\n\n  /**\n   * @returns the number of (unique) elements in Set.\n   */\n  get size() {\n    return this.#target.size;\n  }\n\n  [Symbol.iterator](): IterableIterator<V> {\n    return this.#target[Symbol.iterator]();\n  }\n\n  values(): IterableIterator<V> {\n    return this.#target.values();\n  }\n\n  toJSON() {\n    return [...this.#target];\n  }\n\n  [NodeUtil.inspect.custom](depth: number, options: InspectOptions): string {\n    const newOptions = Object.assign({}, options, {\n      depth: options.depth == null ? null : options.depth - 1,\n    });\n\n    return NodeUtil.inspect(this.#target, newOptions).replace(/^Set/, 'SetView');\n  }\n}\n\nexport class MapView<K, V> {\n  #target: Map<K, V>;\n\n  constructor(target: Map<K, V>) {\n    this.#target = target;\n  }\n\n  /**\n   * Returns a specified element from the Map object. If the value that is associated to the provided key is an object, then you will get a reference to that object and any change made to that object will effectively modify it inside the Map.\n   *\n   * @param key\n   * @returns Returns the element associated with the specified key. If no element is associated with the specified key, undefined is returned.\n   */\n  get(key: K): V | undefined {\n    return this.#target.get(key);\n  }\n\n  /**\n   * @param key\n   * @returns boolean indicating whether an element with the specified key exists or not.\n   */\n  has(key: K): boolean {\n    return this.#target.has(key);\n  }\n\n  /**\n   * @returns the number of elements in the Map.\n   */\n  get size(): number {\n    return this.#target.size;\n  }\n\n  [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.#target[Symbol.iterator]();\n  }\n\n  entries(): IterableIterator<[K, V]> {\n    return this.#target.entries();\n  }\n\n  keys(): IterableIterator<K> {\n    return this.#target.keys();\n  }\n\n  values(): IterableIterator<V> {\n    return this.#target.values();\n  }\n\n  toJSON() {\n    return [...this.#target.entries()];\n  }\n\n  [NodeUtil.inspect.custom](depth: number, options: InspectOptions): string {\n    const newOptions = Object.assign({}, options, {\n      depth: options.depth == null ? null : options.depth - 1,\n    });\n\n    return NodeUtil.inspect(this.#target, newOptions).replace(/^Map/, 'MapView');\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAqB;AAGd,MAAM,QAAW;AAAA,EACtB;AAAA,EAEA,YAAY,QAAgB;AAC1B,SAAK,UAAU;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,OAAmB;AACrB,WAAO,KAAK,QAAQ,IAAI,KAAK;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,OAAO;AACT,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA,EAEA,CAAC,OAAO,QAAQ,IAAyB;AACvC,WAAO,KAAK,QAAQ,OAAO,QAAQ,EAAE;AAAA,EACvC;AAAA,EAEA,SAA8B;AAC5B,WAAO,KAAK,QAAQ,OAAO;AAAA,EAC7B;AAAA,EAEA,SAAS;AACP,WAAO,CAAC,GAAG,KAAK,OAAO;AAAA,EACzB;AAAA,EAEA,CAAC,iBAAAA,QAAS,QAAQ,MAAM,EAAE,OAAe,SAAiC;AACxE,UAAM,aAAa,OAAO,OAAO,CAAC,GAAG,SAAS;AAAA,MAC5C,OAAO,QAAQ,SAAS,OAAO,OAAO,QAAQ,QAAQ;AAAA,IACxD,CAAC;AAED,WAAO,iBAAAA,QAAS,QAAQ,KAAK,SAAS,UAAU,EAAE,QAAQ,QAAQ,SAAS;AAAA,EAC7E;AACF;AAEO,MAAM,QAAc;AAAA,EACzB;AAAA,EAEA,YAAY,QAAmB;AAC7B,SAAK,UAAU;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,KAAuB;AACzB,WAAO,KAAK,QAAQ,IAAI,GAAG;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,KAAiB;AACnB,WAAO,KAAK,QAAQ,IAAI,GAAG;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,OAAe;AACjB,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA,EAEA,CAAC,OAAO,QAAQ,IAA8B;AAC5C,WAAO,KAAK,QAAQ,OAAO,QAAQ,EAAE;AAAA,EACvC;AAAA,EAEA,UAAoC;AAClC,WAAO,KAAK,QAAQ,QAAQ;AAAA,EAC9B;AAAA,EAEA,OAA4B;AAC1B,WAAO,KAAK,QAAQ,KAAK;AAAA,EAC3B;AAAA,EAEA,SAA8B;AAC5B,WAAO,KAAK,QAAQ,OAAO;AAAA,EAC7B;AAAA,EAEA,SAAS;AACP,WAAO,CAAC,GAAG,KAAK,QAAQ,QAAQ,CAAC;AAAA,EACnC;AAAA,EAEA,CAAC,iBAAAA,QAAS,QAAQ,MAAM,EAAE,OAAe,SAAiC;AACxE,UAAM,aAAa,OAAO,OAAO,CAAC,GAAG,SAAS;AAAA,MAC5C,OAAO,QAAQ,SAAS,OAAO,OAAO,QAAQ,QAAQ;AAAA,IACxD,CAAC;AAED,WAAO,iBAAAA,QAAS,QAAQ,KAAK,SAAS,UAAU,EAAE,QAAQ,QAAQ,SAAS;AAAA,EAC7E;AACF;",
  "names": ["NodeUtil"]
}
