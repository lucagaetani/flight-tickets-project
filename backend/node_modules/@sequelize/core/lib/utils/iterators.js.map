{
  "version": 3,
  "sources": ["../../src/utils/iterators.ts"],
  "sourcesContent": ["/**\n * Like {@link Array#map}, but works with any iterable.\n *\n * @param iterable\n * @param cb\n * @returns an iterator.\n */\nexport function *map<In, Out>(\n  iterable: Iterable<In>,\n  cb: (item: In, index: number) => Out,\n): Generator<Out, void> {\n  let i = 0;\n\n  for (const item of iterable) {\n    yield cb(item, i++);\n  }\n}\n\nexport function some<In>(\n  iterable: Iterable<In>,\n  cb: (item: In) => boolean,\n): boolean {\n  for (const item of iterable) {\n    if (cb(item)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function every<In>(\n  iterable: Iterable<In>,\n  cb: (item: In) => boolean,\n): boolean {\n  for (const item of iterable) {\n    if (!cb(item)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function find<Val>(iterable: Iterable<Val>, cb: (item: Val) => boolean): Val | undefined {\n  for (const item of iterable) {\n    if (cb(item)) {\n      return item;\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Combines two iterables, they will be iterated in order\n *\n * @param iterables\n */\nexport function *combinedIterator<T>(\n  ...iterables: Array<Iterable<T>>\n): Generator<T, void, undefined> {\n  for (const iterable of iterables) {\n    yield* iterable;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOO,UAAU,IACf,UACA,IACsB;AACtB,MAAI,IAAI;AAER,aAAW,QAAQ,UAAU;AAC3B,UAAM,GAAG,MAAM,GAAG;AAAA,EACpB;AACF;AAEO,SAAS,KACd,UACA,IACS;AACT,aAAW,QAAQ,UAAU;AAC3B,QAAI,GAAG,IAAI,GAAG;AACZ,aAAO;AAAA,IACT;AAAA,EACF;AAEA,SAAO;AACT;AAEO,SAAS,MACd,UACA,IACS;AACT,aAAW,QAAQ,UAAU;AAC3B,QAAI,CAAC,GAAG,IAAI,GAAG;AACb,aAAO;AAAA,IACT;AAAA,EACF;AAEA,SAAO;AACT;AAEO,SAAS,KAAU,UAAyB,IAA6C;AAC9F,aAAW,QAAQ,UAAU;AAC3B,QAAI,GAAG,IAAI,GAAG;AACZ,aAAO;AAAA,IACT;AAAA,EACF;AAEA,SAAO;AACT;AAOO,UAAU,oBACZ,WAC4B;AAC/B,aAAW,YAAY,WAAW;AAChC,WAAO;AAAA,EACT;AACF;",
  "names": []
}
