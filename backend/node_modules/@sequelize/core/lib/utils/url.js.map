{
  "version": 3,
  "sources": ["../../src/utils/url.ts"],
  "sourcesContent": ["import path from 'node:path';\nimport url from 'node:url';\nimport type { ConnectionOptions } from 'pg-connection-string';\nimport pgConnectionString from 'pg-connection-string';\nimport type { Dialect, DialectOptions, Options } from '../sequelize';\n\n/**\n * Parses a connection string into an Options object with connection properties\n *\n * @param connectionString string value in format schema://username:password@host:port/database\n */\nexport function parseConnectionString(connectionString: string): Options {\n  const urlParts = url.parse(connectionString, true);\n  const options: Options = {};\n  if (urlParts.protocol) {\n    let protocol = urlParts.protocol.replace(/:$/, '');\n    if (protocol === 'postgresql') {\n      protocol = 'postgres';\n    }\n\n    options.dialect = protocol as Dialect;\n  }\n\n  if (urlParts.hostname != null) {\n    options.host = urlParts.hostname;\n  }\n\n  if (urlParts.pathname) {\n    // decode the URI component from urlParts.pathname value\n    options.database = decodeURIComponent(urlParts.pathname.replace(/^\\//, ''));\n  }\n\n  if (urlParts.port) {\n    options.port = urlParts.port;\n  }\n\n  if (urlParts.auth) {\n    const authParts = urlParts.auth.split(':');\n    options.username = authParts[0];\n    if (authParts.length > 1) {\n      options.password = authParts.slice(1).join(':');\n    }\n  }\n\n  if (options.dialect === 'sqlite' && urlParts.pathname && !urlParts.pathname.startsWith('/:memory')) {\n    const storagePath = path.join(options.host!, urlParts.pathname);\n    options.storage = path.resolve(options.storage || storagePath);\n  }\n\n  if (urlParts.query) {\n    // Allow host query argument to override the url host.\n    // Enables specifying domain socket hosts which cannot be specified via the typical\n    // host part of a url.\n    if (urlParts.query.host) {\n      options.host = urlParts.query.host as string;\n    }\n\n    options.dialectOptions = urlParts.query;\n    if (urlParts.query.options) {\n      try {\n        const o = JSON.parse(urlParts.query.options as string);\n        options.dialectOptions.options = o;\n      } catch {\n        // Nothing to do, string is not a valid JSON\n        // an thus does not need any further processing\n      }\n    }\n  }\n\n  // For postgres, we can use this helper to load certs directly from the\n  // connection string.\n  if (options.dialect === 'postgres') {\n    const parseResult: Partial<ConnectionOptions> = pgConnectionString.parse(connectionString);\n\n    delete parseResult.database;\n    delete parseResult.password;\n    delete parseResult.user;\n    delete parseResult.host;\n    delete parseResult.port;\n    delete parseResult.options; // we JSON.parse it\n\n    options.dialectOptions ||= Object.create(null) as DialectOptions;\n    Object.assign(options.dialectOptions, parseResult);\n  }\n\n  return options;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAiB;AACjB,sBAAgB;AAEhB,kCAA+B;AAQxB,SAAS,sBAAsB,kBAAmC;AACvE,QAAM,WAAW,gBAAAA,QAAI,MAAM,kBAAkB,IAAI;AACjD,QAAM,UAAmB,CAAC;AAC1B,MAAI,SAAS,UAAU;AACrB,QAAI,WAAW,SAAS,SAAS,QAAQ,MAAM,EAAE;AACjD,QAAI,aAAa,cAAc;AAC7B,iBAAW;AAAA,IACb;AAEA,YAAQ,UAAU;AAAA,EACpB;AAEA,MAAI,SAAS,YAAY,MAAM;AAC7B,YAAQ,OAAO,SAAS;AAAA,EAC1B;AAEA,MAAI,SAAS,UAAU;AAErB,YAAQ,WAAW,mBAAmB,SAAS,SAAS,QAAQ,OAAO,EAAE,CAAC;AAAA,EAC5E;AAEA,MAAI,SAAS,MAAM;AACjB,YAAQ,OAAO,SAAS;AAAA,EAC1B;AAEA,MAAI,SAAS,MAAM;AACjB,UAAM,YAAY,SAAS,KAAK,MAAM,GAAG;AACzC,YAAQ,WAAW,UAAU,CAAC;AAC9B,QAAI,UAAU,SAAS,GAAG;AACxB,cAAQ,WAAW,UAAU,MAAM,CAAC,EAAE,KAAK,GAAG;AAAA,IAChD;AAAA,EACF;AAEA,MAAI,QAAQ,YAAY,YAAY,SAAS,YAAY,CAAC,SAAS,SAAS,WAAW,UAAU,GAAG;AAClG,UAAM,cAAc,iBAAAC,QAAK,KAAK,QAAQ,MAAO,SAAS,QAAQ;AAC9D,YAAQ,UAAU,iBAAAA,QAAK,QAAQ,QAAQ,WAAW,WAAW;AAAA,EAC/D;AAEA,MAAI,SAAS,OAAO;AAIlB,QAAI,SAAS,MAAM,MAAM;AACvB,cAAQ,OAAO,SAAS,MAAM;AAAA,IAChC;AAEA,YAAQ,iBAAiB,SAAS;AAClC,QAAI,SAAS,MAAM,SAAS;AAC1B,UAAI;AACF,cAAM,IAAI,KAAK,MAAM,SAAS,MAAM,OAAiB;AACrD,gBAAQ,eAAe,UAAU;AAAA,MACnC,QAAE;AAAA,MAGF;AAAA,IACF;AAAA,EACF;AAIA,MAAI,QAAQ,YAAY,YAAY;AAClC,UAAM,cAA0C,4BAAAC,QAAmB,MAAM,gBAAgB;AAEzF,WAAO,YAAY;AACnB,WAAO,YAAY;AACnB,WAAO,YAAY;AACnB,WAAO,YAAY;AACnB,WAAO,YAAY;AACnB,WAAO,YAAY;AAEnB,YAAQ,mBAAmB,uBAAO,OAAO,IAAI;AAC7C,WAAO,OAAO,QAAQ,gBAAgB,WAAW;AAAA,EACnD;AAEA,SAAO;AACT;",
  "names": ["url", "path", "pgConnectionString"]
}
