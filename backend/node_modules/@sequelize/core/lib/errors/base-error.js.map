{
  "version": 3,
  "sources": ["../../src/errors/base-error.ts"],
  "sourcesContent": ["import { useErrorCause } from '../utils/deprecations.js';\n\nexport interface CommonErrorProperties {\n  /** The SQL that triggered the error */\n  readonly sql: string;\n}\n\n// TODO [>=2023-04-30]:\n//  Remove me in Sequelize 8, where this is added natively by TypeScript (>= 4.6):\n//  This is a breaking change and must be done in a MAJOR release.\nexport interface ErrorOptions {\n  cause?: unknown;\n}\n\nconst supportsErrorCause = (() => {\n  // eslint-disable-next-line @typescript-eslint/prefer-ts-expect-error -- Supported in TS 4.6, not before\n  // @ts-ignore\n  const err = new Error('Dummy 1', { cause: new Error('Dummy 2') });\n\n  return 'cause' in err;\n})();\n\n/**\n * The Base Error all Sequelize Errors inherit from.\n *\n * Sequelize provides a host of custom error classes, to allow you to do easier debugging.\n * All of these errors are exported by the `@sequelize/core` package.\n * All sequelize errors inherit from the base JS error object.\n */\nexport class BaseError extends Error {\n  // 'cause' is incorrectly typed as Error instead of unknown in TypeScript <= 4.7.\n  // TODO [2023-05-24]: Change this type to unknown once we drop support for TypeScript <= 4.7\n  declare cause?: any;\n\n  /**\n   * @deprecated use {@link cause}.\n   */\n  get parent(): this['cause'] {\n    useErrorCause();\n\n    return this.cause;\n  }\n\n  /**\n   * @deprecated use {@link cause}.\n   */\n  get original(): this['cause'] {\n    useErrorCause();\n\n    return this.cause;\n  }\n\n  constructor(message?: string, options?: ErrorOptions) {\n    // TODO [>=2023-04-30]: remove this ts-ignore (Sequelize 8)\n    // eslint-disable-next-line @typescript-eslint/prefer-ts-expect-error -- Supported in TS 4.6, not before\n    // @ts-ignore\n    super(supportsErrorCause ? message : addCause(message, options?.cause), options);\n    this.name = 'SequelizeBaseError';\n\n    if (!supportsErrorCause && options?.cause) {\n      // TODO [>=2023-04-30]:\n      //  Once all supported node versions have support for Error.cause (added in Node 16.9.0), delete this line:\n      //  This is a breaking change and must be done in a MAJOR release.\n      this.cause = options.cause;\n    }\n  }\n}\n\nfunction addCause(message: string = '', cause?: unknown) {\n  let out = message;\n\n  if (cause) {\n    out += `\\nCaused by: ${getErrorMessage(cause)}`;\n  }\n\n  return out;\n}\n\nfunction getErrorMessage(error: unknown) {\n\n  if (error instanceof Error) {\n    return error.message;\n  }\n\n  return String(error);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA8B;AAc9B,MAAM,sBAAsB,MAAM;AAGhC,QAAM,MAAM,IAAI,MAAM,WAAW,EAAE,OAAO,IAAI,MAAM,SAAS,EAAE,CAAC;AAEhE,SAAO,WAAW;AACpB,GAAG;AASI,MAAM,kBAAkB,MAAM;AAAA;AAAA;AAAA;AAAA,EAQnC,IAAI,SAAwB;AAC1B,2CAAc;AAEd,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,WAA0B;AAC5B,2CAAc;AAEd,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,YAAY,SAAkB,SAAwB;AAIpD,UAAM,qBAAqB,UAAU,SAAS,SAAS,mCAAS,KAAK,GAAG,OAAO;AAC/E,SAAK,OAAO;AAEZ,QAAI,CAAC,uBAAsB,mCAAS,QAAO;AAIzC,WAAK,QAAQ,QAAQ;AAAA,IACvB;AAAA,EACF;AACF;AAEA,SAAS,SAAS,UAAkB,IAAI,OAAiB;AACvD,MAAI,MAAM;AAEV,MAAI,OAAO;AACT,WAAO;AAAA,aAAgB,gBAAgB,KAAK;AAAA,EAC9C;AAEA,SAAO;AACT;AAEA,SAAS,gBAAgB,OAAgB;AAEvC,MAAI,iBAAiB,OAAO;AAC1B,WAAO,MAAM;AAAA,EACf;AAEA,SAAO,OAAO,KAAK;AACrB;",
  "names": []
}
