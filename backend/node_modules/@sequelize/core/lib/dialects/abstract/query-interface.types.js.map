{
  "version": 3,
  "sources": ["../../../src/dialects/abstract/query-interface.types.ts"],
  "sourcesContent": ["import type { Deferrable } from '../../deferrable';\nimport type { QueryRawOptions } from '../../sequelize';\nimport type { CreateSchemaQueryOptions } from './query-generator';\nimport type {\n  AddConstraintQueryOptions,\n  DropTableQueryOptions,\n  ListSchemasQueryOptions,\n  ListTablesQueryOptions,\n  RemoveColumnQueryOptions,\n  RemoveConstraintQueryOptions,\n  ShowConstraintsQueryOptions,\n} from './query-generator.types';\n\nexport interface ColumnDescription {\n  type: string;\n  allowNull: boolean;\n  defaultValue: string;\n  primaryKey: boolean;\n  autoIncrement: boolean;\n  comment: string | null;\n}\n\nexport type ColumnsDescription = Record<string, ColumnDescription>;\n\nexport type ConstraintType = 'CHECK' | 'DEFAULT' | 'FOREIGN KEY' | 'PRIMARY KEY' | 'UNIQUE';\n\nexport interface RawConstraintDescription {\n  constraintCatalog?: string;\n  constraintSchema: string;\n  constraintName: string;\n  constraintType: ConstraintType;\n  tableCatalog?: string;\n  tableSchema: string;\n  tableName: string;\n  columnNames?: string;\n  referencedTableSchema?: string;\n  referencedTableName?: string;\n  referencedColumnNames?: string;\n  deleteAction?: string;\n  updateAction?: string;\n  definition?: string;\n  isDeferrable?: string;\n  initiallyDeferred?: string;\n}\n\nexport interface ConstraintDescription {\n  constraintCatalog?: string;\n  constraintSchema: string;\n  constraintName: string;\n  constraintType: ConstraintType;\n  tableCatalog?: string;\n  tableSchema: string;\n  tableName: string;\n  columnNames?: string[];\n  referencedTableSchema?: string;\n  referencedTableName?: string;\n  referencedColumnNames?: string[];\n  deleteAction?: string;\n  updateAction?: string;\n  definition?: string;\n  deferrable?: Deferrable;\n}\n\n/** Options accepted by {@link AbstractQueryInterface#createSchema} */\nexport interface CreateSchemaOptions extends CreateSchemaQueryOptions, QueryRawOptions { }\n\n/** Options accepted by {@link AbstractQueryInterface#showAllSchemas} */\nexport interface ShowAllSchemasOptions extends ListSchemasQueryOptions, QueryRawOptions { }\n\n/** Options accepted by {@link AbstractQueryInterface#dropAllSchemas} */\nexport interface QiDropAllSchemasOptions extends QueryRawOptions {\n  /**\n   * List of schemas to skip dropping (i.e., list of schemas to keep)\n   */\n  skip?: string[];\n}\n\n/** Options accepted by {@link AbstractQueryInterface#showAllTables} */\nexport interface QiShowAllTablesOptions extends ListTablesQueryOptions, QueryRawOptions { }\n\n/** Options accepted by {@link AbstractQueryInterface#describeTable} */\nexport interface DescribeTableOptions extends QueryRawOptions {\n  /**\n   * @deprecated Use a TableNameWithSchema object to specify the schema or set the schema globally in the options.\n   */\n  schema?: string;\n  /**\n   * @deprecated Use a TableNameWithSchema object to specify the schemaDelimiter.\n   */\n  schemaDelimiter?: string;\n}\n\n/** Options accepted by {@link AbstractQueryInterface#dropTable} */\nexport interface QiDropTableOptions extends DropTableQueryOptions, QueryRawOptions { }\n\n/** Options accepted by {@link AbstractQueryInterface#dropAllTables} */\nexport interface QiDropAllTablesOptions extends QiDropTableOptions {\n  skip?: string[];\n}\n\nexport interface FetchDatabaseVersionOptions extends Omit<QueryRawOptions, 'type' | 'plain'> {}\n\n/** Options accepted by {@link AbstractQueryInterface#removeColumn} */\nexport interface RemoveColumnOptions extends RemoveColumnQueryOptions, QueryRawOptions { }\n\n/** Options accepted by {@link AbstractQueryInterface#addConstraint} */\nexport type AddConstraintOptions = AddConstraintQueryOptions & QueryRawOptions;\n\n/** Options accepted by {@link AbstractQueryInterface#deferConstraints} */\nexport interface DeferConstraintsOptions extends QueryRawOptions { }\n\n/** Options accepted by {@link AbstractQueryInterface#removeConstraint} */\nexport interface RemoveConstraintOptions extends RemoveConstraintQueryOptions, QueryRawOptions { }\n\n/** Options accepted by {@link AbstractQueryInterface#showConstraints} */\nexport interface ShowConstraintsOptions extends ShowConstraintsQueryOptions, QueryRawOptions { }\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
