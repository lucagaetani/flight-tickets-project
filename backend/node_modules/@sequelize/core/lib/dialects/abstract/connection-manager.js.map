{
  "version": 3,
  "sources": ["../../../src/dialects/abstract/connection-manager.ts"],
  "sourcesContent": ["import cloneDeep from 'lodash/cloneDeep';\nimport semver from 'semver';\nimport { TimeoutError } from 'sequelize-pool';\nimport { ConnectionAcquireTimeoutError } from '../../errors';\nimport type { ConnectionOptions, Dialect, Sequelize } from '../../sequelize.js';\nimport { isNodeError } from '../../utils/check.js';\nimport * as deprecations from '../../utils/deprecations';\nimport { logger } from '../../utils/logger';\nimport { ReplicationPool } from './replication-pool.js';\nimport type { AbstractDialect } from './index.js';\n\nconst debug = logger.debugContext('connection-manager');\n\nexport interface GetConnectionOptions {\n  /**\n   * Set which replica to use. Available options are `read` and `write`\n   */\n  type: 'read' | 'write';\n\n  /**\n   * Force master or write replica to get connection from\n   */\n  useMaster?: boolean;\n\n  /**\n   * ID of the connection.\n   */\n  uuid?: string | 'default';\n}\n\nexport interface Connection {\n  /** custom property we attach to different dialect connections */\n  // TODO: replace with Symbols.\n  uuid?: string | undefined;\n}\n\n/**\n * Abstract Connection Manager\n *\n * Connection manager which handles pooling & replication.\n * Uses sequelize-pool for pooling\n *\n * @param connection\n * @private\n */\nexport class AbstractConnectionManager<TConnection extends Connection = Connection> {\n  protected readonly sequelize: Sequelize;\n  protected readonly config: Sequelize['config'];\n  protected readonly dialect: AbstractDialect;\n  protected readonly dialectName: Dialect;\n  readonly pool: ReplicationPool<TConnection>;\n\n  #versionPromise: Promise<void> | null = null;\n  #closed: boolean = false;\n\n  constructor(dialect: AbstractDialect, sequelize: Sequelize) {\n    const config: Sequelize['config'] = cloneDeep(sequelize.config) ?? {};\n\n    this.sequelize = sequelize;\n    this.config = config;\n    this.dialect = dialect;\n    this.dialectName = this.sequelize.options.dialect;\n\n    // ===========================================================\n    // Init Pool\n    // ===========================================================\n\n    this.pool = new ReplicationPool<TConnection>({\n      ...config,\n      connect: async (options: ConnectionOptions): Promise<TConnection> => {\n        return this._connect(options);\n      },\n      disconnect: async (connection: TConnection): Promise<void> => {\n        return this._disconnect(connection);\n      },\n      validate: (connection: TConnection): boolean => {\n        if (config.pool.validate) {\n          return config.pool.validate(connection);\n        }\n\n        return this.validate(connection);\n      },\n      readConfig: config.replication.read,\n      writeConfig: config.replication.write,\n    });\n\n    if (config.replication.read.length > 0) {\n      debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, no replication`);\n    } else {\n      debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, with replication`);\n    }\n  }\n\n  get isClosed() {\n    return this.#closed;\n  }\n\n  /**\n   * Determine if a connection is still valid or not\n   *\n   * @param _connection\n   */\n  validate(_connection: TConnection): boolean {\n    return true;\n  }\n\n  async connect(_config: ConnectionOptions): Promise<TConnection> {\n    throw new Error(`connect not implemented in ${this.constructor.name}`);\n  }\n\n  async disconnect(_connection: TConnection): Promise<void> {\n    throw new Error(`disconnect not implemented in ${this.constructor.name}`);\n  }\n\n  /**\n   * Try to load dialect module from various configured options.\n   * Priority goes like dialectModulePath > dialectModule > require(default)\n   *\n   * @param moduleName Name of dialect module to lookup\n   *\n   * @private\n   */\n  _loadDialectModule(moduleName: string): unknown {\n    try {\n      if (this.sequelize.config.dialectModulePath) {\n        return require(this.sequelize.config.dialectModulePath);\n      }\n\n      if (this.sequelize.config.dialectModule) {\n        return this.sequelize.config.dialectModule;\n      }\n\n      return require(moduleName);\n    } catch (error) {\n      if (isNodeError(error) && error.code === 'MODULE_NOT_FOUND') {\n        if (this.sequelize.config.dialectModulePath) {\n          throw new Error(`Unable to find dialect at ${this.sequelize.config.dialectModulePath}`);\n        }\n\n        throw new Error(`Please install ${moduleName} package manually`);\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Handler which executes on process exit or connection manager shutdown\n   */\n  async _onProcessExit() {\n    if (!this.pool) {\n      return;\n    }\n\n    await this.pool.drain();\n    debug('connection drain due to process exit');\n\n    await this.pool.destroyAllNow();\n  }\n\n  /**\n   * Drain the pool and close it permanently\n   */\n  async close() {\n    this.#closed = true;\n\n    // Mark close of pool\n    this.getConnection = async function getConnection() {\n      throw new Error('ConnectionManager.getConnection was called after the connection manager was closed!');\n    };\n\n    return this._onProcessExit();\n  }\n\n  /**\n   * Get connection from pool. It sets database version if it's not already set.\n   * Call pool.acquire to get a connection.\n   *\n   * @param options\n   */\n  async getConnection(options?: GetConnectionOptions) {\n    await this._initDatabaseVersion();\n\n    try {\n\n      await this.sequelize.hooks.runAsync('beforePoolAcquire', options);\n\n      const result = await this.pool.acquire(options?.type, options?.useMaster);\n\n      await this.sequelize.hooks.runAsync('afterPoolAcquire', result, options);\n\n      debug('connection acquired');\n\n      return result;\n    } catch (error) {\n      if (error instanceof TimeoutError) {\n        throw new ConnectionAcquireTimeoutError(error);\n      }\n\n      throw error;\n    }\n  }\n\n  async _initDatabaseVersion(conn?: TConnection) {\n    if (this.sequelize.options.databaseVersion != null) {\n      return;\n    }\n\n    if (this.#versionPromise) {\n      await this.#versionPromise;\n\n      return;\n    }\n\n    this.#versionPromise = (async () => {\n      try {\n        const connection = conn ?? await this._connect(this.config.replication.write || this.config);\n\n        const version = await this.sequelize.fetchDatabaseVersion({\n          logging: false,\n          // we must use the current connection for this, otherwise it will try to create a\n          // new connection, which will try to initialize the database version again, and loop forever\n          connection,\n        });\n\n        const parsedVersion = semver.coerce(version)?.version || version;\n        this.sequelize.options.databaseVersion = semver.valid(parsedVersion)\n          ? parsedVersion\n          : this.dialect.defaultVersion;\n\n        if (semver.lt(this.sequelize.getDatabaseVersion(), this.dialect.defaultVersion)) {\n          deprecations.unsupportedEngine();\n          debug(`Unsupported database engine version ${this.sequelize.getDatabaseVersion()}`);\n        }\n\n        return await this._disconnect(connection);\n      } finally {\n        this.#versionPromise = null;\n      }\n    })();\n\n    await this.#versionPromise;\n  }\n\n  /**\n   * Release a pooled connection so it can be utilized by other connection requests\n   *\n   * @param connection\n   */\n  releaseConnection(connection: TConnection) {\n    this.pool.release(connection);\n    debug('connection released');\n  }\n\n  /**\n   * Destroys a pooled connection and removes it from the pool.\n   *\n   * @param connection\n   */\n  async destroyConnection(connection: TConnection) {\n    await this.pool.destroy(connection);\n    debug(`connection ${connection.uuid} destroyed`);\n  }\n\n  /**\n   * Call dialect library to get connection\n   *\n   * @param config Connection config\n   */\n  protected async _connect(config: ConnectionOptions): Promise<TConnection> {\n    await this.sequelize.hooks.runAsync('beforeConnect', config);\n    const connection = await this.connect(config);\n    await this.sequelize.hooks.runAsync('afterConnect', connection, config);\n\n    return connection;\n  }\n\n  /**\n   * Call dialect library to disconnect a connection\n   *\n   * @param connection\n   */\n  protected async _disconnect(connection: TConnection) {\n    await this.sequelize.hooks.runAsync('beforeDisconnect', connection);\n    await this.disconnect(connection);\n    await this.sequelize.hooks.runAsync('afterDisconnect', connection);\n  }\n}\n"],
  "mappings": "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",
  "names": ["cloneDeep", "semver"]
}
