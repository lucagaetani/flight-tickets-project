{
  "version": 3,
  "sources": ["../../../src/dialects/abstract/replication-pool.ts"],
  "sourcesContent": ["import { Pool } from 'sequelize-pool';\nimport type { ConnectionOptions, NormalizedPoolOptions } from '../../sequelize.js';\nimport { logger } from '../../utils/logger.js';\n\nconst debug = logger.debugContext('pool');\n\nexport type ConnectionType = 'read' | 'write';\n\ntype ReplicationPoolConfig<Resource> = {\n  readConfig: ConnectionOptions[] | null,\n  writeConfig: ConnectionOptions,\n  pool: Omit<NormalizedPoolOptions, 'validate'>,\n\n  connect(options: ConnectionOptions): Promise<Resource>,\n  disconnect(connection: Resource): Promise<void>,\n  validate(connection: Resource): boolean,\n};\n\nconst owningPools = new WeakMap<object, 'read' | 'write'>();\n\nexport class ReplicationPool<Resource extends object> {\n  /**\n   * Replication read pool. Will only be used if the 'read' replication option has been provided,\n   * otherwise the {@link write} will be used instead.\n   */\n  readonly read: Pool<Resource> | null;\n  readonly write: Pool<Resource>;\n\n  constructor(config: ReplicationPoolConfig<Resource>) {\n    const { connect, disconnect, validate, readConfig, writeConfig } = config;\n\n    if (!readConfig || readConfig.length === 0) {\n      // no replication, the write pool will always be used instead\n      this.read = null;\n    } else {\n      let reads = 0;\n\n      this.read = new Pool({\n        name: 'sequelize:read',\n        create: async () => {\n          // round robin config\n          const nextRead = reads++ % readConfig.length;\n          const connection = await connect(readConfig[nextRead]);\n\n          owningPools.set(connection, 'read');\n\n          return connection;\n        },\n        destroy: disconnect,\n        validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses,\n      });\n    }\n\n    this.write = new Pool({\n      name: 'sequelize:write',\n      create: async () => {\n        const connection = await connect(writeConfig);\n\n        owningPools.set(connection, 'write');\n\n        return connection;\n      },\n      destroy: disconnect,\n      validate,\n      max: config.pool.max,\n      min: config.pool.min,\n      acquireTimeoutMillis: config.pool.acquire,\n      idleTimeoutMillis: config.pool.idle,\n      reapIntervalMillis: config.pool.evict,\n      maxUses: config.pool.maxUses,\n    });\n  }\n\n  async acquire(queryType: ConnectionType = 'write', useMaster = false) {\n    if (queryType !== 'read' && queryType !== 'write') {\n      throw new Error(`Expected queryType to be either read or write. Received ${queryType}`);\n    }\n\n    if (this.read != null && queryType === 'read' && !useMaster) {\n      return this.read.acquire();\n    }\n\n    return this.write.acquire();\n  }\n\n  release(client: Resource): void {\n    const connectionType = owningPools.get(client);\n    if (!connectionType) {\n      throw new Error('Unable to determine to which pool the connection belongs');\n    }\n\n    this.getPool(connectionType).release(client);\n  }\n\n  async destroy(client: Resource): Promise<void> {\n    const connectionType = owningPools.get(client);\n    if (!connectionType) {\n      throw new Error('Unable to determine to which pool the connection belongs');\n    }\n\n    await this.getPool(connectionType).destroy(client);\n    debug('connection destroy');\n  }\n\n  async destroyAllNow() {\n    await Promise.all([\n      this.read?.destroyAllNow(),\n      this.write.destroyAllNow(),\n    ]);\n\n    debug('all connections destroyed');\n  }\n\n  async drain() {\n    await Promise.all([\n      this.write.drain(),\n      this.read?.drain(),\n    ]);\n  }\n\n  getPool(poolType: ConnectionType): Pool<Resource> {\n    if (poolType === 'read' && this.read != null) {\n      return this.read;\n    }\n\n    return this.write;\n  }\n\n  get size(): number {\n    return (this.read?.size ?? 0) + this.write.size;\n  }\n\n  get available(): number {\n    return (this.read?.available ?? 0) + this.write.available;\n  }\n\n  get using(): number {\n    return (this.read?.using ?? 0) + this.write.using;\n  }\n\n  get waiting(): number {\n    return (this.read?.waiting ?? 0) + this.write.waiting;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
