{
  "version": 3,
  "sources": ["../../../src/dialects/abstract/query-interface.js"],
  "sourcesContent": ["'use strict';\n\nimport { map } from '../../utils/iterators';\nimport { cloneDeep, getObjectFromMap } from '../../utils/object';\nimport { assertNoReservedBind, combineBinds } from '../../utils/sql';\nimport { AbstractDataType } from './data-types';\nimport { AbstractQueryInterfaceTypeScript } from './query-interface-typescript';\n\nimport defaults from 'lodash/defaults';\nimport find from 'lodash/find';\nimport identity from 'lodash/identity';\nimport intersection from 'lodash/intersection';\nimport isObject from 'lodash/isObject';\nimport mapValues from 'lodash/mapValues';\nimport uniq from 'lodash/uniq';\n\nconst DataTypes = require('../../data-types');\nconst { Transaction } = require('../../transaction');\nconst { QueryTypes } = require('../../query-types');\n\n/**\n * The interface that Sequelize uses to talk to all databases\n */\nexport class AbstractQueryInterface extends AbstractQueryInterfaceTypeScript {\n  /**\n   * Create a database\n   *\n   * @param {string} database  Database name to create\n   * @param {object} [options] Query options\n   * @param {string} [options.charset] Database default character set, MYSQL only\n   * @param {string} [options.collate] Database default collation\n   * @param {string} [options.encoding] Database default character set, PostgreSQL only\n   * @param {string} [options.ctype] Database character classification, PostgreSQL only\n   * @param {string} [options.template] The name of the template from which to create the new database, PostgreSQL only\n   *\n   * @returns {Promise}\n   */\n  async createDatabase(database, options) {\n    options = options || {};\n    const sql = this.queryGenerator.createDatabaseQuery(database, options);\n\n    return await this.sequelize.queryRaw(sql, options);\n  }\n\n  /**\n   * Drop a database\n   *\n   * @param {string} database  Database name to drop\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async dropDatabase(database, options) {\n    const sql = this.queryGenerator.dropDatabaseQuery(database);\n\n    return await this.sequelize.queryRaw(sql, options);\n  }\n\n  async listDatabases(options) {\n    const sql = this.queryGenerator.listDatabasesQuery();\n\n    return await this.sequelize.queryRaw(sql, { ...options, type: QueryTypes.SELECT });\n  }\n\n  /**\n    * Drop all schemas\n    *\n    * @param {object} [options] Query options\n    *\n    * @returns {Promise}\n    */\n\n  async dropAllSchemas(options) {\n    options = options || {};\n\n    if (!this.sequelize.dialect.supports.schemas) {\n      return this.sequelize.drop(options);\n    }\n\n    const schemas = await this.showAllSchemas(options);\n\n    return Promise.all(schemas.map(schemaName => this.dropSchema(schemaName, options)));\n  }\n\n  /**\n   * Create a table with given set of attributes\n   *\n   * ```js\n   * queryInterface.createTable(\n   *   'nameOfTheNewTable',\n   *   {\n   *     id: {\n   *       type: DataTypes.INTEGER,\n   *       primaryKey: true,\n   *       autoIncrement: true\n   *     },\n   *     createdAt: {\n   *       type: DataTypes.DATE\n   *     },\n   *     updatedAt: {\n   *       type: DataTypes.DATE\n   *     },\n   *     attr1: DataTypes.STRING,\n   *     attr2: DataTypes.INTEGER,\n   *     attr3: {\n   *       type: DataTypes.BOOLEAN,\n   *       defaultValue: false,\n   *       allowNull: false\n   *     },\n   *     //foreign key usage\n   *     attr4: {\n   *       type: DataTypes.INTEGER,\n   *       references: {\n   *         model: 'another_table_name',\n   *         key: 'id'\n   *       },\n   *       onUpdate: 'cascade',\n   *       onDelete: 'cascade'\n   *     }\n   *   },\n   *   {\n   *     engine: 'MYISAM',    // default: 'InnoDB'\n   *     charset: 'latin1',   // default: null\n   *     schema: 'public',    // default: public, PostgreSQL only.\n   *     comment: 'my table', // comment for table\n   *     collate: 'latin1_danish_ci' // collation, MYSQL only\n   *   }\n   * )\n   * ```\n   *\n   * @param {string} tableName  Name of table to create\n   * @param {object} attributes Object representing a list of table attributes to create\n   * @param {object} [options] create table and query options\n   * @param {Model}  [model] model class\n   *\n   * @returns {Promise}\n   */\n  // TODO: remove \"schema\" option from the option bag, it must be passed as part of \"tableName\" instead\n  async createTable(tableName, attributes, options, model) {\n    options = { ...options };\n\n    // TODO: the sqlite implementation of createTableQuery should be improved so it also generates a CREATE UNIQUE INDEX query\n    if (model && this.sequelize.dialect.name !== 'sqlite') {\n      options.uniqueKeys = options.uniqueKeys || model.uniqueKeys;\n    }\n\n    attributes = mapValues(\n      attributes,\n      attribute => this.sequelize.normalizeAttribute(attribute),\n    );\n\n    // Postgres requires special SQL commands for ENUM/ENUM[]\n    await this.ensureEnums(tableName, attributes, options, model);\n\n    const modelTable = model?.table;\n\n    if (\n      !tableName.schema\n      && (options.schema || modelTable?.schema)\n    ) {\n      tableName = this.queryGenerator.extractTableDetails(tableName);\n      tableName.schema = modelTable?.schema || options.schema;\n    }\n\n    attributes = this.queryGenerator.attributesToSQL(attributes, {\n      table: tableName,\n      context: 'createTable',\n      withoutForeignKeyConstraints: options.withoutForeignKeyConstraints,\n      // schema override for multi-tenancy\n      schema: options.schema,\n    });\n\n    const sql = this.queryGenerator.createTableQuery(tableName, attributes, options);\n\n    return await this.sequelize.queryRaw(sql, options);\n  }\n\n  /**\n   * Rename a table\n   *\n   * @param {string} before    Current name of table\n   * @param {string} after     New name from table\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async renameTable(before, after, options) {\n    options = options || {};\n    const sql = this.queryGenerator.renameTableQuery(before, after);\n\n    return await this.sequelize.queryRaw(sql, options);\n  }\n\n  /**\n   * Add a new column to a table\n   *\n   * ```js\n   * queryInterface.addColumn('tableA', 'columnC', DataTypes.STRING, {\n   *    after: 'columnB' // after option is only supported by MySQL\n   * });\n   * ```\n   *\n   * @param {string} table     Table to add column to\n   * @param {string} key       Column name\n   * @param {object} attribute Attribute definition\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async addColumn(table, key, attribute, options = {}) {\n    if (!table || !key || !attribute) {\n      throw new Error('addColumn takes at least 3 arguments (table, attribute name, attribute definition)');\n    }\n\n    attribute = this.sequelize.normalizeAttribute(attribute);\n\n    if (\n      attribute.type instanceof AbstractDataType\n      // we don't give a context if it already has one, because it could come from a Model.\n      && !attribute.type.usageContext\n    ) {\n      attribute.type.attachUsageContext({ tableName: table, columnName: key, sequelize: this.sequelize });\n    }\n\n    const { ifNotExists, ...rawQueryOptions } = options;\n    const addColumnQueryOptions = ifNotExists ? { ifNotExists } : undefined;\n\n    return await this.sequelize.queryRaw(this.queryGenerator.addColumnQuery(table, key, attribute, addColumnQueryOptions), rawQueryOptions);\n  }\n\n  /**\n   * Remove a column from a table\n   *\n   * @param {string} tableName      Table to remove column from\n   * @param {string} attributeName  Column name to remove\n   * @param {object} [options]      Query options\n   */\n\n  normalizeAttribute(dataTypeOrOptions) {\n    let attribute;\n    if (Object.values(DataTypes).includes(dataTypeOrOptions)) {\n      attribute = { type: dataTypeOrOptions, allowNull: true };\n    } else {\n      attribute = dataTypeOrOptions;\n    }\n\n    return this.sequelize.normalizeAttribute(attribute);\n  }\n\n  /**\n   * Split a list of identifiers by \".\" and quote each part\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    return this.queryGenerator.quoteIdentifier(identifier, force);\n  }\n\n  /**\n   * Split a list of identifiers by \".\" and quote each part.\n   *\n   * @param {string} identifiers\n   *\n   * @returns {string}\n   */\n  quoteIdentifiers(identifiers) {\n    return this.queryGenerator.quoteIdentifiers(identifiers);\n  }\n\n  /**\n   * Change a column definition\n   *\n   * @param {string} tableName          Table name to change from\n   * @param {string} attributeName      Column name\n   * @param {object} dataTypeOrOptions  Attribute definition for new column\n   * @param {object} [options]          Query options\n   */\n  async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    options = options || {};\n\n    const query = this.queryGenerator.attributesToSQL({\n      [attributeName]: this.normalizeAttribute(dataTypeOrOptions),\n    }, {\n      context: 'changeColumn',\n      table: tableName,\n    });\n    const sql = this.queryGenerator.changeColumnQuery(tableName, query);\n\n    return this.sequelize.queryRaw(sql, options);\n  }\n\n  /**\n   * Rejects if the table doesn't have the specified column, otherwise returns the column description.\n   *\n   * @param {string} tableName\n   * @param {string} columnName\n   * @param {object} options\n   * @private\n   */\n  async assertTableHasColumn(tableName, columnName, options) {\n    const description = await this.describeTable(tableName, options);\n    if (description[columnName]) {\n      return description;\n    }\n\n    throw new Error(`Table ${tableName} doesn't have the column ${columnName}`);\n  }\n\n  /**\n   * Rename a column\n   *\n   * @param {string} tableName        Table name whose column to rename\n   * @param {string} attrNameBefore   Current column name\n   * @param {string} attrNameAfter    New column name\n   * @param {object} [options]        Query option\n   *\n   * @returns {Promise}\n   */\n  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    const data = (await this.assertTableHasColumn(tableName, attrNameBefore, options))[attrNameBefore];\n\n    const _options = {};\n\n    _options[attrNameAfter] = {\n      attribute: attrNameAfter,\n      type: data.type,\n      allowNull: data.allowNull,\n      defaultValue: data.defaultValue,\n    };\n\n    // fix: a not-null column cannot have null as default value\n    if (data.defaultValue === null && !data.allowNull) {\n      delete _options[attrNameAfter].defaultValue;\n    }\n\n    const sql = this.queryGenerator.renameColumnQuery(\n      tableName,\n      attrNameBefore,\n      this.queryGenerator.attributesToSQL(_options),\n    );\n\n    return await this.sequelize.queryRaw(sql, options);\n  }\n\n  /**\n   * Add an index to a column\n   *\n   * @param {string|object}  tableName Table name to add index on, can be a object with schema\n   * @param {Array}   [attributes]     Use options.fields instead, List of attributes to add index on\n   * @param {object}  options          indexes options\n   * @param {Array}   options.fields   List of attributes to add index on\n   * @param {boolean} [options.concurrently] Pass CONCURRENT so other operations run while the index is created\n   * @param {boolean} [options.unique] Create a unique index\n   * @param {string}  [options.using]  Useful for GIN indexes\n   * @param {string}  [options.operator] Index operator\n   * @param {string}  [options.type]   Type of index, available options are UNIQUE|FULLTEXT|SPATIAL\n   * @param {string}  [options.name]   Name of the index. Default is <table>_<attr1>_<attr2>\n   * @param {object}  [options.where]  Where condition on index, for partial indexes\n   * @param {string}  [rawTablename]   table name, this is just for backward compatibiity\n   *\n   * @returns {Promise}\n   */\n  async addIndex(tableName, attributes, options, rawTablename) {\n    // Support for passing tableName, attributes, options or tableName, options (with a fields param which is the attributes)\n    if (!Array.isArray(attributes)) {\n      rawTablename = options;\n      options = attributes;\n      attributes = options.fields;\n    }\n\n    if (!rawTablename) {\n      // Map for backwards compat\n      rawTablename = tableName;\n    }\n\n    options = cloneDeep(options) ?? {};\n    options.fields = attributes;\n    const sql = this.queryGenerator.addIndexQuery(tableName, options, rawTablename);\n\n    return await this.sequelize.queryRaw(sql, { ...options, supportsSearchPath: false });\n  }\n\n  /**\n   * Show indexes on a table\n   *\n   * @param {TableNameOrModel} tableName\n   * @param {object}    [options] Query options\n   *\n   * @returns {Promise<Array>}\n   * @private\n   */\n  async showIndex(tableName, options) {\n    const sql = this.queryGenerator.showIndexesQuery(tableName, options);\n\n    return await this.sequelize.queryRaw(sql, { ...options, type: QueryTypes.SHOWINDEXES });\n  }\n\n  /**\n   * Remove an already existing index from a table\n   *\n   * @param {string} tableName                    Table name to drop index from\n   * @param {string|string[]} indexNameOrAttributes  Index name or list of attributes that in the index\n   * @param {object} [options]                    Query options\n   * @param {boolean} [options.concurrently]      Pass CONCURRENTLY so other operations run while the index is created\n   *\n   * @returns {Promise}\n   */\n  async removeIndex(tableName, indexNameOrAttributes, options) {\n    options = options || {};\n    const sql = this.queryGenerator.removeIndexQuery(tableName, indexNameOrAttributes, options);\n\n    return await this.sequelize.queryRaw(sql, options);\n  }\n\n  async insert(instance, tableName, values, options) {\n    if (options?.bind) {\n      assertNoReservedBind(options.bind);\n    }\n\n    options = cloneDeep(options) ?? {};\n    const modelDefinition = instance?.constructor.modelDefinition;\n\n    options.hasTrigger = modelDefinition?.options.hasTrigger;\n    const { query, bind } = this.queryGenerator.insertQuery(\n      tableName,\n      values,\n      modelDefinition && getObjectFromMap(modelDefinition.attributes),\n      options,\n    );\n\n    options.type = QueryTypes.INSERT;\n    options.instance = instance;\n\n    // unlike bind, replacements are handled by QueryGenerator, not QueryRaw\n    delete options.replacements;\n    options.bind = combineBinds(options.bind, bind);\n\n    const results = await this.sequelize.queryRaw(query, options);\n    if (instance) {\n      results[0].isNewRecord = false;\n    }\n\n    return results;\n  }\n\n  /**\n   * Upsert\n   *\n   * @param {string} tableName    table to upsert on\n   * @param {object} insertValues values to be inserted, mapped to field name\n   * @param {object} updateValues values to be updated, mapped to field name\n   * @param {object} where        where conditions, which can be used for UPDATE part when INSERT fails\n   * @param {object} options      query options\n   *\n   * @returns {Promise<boolean,?number>} Resolves an array with <created, primaryKey>\n   */\n  // Note: \"where\" is only used by DB2 and MSSQL. This is because these dialects do not propose any \"ON CONFLICT UPDATE\" mechanisms\n  // The UPSERT pattern in SQL server requires providing a WHERE clause\n  // TODO: the user should be able to configure the WHERE clause for upsert instead of the current default which\n  //  is using the primary keys.\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    if (options?.bind) {\n      assertNoReservedBind(options.bind);\n    }\n\n    options = { ...options };\n\n    const model = options.model;\n    const modelDefinition = model.modelDefinition;\n\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    options.upsertKeys = options.conflictFields || [];\n\n    if (options.upsertKeys.length === 0) {\n      const primaryKeys = Array.from(\n        map(modelDefinition.primaryKeysAttributeNames, pkAttrName => modelDefinition.attributes.get(pkAttrName).columnName),\n      );\n\n      const uniqueColumnNames = Object.values(model.getIndexes()).filter(c => c.unique && c.fields.length > 0).map(c => c.fields);\n      // For fields in updateValues, try to find a constraint or unique index\n      // that includes given field. Only first matching upsert key is used.\n      for (const field of options.updateOnDuplicate) {\n        const indexKey = uniqueColumnNames.find(fields => fields.includes(field));\n        if (indexKey) {\n          options.upsertKeys = indexKey;\n          break;\n        }\n      }\n\n      // Always use PK, if no constraint available OR update data contains PK\n      if (\n        options.upsertKeys.length === 0\n        || intersection(options.updateOnDuplicate, primaryKeys).length > 0\n      ) {\n        options.upsertKeys = primaryKeys;\n      }\n\n      options.upsertKeys = uniq(options.upsertKeys);\n    }\n\n    const { bind, query } = this.queryGenerator.insertQuery(\n      tableName,\n      insertValues,\n      getObjectFromMap(modelDefinition.attributes),\n      options,\n    );\n\n    // unlike bind, replacements are handled by QueryGenerator, not QueryRaw\n    delete options.replacement;\n    options.bind = combineBinds(options.bind, bind);\n\n    return await this.sequelize.queryRaw(query, options);\n  }\n\n  /**\n   * Insert multiple records into a table\n   *\n   * @example\n   * queryInterface.bulkInsert('roles', [{\n   *    label: 'user',\n   *    createdAt: new Date(),\n   *    updatedAt: new Date()\n   *  }, {\n   *    label: 'admin',\n   *    createdAt: new Date(),\n   *    updatedAt: new Date()\n   *  }]);\n   *\n   * @param {string} tableName   Table name to insert record to\n   * @param {Array}  records     List of records to insert\n   * @param {object} options     Various options, please see Model.bulkCreate options\n   * @param {object} attributes  Various attributes mapped by field name\n   *\n   * @returns {Promise}\n   */\n  async bulkInsert(tableName, records, options, attributes) {\n    options = { ...options, type: QueryTypes.INSERT };\n\n    const sql = this.queryGenerator.bulkInsertQuery(tableName, records, options, attributes);\n\n    // unlike bind, replacements are handled by QueryGenerator, not QueryRaw\n    delete options.replacements;\n\n    const results = await this.sequelize.queryRaw(sql, options);\n\n    return results[0];\n  }\n\n  async update(instance, tableName, values, where, options) {\n    if (options?.bind) {\n      assertNoReservedBind(options.bind);\n    }\n\n    const modelDefinition = instance?.constructor.modelDefinition;\n\n    options = { ...options, model: instance?.constructor };\n    options.hasTrigger = modelDefinition?.options.hasTrigger;\n\n    const { query, bind } = this.queryGenerator.updateQuery(\n      tableName,\n      values,\n      where,\n      options,\n      modelDefinition && getObjectFromMap(modelDefinition.attributes),\n    );\n\n    options.type = QueryTypes.UPDATE;\n    options.instance = instance;\n\n    delete options.replacements;\n\n    options.bind = combineBinds(options.bind, bind);\n\n    return await this.sequelize.queryRaw(query, options);\n  }\n\n  /**\n   * Update multiple records of a table\n   *\n   * @example\n   * queryInterface.bulkUpdate('roles', {\n   *     label: 'admin',\n   *   }, {\n   *     userType: 3,\n   *   },\n   * );\n   *\n   * @param {string} tableName     Table name to update\n   * @param {object} values        Values to be inserted, mapped to field name\n   * @param {object} where    A hash with conditions OR an ID as integer OR a string with conditions\n   * @param {object} [options]     Various options, please see Model.bulkCreate options\n   * @param {object} [columnDefinitions]  Attributes on return objects if supported by SQL dialect\n   *\n   * @returns {Promise}\n   */\n  async bulkUpdate(tableName, values, where, options, columnDefinitions) {\n    if (options?.bind) {\n      assertNoReservedBind(options.bind);\n    }\n\n    options = cloneDeep(options) ?? {};\n    if (typeof where === 'object') {\n      where = cloneDeep(where) ?? {};\n    }\n\n    const { bind, query } = this.queryGenerator.updateQuery(tableName, values, where, options, columnDefinitions);\n    const table = isObject(tableName) ? tableName : { tableName };\n    const model = options.model ? options.model : find(this.sequelize.modelManager.models, { tableName: table.tableName });\n\n    options.type = QueryTypes.BULKUPDATE;\n    options.model = model;\n    options.bind = combineBinds(options.bind, bind);\n\n    return await this.sequelize.queryRaw(query, options);\n  }\n\n  async delete(instance, tableName, identifier, options) {\n    const cascades = [];\n\n    const sql = this.queryGenerator.deleteQuery(tableName, identifier, {}, instance.constructor);\n\n    options = { ...options };\n\n    // unlike bind, replacements are handled by QueryGenerator, not QueryRaw\n    delete options.replacements;\n\n    // Check for a restrict field\n    if (Boolean(instance.constructor) && Boolean(instance.constructor.associations)) {\n      const keys = Object.keys(instance.constructor.associations);\n      const length = keys.length;\n      let association;\n\n      for (let i = 0; i < length; i++) {\n        association = instance.constructor.associations[keys[i]];\n        if (association.options && association.options.onDelete\n          && association.options.onDelete.toLowerCase() === 'cascade'\n          && association.options.hooks === true) {\n          cascades.push(association.accessors.get);\n        }\n      }\n    }\n\n    for (const cascade of cascades) {\n      let instances = await instance[cascade](options);\n      // Check for hasOne relationship with non-existing associate (\"has zero\")\n      if (!instances) {\n        continue;\n      }\n\n      if (!Array.isArray(instances)) {\n        instances = [instances];\n      }\n\n      for (const _instance of instances) {\n        await _instance.destroy(options);\n      }\n    }\n\n    options.instance = instance;\n\n    return await this.sequelize.queryRaw(sql, options);\n  }\n\n  /**\n   * Delete multiple records from a table\n   *\n   * @param {string}  tableName            table name from where to delete records\n   * @param {object}  where                where conditions to find records to delete\n   * @param {object}  [options]            options\n   * @param {boolean} [options.truncate]   Use truncate table command\n   * @param {boolean} [options.cascade=false]         Only used in conjunction with TRUNCATE. Truncates  all tables that have foreign-key references to the named table, or to any tables added to the group due to CASCADE.\n   * @param {boolean} [options.restartIdentity=false] Only used in conjunction with TRUNCATE. Automatically restart sequences owned by columns of the truncated table.\n   * @param {Model}   [model]              Model\n   *\n   * @returns {Promise}\n   */\n  async bulkDelete(tableName, where, options, model) {\n    options = cloneDeep(options) ?? {};\n    options = defaults(options, { limit: null });\n\n    if (options.truncate === true) {\n      return this.sequelize.queryRaw(\n        this.queryGenerator.truncateTableQuery(tableName, options),\n        options,\n      );\n    }\n\n    if (typeof identifier === 'object') {\n      where = cloneDeep(where) ?? {};\n    }\n\n    const sql = this.queryGenerator.deleteQuery(tableName, where, options, model);\n\n    // unlike bind, replacements are handled by QueryGenerator, not QueryRaw\n    delete options.replacements;\n\n    return await this.sequelize.queryRaw(\n      sql,\n      options,\n    );\n  }\n\n  async select(model, tableName, optionsArg) {\n    const minifyAliases = optionsArg.minifyAliases ?? this.sequelize.options.minifyAliases;\n    const options = { ...optionsArg, type: QueryTypes.SELECT, model, minifyAliases };\n\n    const sql = this.queryGenerator.selectQuery(tableName, options, model);\n\n    // unlike bind, replacements are handled by QueryGenerator, not QueryRaw\n    delete options.replacements;\n\n    return await this.sequelize.queryRaw(sql, options);\n  }\n\n  async increment(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {\n    return this.#arithmeticQuery('+', model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);\n  }\n\n  async decrement(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {\n    return this.#arithmeticQuery('-', model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);\n  }\n\n  async #arithmeticQuery(operator, model, tableName, where, incrementAmountsByAttribute, extraAttributesToBeUpdated, options) {\n    options = cloneDeep(options) ?? {};\n    options.model = model;\n\n    const sql = this.queryGenerator.arithmeticQuery(operator, tableName, where, incrementAmountsByAttribute, extraAttributesToBeUpdated, options);\n\n    options.type = QueryTypes.UPDATE;\n\n    // unlike bind, replacements are handled by QueryGenerator, not QueryRaw\n    delete options.replacements;\n\n    return await this.sequelize.queryRaw(sql, options);\n  }\n\n  async rawSelect(tableName, options, attributeSelector, Model) {\n    options = cloneDeep(options) ?? {};\n    options = defaults(options, {\n      raw: true,\n      plain: true,\n      type: QueryTypes.SELECT,\n    });\n\n    const sql = this.queryGenerator.selectQuery(tableName, options, Model);\n\n    if (attributeSelector === undefined) {\n      throw new Error('Please pass an attribute selector!');\n    }\n\n    // unlike bind, replacements are handled by QueryGenerator, not QueryRaw\n    delete options.replacements;\n\n    const data = await this.sequelize.queryRaw(sql, options);\n    if (!options.plain) {\n      return data;\n    }\n\n    const result = data ? data[attributeSelector] : null;\n\n    if (!options || !options.dataType) {\n      return result;\n    }\n\n    const dataType = options.dataType;\n\n    // TODO: DECIMAL is not safely representable as a float!\n    //  Use the DataType's parse method instead.\n    if ((dataType instanceof DataTypes.DECIMAL || dataType instanceof DataTypes.FLOAT) && result !== null) {\n      return Number.parseFloat(result);\n    }\n\n    // TODO: BIGINT is not safely representable as an int!\n    //  Use the DataType's parse method instead.\n    if ((dataType instanceof DataTypes.INTEGER || dataType instanceof DataTypes.BIGINT) && result !== null) {\n      return Number.parseInt(result, 10);\n    }\n\n    if (dataType instanceof DataTypes.DATE && result !== null && !(result instanceof Date)) {\n      return new Date(result);\n    }\n\n    return result;\n  }\n\n  async createTrigger(\n    tableName,\n    triggerName,\n    timingType,\n    fireOnArray,\n    functionName,\n    functionParams,\n    optionsArray,\n    options,\n  ) {\n    const sql = this.queryGenerator.createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray);\n    options = options || {};\n    if (sql) {\n      return await this.sequelize.queryRaw(sql, options);\n    }\n  }\n\n  async dropTrigger(tableName, triggerName, options) {\n    const sql = this.queryGenerator.dropTrigger(tableName, triggerName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.queryRaw(sql, options);\n    }\n  }\n\n  async renameTrigger(tableName, oldTriggerName, newTriggerName, options) {\n    const sql = this.queryGenerator.renameTrigger(tableName, oldTriggerName, newTriggerName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.queryRaw(sql, options);\n    }\n  }\n\n  /**\n   * Create an SQL function\n   *\n   * @example\n   * queryInterface.createFunction(\n   *   'someFunction',\n   *   [\n   *     {type: 'integer', name: 'param', direction: 'IN'}\n   *   ],\n   *   'integer',\n   *   'plpgsql',\n   *   'RETURN param + 1;',\n   *   [\n   *     'IMMUTABLE',\n   *     'LEAKPROOF'\n   *   ],\n   *   {\n   *    variables:\n   *      [\n   *        {type: 'integer', name: 'myVar', default: 100}\n   *      ],\n   *      force: true\n   *   };\n   * );\n   *\n   * @param {string}  functionName  Name of SQL function to create\n   * @param {Array}   params        List of parameters declared for SQL function\n   * @param {string}  returnType    SQL type of function returned value\n   * @param {string}  language      The name of the language that the function is implemented in\n   * @param {string}  body          Source code of function\n   * @param {Array}   optionsArray  Extra-options for creation\n   * @param {object}  [options]     query options\n   * @param {boolean} options.force If force is true, any existing functions with the same parameters will be replaced. For postgres, this means using `CREATE OR REPLACE FUNCTION` instead of `CREATE FUNCTION`. Default is false\n   * @param {Array<object>}   options.variables List of declared variables. Each variable should be an object with string fields `type` and `name`, and optionally having a `default` field as well.\n   *\n   * @returns {Promise}\n   */\n  async createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    const sql = this.queryGenerator.createFunction(functionName, params, returnType, language, body, optionsArray, options);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.queryRaw(sql, options);\n    }\n  }\n\n  /**\n   * Drop an SQL function\n   *\n   * @example\n   * queryInterface.dropFunction(\n   *   'someFunction',\n   *   [\n   *     {type: 'varchar', name: 'param1', direction: 'IN'},\n   *     {type: 'integer', name: 'param2', direction: 'INOUT'}\n   *   ]\n   * );\n   *\n   * @param {string} functionName Name of SQL function to drop\n   * @param {Array}  params       List of parameters declared for SQL function\n   * @param {object} [options]    query options\n   *\n   * @returns {Promise}\n   */\n  async dropFunction(functionName, params, options) {\n    const sql = this.queryGenerator.dropFunction(functionName, params);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.queryRaw(sql, options);\n    }\n  }\n\n  /**\n   * Rename an SQL function\n   *\n   * @example\n   * queryInterface.renameFunction(\n   *   'fooFunction',\n   *   [\n   *     {type: 'varchar', name: 'param1', direction: 'IN'},\n   *     {type: 'integer', name: 'param2', direction: 'INOUT'}\n   *   ],\n   *   'barFunction'\n   * );\n   *\n   * @param {string} oldFunctionName  Current name of function\n   * @param {Array}  params           List of parameters declared for SQL function\n   * @param {string} newFunctionName  New name of function\n   * @param {object} [options]        query options\n   *\n   * @returns {Promise}\n   */\n  async renameFunction(oldFunctionName, params, newFunctionName, options) {\n    const sql = this.queryGenerator.renameFunction(oldFunctionName, params, newFunctionName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.queryRaw(sql, options);\n    }\n  }\n\n  // Helper methods useful for querying\n\n  /**\n   * @private\n   */\n  ensureEnums() {\n    // noop by default\n  }\n\n  async setIsolationLevel(transaction, value, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to set isolation level for a transaction without transaction object!');\n    }\n\n    if (transaction.parent || !value) {\n      // Not possible to set a separate isolation level for savepoints\n      return;\n    }\n\n    options = { ...options, transaction: transaction.parent || transaction };\n\n    const sql = this.queryGenerator.setIsolationLevelQuery(value, {\n      parent: transaction.parent,\n    });\n\n    if (!sql) {\n      return;\n    }\n\n    return await this.sequelize.queryRaw(sql, options);\n  }\n\n  async startTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to start a transaction without transaction object!');\n    }\n\n    options = { ...options, transaction: transaction.parent || transaction };\n    options.transaction.name = transaction.parent ? transaction.name : undefined;\n    const sql = this.queryGenerator.startTransactionQuery(transaction);\n\n    return await this.sequelize.queryRaw(sql, options);\n  }\n\n  async commitTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to commit a transaction without transaction object!');\n    }\n\n    if (transaction.parent) {\n      // Savepoints cannot be committed\n      return;\n    }\n\n    options = {\n      ...options,\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false,\n      completesTransaction: true,\n    };\n\n    const sql = this.queryGenerator.commitTransactionQuery(transaction);\n    const promise = this.sequelize.queryRaw(sql, options);\n\n    transaction.finished = 'commit';\n\n    return await promise;\n  }\n\n  async rollbackTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to rollback a transaction without transaction object!');\n    }\n\n    options = {\n      ...options,\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false,\n      completesTransaction: true,\n    };\n    options.transaction.name = transaction.parent ? transaction.name : undefined;\n    const sql = this.queryGenerator.rollbackTransactionQuery(transaction);\n    const promise = this.sequelize.queryRaw(sql, options);\n\n    transaction.finished = 'rollback';\n\n    return await promise;\n  }\n}\n"],
  "mappings": "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",
  "names": ["mapValues", "identifier", "intersection", "uniq", "isObject", "find", "defaults"]
}
