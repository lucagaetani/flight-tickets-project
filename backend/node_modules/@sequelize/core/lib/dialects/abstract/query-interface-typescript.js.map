{
  "version": 3,
  "sources": ["../../../src/dialects/abstract/query-interface-typescript.ts"],
  "sourcesContent": ["import assert from 'node:assert';\nimport isEmpty from 'lodash/isEmpty';\nimport { Deferrable } from '../../deferrable';\nimport type { ConstraintChecking } from '../../deferrable';\nimport { BaseError } from '../../errors';\nimport { setTransactionFromCls } from '../../model-internals.js';\nimport { QueryTypes } from '../../query-types';\nimport type { QueryRawOptions, QueryRawOptionsWithType, Sequelize } from '../../sequelize';\nimport { noSchemaDelimiterParameter, noSchemaParameter } from '../../utils/deprecations';\nimport type { Connection } from './connection-manager.js';\nimport type { AbstractQueryGenerator } from './query-generator';\nimport type { TableNameOrModel } from './query-generator-typescript.js';\nimport type { QueryWithBindParams } from './query-generator.types';\nimport { AbstractQueryInterfaceInternal } from './query-interface-internal.js';\nimport type { TableNameWithSchema } from './query-interface.js';\nimport type {\n  AddConstraintOptions,\n  ColumnsDescription,\n  ConstraintDescription,\n  CreateSchemaOptions,\n  DeferConstraintsOptions,\n  DescribeTableOptions,\n  FetchDatabaseVersionOptions,\n  QiDropAllTablesOptions,\n  QiDropTableOptions,\n  QiShowAllTablesOptions,\n  RemoveColumnOptions,\n  RemoveConstraintOptions,\n  ShowAllSchemasOptions,\n  ShowConstraintsOptions,\n} from './query-interface.types';\n\nexport type WithoutForeignKeyChecksCallback<T> = (connection: Connection) => Promise<T>;\n\n// DO NOT MAKE THIS CLASS PUBLIC!\n/**\n * This is a temporary class used to progressively migrate the AbstractQueryInterface class to TypeScript by slowly moving its functions here.\n * Always use {@link AbstractQueryInterface} instead.\n */\nexport class AbstractQueryInterfaceTypeScript {\n  readonly sequelize: Sequelize;\n  readonly queryGenerator: AbstractQueryGenerator;\n  readonly #internalQueryInterface: AbstractQueryInterfaceInternal;\n\n  /**\n   * @param sequelize The sequelize instance.\n   * @param queryGenerator The query generator of the dialect used by the current Sequelize instance.\n   * @param internalQueryInterface The internal query interface to use.\n   *                               Defaults to a new instance of {@link AbstractQueryInterfaceInternal}.\n   *                               Your dialect may replace this with a custom implementation.\n   */\n  constructor(\n    sequelize: Sequelize,\n    queryGenerator: AbstractQueryGenerator,\n    internalQueryInterface?: AbstractQueryInterfaceInternal,\n  ) {\n    this.sequelize = sequelize;\n    this.queryGenerator = queryGenerator;\n    this.#internalQueryInterface = internalQueryInterface ?? new AbstractQueryInterfaceInternal(sequelize, queryGenerator);\n  }\n\n  /**\n   * Returns the database version.\n   *\n   * @param options Query Options\n   */\n  async fetchDatabaseVersion(options?: FetchDatabaseVersionOptions): Promise<string> {\n    const payload = await this.#internalQueryInterface.fetchDatabaseVersionRaw<{ version: string }>(options);\n\n    assert(payload.version != null, 'Expected the version query to produce an object that includes a `version` property.');\n\n    return payload.version;\n  }\n\n  /**\n   * Create a new database schema.\n   *\n   * **Note:** We define schemas as a namespace that can contain tables.\n   * In mysql and mariadb, this command will create what they call a database.\n   *\n   * @param schema Name of the schema\n   * @param options\n   */\n  async createSchema(schema: string, options?: CreateSchemaOptions): Promise<void> {\n    const sql = this.queryGenerator.createSchemaQuery(schema, options);\n    await this.sequelize.queryRaw(sql, options);\n  }\n\n  /**\n   * Drop a single schema\n   *\n   * **Note:** We define schemas as a namespace that can contain tables.\n   * In mysql and mariadb, this command will create what they call a database.\n   *\n   * @param schema Name of the schema\n   * @param options\n   */\n  async dropSchema(schema: string, options?: QueryRawOptions): Promise<void> {\n    const dropSchemaQuery: string | QueryWithBindParams = this.queryGenerator.dropSchemaQuery(schema);\n\n    let sql: string;\n    let queryRawOptions: undefined | QueryRawOptions;\n    if (typeof dropSchemaQuery === 'string') {\n      sql = dropSchemaQuery;\n      queryRawOptions = options;\n    } else {\n      sql = dropSchemaQuery.query;\n      queryRawOptions = { ...options, bind: dropSchemaQuery.bind };\n    }\n\n    await this.sequelize.queryRaw(sql, queryRawOptions);\n  }\n\n  /**\n   * Show all defined schemas\n   *\n   * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),\n   * not a database table. In mysql and mariadb, this will show all databases.\n   *\n   * @param options\n   *\n   * @returns list of schemas\n   */\n  async showAllSchemas(options?: ShowAllSchemasOptions): Promise<string[]> {\n    const showSchemasSql = this.queryGenerator.listSchemasQuery(options);\n    const schemaNames = await this.sequelize.queryRaw<{ schema: string }>(showSchemasSql, {\n      ...options,\n      raw: true,\n      type: QueryTypes.SELECT,\n    });\n\n    return schemaNames.map(schemaName => schemaName.schema);\n  }\n\n  /**\n   * Drop a table from database\n   *\n   * @param tableName Table name to drop\n   * @param options   Query options\n   */\n  async dropTable(tableName: TableNameOrModel, options?: QiDropTableOptions): Promise<void> {\n    const sql = this.queryGenerator.dropTableQuery(tableName, options);\n\n    await this.sequelize.queryRaw(sql, options);\n  }\n\n  /**\n   * Drop all tables\n   *\n   * @param options\n   */\n  async dropAllTables(options?: QiDropAllTablesOptions): Promise<void> {\n    const skip = options?.skip || [];\n    const allTables = await this.showAllTables(options);\n    const tableNames = allTables.filter(tableName => !skip.includes(tableName.tableName));\n\n    const dropOptions = { ...options };\n    // enable \"cascade\" by default if supported by this dialect\n    if (this.sequelize.dialect.supports.dropTable.cascade && dropOptions.cascade === undefined) {\n      dropOptions.cascade = true;\n    }\n\n    // Remove all the foreign keys first in a loop to avoid deadlocks and timeouts\n    for (const tableName of tableNames) {\n      // eslint-disable-next-line no-await-in-loop\n      const foreignKeys = await this.showConstraints(tableName, { ...options, constraintType: 'FOREIGN KEY' });\n      // eslint-disable-next-line no-await-in-loop\n      await Promise.all(foreignKeys.map(async fk => this.removeConstraint(tableName, fk.constraintName, options)));\n    }\n\n    // Drop all the tables loop to avoid deadlocks and timeouts\n    for (const tableName of tableNames) {\n      // eslint-disable-next-line no-await-in-loop\n      await this.dropTable(tableName, dropOptions);\n    }\n  }\n\n  /**\n   * Show all tables.\n   *\n   * @param options\n   */\n  async showAllTables(options?: QiShowAllTablesOptions): Promise<TableNameWithSchema[]> {\n    const sql = this.queryGenerator.listTablesQuery(options);\n\n    return this.sequelize.queryRaw<TableNameWithSchema>(sql, { ...options, raw: true, type: QueryTypes.SELECT });\n  }\n\n  /**\n   * Returns a promise that will resolve to true if the table or model exists in the database, false otherwise.\n   *\n   * @param tableName - The name of the table or model\n   * @param options - Query options\n   */\n  async tableExists(tableName: TableNameOrModel, options?: QueryRawOptions): Promise<boolean> {\n    const sql = this.queryGenerator.tableExistsQuery(tableName);\n    const out = await this.sequelize.query(sql, { ...options, type: QueryTypes.SELECT });\n\n    return out.length === 1;\n  }\n\n  /**\n   * Describe a table structure\n   *\n   * This method returns an array of hashes containing information about all attributes in the table.\n   *\n   * ```js\n   * {\n   *    name: {\n   *      type:         'VARCHAR(255)', // this will be 'CHARACTER VARYING' for pg!\n   *      allowNull:    true,\n   *      defaultValue: null\n   *    },\n   *    isBetaMember: {\n   *      type:         'TINYINT(1)', // this will be 'BOOLEAN' for pg!\n   *      allowNull:    false,\n   *      defaultValue: false\n   *    }\n   * }\n   * ```\n   *\n   * @param tableName\n   * @param options Query options\n   */\n  async describeTable(tableName: TableNameOrModel, options?: DescribeTableOptions): Promise<ColumnsDescription> {\n    const table = this.queryGenerator.extractTableDetails(tableName);\n\n    if (typeof options === 'string') {\n      noSchemaParameter();\n      table.schema = options;\n    }\n\n    if (typeof options === 'object' && options !== null) {\n      if (options.schema) {\n        noSchemaParameter();\n        table.schema = options.schema;\n      }\n\n      if (options.schemaDelimiter) {\n        noSchemaDelimiterParameter();\n        table.delimiter = options.schemaDelimiter;\n      }\n    }\n\n    const sql = this.queryGenerator.describeTableQuery(table);\n    const queryOptions: QueryRawOptionsWithType<QueryTypes.DESCRIBE> = { ...options, type: QueryTypes.DESCRIBE };\n\n    try {\n      const data = await this.sequelize.queryRaw(sql, queryOptions);\n      /*\n       * If no data is returned from the query, then the table name may be wrong.\n       * Query generators that use information_schema for retrieving table info will just return an empty result set,\n       * it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\n       */\n      if (isEmpty(data)) {\n        throw new Error(`No description found for table ${table.tableName}${table.schema ? ` in schema ${table.schema}` : ''}. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      return data;\n    } catch (error: unknown) {\n      if (error instanceof BaseError && error.cause?.code === 'ER_NO_SUCH_TABLE') {\n        throw new Error(`No description found for table ${table.tableName}${table.schema ? ` in schema ${table.schema}` : ''}. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Removes a column from a table\n   *\n   * @param tableName\n   * @param columnName\n   * @param options\n   */\n  async removeColumn(\n    tableName: TableNameOrModel,\n    columnName: string,\n    options?: RemoveColumnOptions,\n  ): Promise<void> {\n    const queryOptions = { ...options, raw: true };\n    const sql = this.queryGenerator.removeColumnQuery(tableName, columnName, queryOptions);\n\n    await this.sequelize.queryRaw(sql, queryOptions);\n  }\n\n  /**\n   * Add a constraint to a table\n   *\n   * Available constraints:\n   * - UNIQUE\n   * - DEFAULT (MSSQL only)\n   * - CHECK (Not supported by MySQL)\n   * - FOREIGN KEY\n   * - PRIMARY KEY\n   *\n   * @example UNIQUE\n   * ```ts\n   * queryInterface.addConstraint('Users', {\n   *   fields: ['email'],\n   *   type: 'UNIQUE',\n   *   name: 'custom_unique_constraint_name'\n   * });\n   * ```\n   *\n   * @example CHECK\n   * ```ts\n   * queryInterface.addConstraint('Users', {\n   *   fields: ['roles'],\n   *   type: 'CHECK',\n   *   where: {\n   *      roles: ['user', 'admin', 'moderator', 'guest']\n   *   }\n   * });\n   * ```\n   *\n   * @example Default - MSSQL only\n   * ```ts\n   * queryInterface.addConstraint('Users', {\n   *    fields: ['roles'],\n   *    type: 'DEFAULT',\n   *    defaultValue: 'guest'\n   * });\n   * ```\n   *\n   * @example Primary Key\n   * ```ts\n   * queryInterface.addConstraint('Users', {\n   *    fields: ['username'],\n   *    type: 'PRIMARY KEY',\n   *    name: 'custom_primary_constraint_name'\n   * });\n   * ```\n   *\n   * @example Composite Primary Key\n   * ```ts\n   * queryInterface.addConstraint('Users', {\n   *    fields: ['first_name', 'last_name'],\n   *    type: 'PRIMARY KEY',\n   *    name: 'custom_primary_constraint_name'\n   * });\n   * ```\n   *\n   * @example Foreign Key\n   * ```ts\n   * queryInterface.addConstraint('Posts', {\n   *   fields: ['username'],\n   *   type: 'FOREIGN KEY',\n   *   name: 'custom_fkey_constraint_name',\n   *   references: { //Required field\n   *     table: 'target_table_name',\n   *     field: 'target_column_name'\n   *   },\n   *   onDelete: 'cascade',\n   *   onUpdate: 'cascade'\n   * });\n   * ```\n   *\n   * @example Composite Foreign Key\n   * ```ts\n   * queryInterface.addConstraint('TableName', {\n   *   fields: ['source_column_name', 'other_source_column_name'],\n   *   type: 'FOREIGN KEY',\n   *   name: 'custom_fkey_constraint_name',\n   *   references: { //Required field\n   *     table: 'target_table_name',\n   *     fields: ['target_column_name', 'other_target_column_name']\n   *   },\n   *   onDelete: 'cascade',\n   *   onUpdate: 'cascade'\n   * });\n   * ```\n   *\n   * @param tableName - Table name where you want to add a constraint\n   * @param options - An object to define the constraint name, type etc\n   */\n  async addConstraint(tableName: TableNameOrModel, options: AddConstraintOptions): Promise<void> {\n    if (!options.fields) {\n      throw new Error('Fields must be specified through options.fields');\n    }\n\n    if (!options.type) {\n      throw new Error('Constraint type must be specified through options.type');\n    }\n\n    const sql = this.queryGenerator.addConstraintQuery(tableName, options);\n\n    await this.sequelize.queryRaw(sql, { ...options, raw: true, type: QueryTypes.RAW });\n  }\n\n  async deferConstraints(constraintChecking: ConstraintChecking, options?: DeferConstraintsOptions): Promise<void> {\n    setTransactionFromCls(options ?? {}, this.sequelize);\n    if (!options?.transaction) {\n      throw new Error('Missing transaction in deferConstraints option.');\n    }\n\n    const sql = this.queryGenerator.setConstraintCheckingQuery(constraintChecking);\n\n    await this.sequelize.queryRaw(sql, { ...options, raw: true, type: QueryTypes.RAW });\n  }\n\n  /**\n   * Remove a constraint from a table\n   *\n   * @param tableName -Table name to drop constraint from\n   * @param constraintName -Constraint name\n   * @param options -Query options\n   */\n  async removeConstraint(\n    tableName: TableNameOrModel,\n    constraintName: string,\n    options?: RemoveConstraintOptions,\n  ): Promise<void> {\n    const sql = this.queryGenerator.removeConstraintQuery(tableName, constraintName, options);\n\n    await this.sequelize.queryRaw(sql, { ...options, raw: true, type: QueryTypes.RAW });\n  }\n\n  async showConstraints(tableName: TableNameOrModel, options?: ShowConstraintsOptions): Promise<ConstraintDescription[]> {\n    const sql = this.queryGenerator.showConstraintsQuery(tableName, options);\n    const rawConstraints = await this.sequelize.queryRaw(sql, { ...options, raw: true, type: QueryTypes.SHOWCONSTRAINTS });\n    const constraintMap = new Map<string, ConstraintDescription>();\n    for (const {\n      columnNames,\n      definition,\n      deleteAction,\n      initiallyDeferred,\n      isDeferrable,\n      referencedColumnNames,\n      referencedTableName,\n      referencedTableSchema,\n      updateAction,\n      ...rawConstraint\n    } of rawConstraints) {\n      const constraint = constraintMap.get(rawConstraint.constraintName)!;\n      if (constraint) {\n        if (columnNames) {\n          constraint.columnNames = constraint.columnNames\n          ? [...new Set([...constraint.columnNames, columnNames])]\n          : [columnNames];\n        }\n\n        if (referencedColumnNames) {\n          constraint.referencedColumnNames = constraint.referencedColumnNames\n          ? [...new Set([...constraint.referencedColumnNames, referencedColumnNames])]\n          : [referencedColumnNames];\n        }\n      } else {\n        const constraintData: ConstraintDescription = { ...rawConstraint };\n        if (columnNames) {\n          constraintData.columnNames = [columnNames];\n        }\n\n        if (referencedTableSchema) {\n          constraintData.referencedTableSchema = referencedTableSchema;\n        }\n\n        if (referencedTableName) {\n          constraintData.referencedTableName = referencedTableName;\n        }\n\n        if (referencedColumnNames) {\n          constraintData.referencedColumnNames = [referencedColumnNames];\n        }\n\n        if (deleteAction) {\n          constraintData.deleteAction = deleteAction.replaceAll('_', ' ');\n        }\n\n        if (updateAction) {\n          constraintData.updateAction = updateAction.replaceAll('_', ' ');\n        }\n\n        if (definition) {\n          constraintData.definition = definition;\n        }\n\n        if (this.sequelize.dialect.supports.constraints.deferrable) {\n          constraintData.deferrable = isDeferrable ? (initiallyDeferred === 'YES' ? Deferrable.INITIALLY_DEFERRED : Deferrable.INITIALLY_IMMEDIATE) : Deferrable.NOT;\n        }\n\n        constraintMap.set(rawConstraint.constraintName, constraintData);\n      }\n    }\n\n    return [...constraintMap.values()];\n  }\n\n  /**\n   * Returns all foreign key constraints of requested tables\n   *\n   * @deprecated Use {@link showConstraints} instead.\n   * @param _tableNames\n   * @param _options\n   */\n  getForeignKeysForTables(_tableNames: TableNameOrModel[], _options?: QueryRawOptions): Error {\n    throw new Error(`getForeignKeysForTables has been deprecated. Use showConstraints instead.`);\n\n  }\n\n  /**\n   * Get foreign key references details for the table\n   *\n   * @deprecated Use {@link showConstraints} instead.\n   * @param _tableName\n   * @param _options\n   */\n  getForeignKeyReferencesForTable(_tableName: TableNameOrModel, _options?: QueryRawOptions): Error {\n    throw new Error(`getForeignKeyReferencesForTable has been deprecated. Use showConstraints instead.`);\n  }\n\n  /**\n   * Disables foreign key checks for the duration of the callback.\n   * The foreign key checks are only disabled for the current connection.\n   * To specify the connection, you can either use the \"connection\" or the \"transaction\" option.\n   * If you do not specify a connection, this method will reserve a connection for the duration of the callback,\n   * and release it afterwards. You will receive the connection or transaction as the first argument of the callback.\n   * You must use this connection to execute queries\n   *\n   * @example\n   * ```ts\n   * await this.queryInterface.withoutForeignKeyChecks(options, async connection => {\n   *   const truncateOptions = { ...options, connection };\n   *\n   *   for (const model of models) {\n   *     await model.truncate(truncateOptions);\n   *   }\n   * });\n   * ```\n   *\n   * @param cb\n   */\n  async withoutForeignKeyChecks<T>(cb: WithoutForeignKeyChecksCallback<T>): Promise<T>;\n  async withoutForeignKeyChecks<T>(options: QueryRawOptions, cb: WithoutForeignKeyChecksCallback<T>): Promise<T>;\n  async withoutForeignKeyChecks<T>(\n    optionsOrCallback: QueryRawOptions | WithoutForeignKeyChecksCallback<T>,\n    maybeCallback?: WithoutForeignKeyChecksCallback<T>,\n  ): Promise<T> {\n    let options: QueryRawOptions;\n    let callback: WithoutForeignKeyChecksCallback<T>;\n\n    if (typeof optionsOrCallback === 'function') {\n      options = {};\n      callback = optionsOrCallback;\n    } else {\n      options = { ...optionsOrCallback };\n      callback = maybeCallback!;\n    }\n\n    setTransactionFromCls(options, this.sequelize);\n\n    if (options.connection) {\n      return this.#withoutForeignKeyChecks(options, callback);\n    }\n\n    return this.sequelize.withConnection(async connection => {\n      return this.#withoutForeignKeyChecks({ ...options, connection }, callback);\n    });\n  }\n\n  async #withoutForeignKeyChecks<T>(options: QueryRawOptions, cb: WithoutForeignKeyChecksCallback<T>): Promise<T> {\n    try {\n      await this.unsafeToggleForeignKeyChecks(false, options);\n\n      return await cb(options.connection!);\n    } finally {\n      await this.unsafeToggleForeignKeyChecks(true, options);\n    }\n  }\n\n  /**\n   * Toggles foreign key checks.\n   * Don't forget to turn them back on, use {@link withoutForeignKeyChecks} to do this automatically.\n   *\n   * @param enable\n   * @param options\n   */\n  async unsafeToggleForeignKeyChecks(\n    enable: boolean,\n    options?: QueryRawOptions,\n  ): Promise<void> {\n    await this.sequelize.queryRaw(this.queryGenerator.getToggleForeignKeyChecksQuery(enable), options);\n  }\n}\n"],
  "mappings": "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",
  "names": ["assert", "isEmpty"]
}
