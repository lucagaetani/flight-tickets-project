"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var query_generator_typescript_exports = {};
__export(query_generator_typescript_exports, {
  PostgresQueryGeneratorTypeScript: () => PostgresQueryGeneratorTypeScript
});
module.exports = __toCommonJS(query_generator_typescript_exports);
var import_join_sql_fragments = require("../../utils/join-sql-fragments");
var import_string = require("../../utils/string");
var import_query_generator = require("../abstract/query-generator");
class PostgresQueryGeneratorTypeScript extends import_query_generator.AbstractQueryGenerator {
  _getTechnicalSchemaNames() {
    return ["information_schema", "tiger", "tiger_data", "topology"];
  }
  listSchemasQuery(options) {
    const schemasToSkip = ["public", ...this._getTechnicalSchemaNames()];
    if (options && Array.isArray(options == null ? void 0 : options.skip)) {
      schemasToSkip.push(...options.skip);
    }
    return (0, import_join_sql_fragments.joinSQLFragments)([
      `SELECT schema_name AS "schema" FROM information_schema.schemata`,
      `WHERE schema_name !~ E'^pg_' AND schema_name NOT IN (${schemasToSkip.map((schema) => this.escape(schema)).join(", ")})`
    ]);
  }
  describeTableQuery(tableName) {
    const table = this.extractTableDetails(tableName);
    return (0, import_join_sql_fragments.joinSQLFragments)([
      "SELECT",
      'pk.constraint_type as "Constraint",',
      'c.column_name as "Field",',
      'c.column_default as "Default",',
      'c.is_nullable as "Null",',
      `(CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type",`,
      '(SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special",',
      '(SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment"',
      "FROM information_schema.columns c",
      "LEFT JOIN (SELECT tc.table_schema, tc.table_name,",
      "cu.column_name, tc.constraint_type",
      "FROM information_schema.TABLE_CONSTRAINTS tc",
      "JOIN information_schema.KEY_COLUMN_USAGE  cu",
      "ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name",
      "and tc.constraint_name=cu.constraint_name",
      `and tc.constraint_type='PRIMARY KEY') pk`,
      "ON pk.table_schema=c.table_schema",
      "AND pk.table_name=c.table_name",
      "AND pk.column_name=c.column_name",
      `WHERE c.table_name = ${this.escape(table.tableName)}`,
      `AND c.table_schema = ${this.escape(table.schema)}`
    ]);
  }
  listTablesQuery(options) {
    return (0, import_join_sql_fragments.joinSQLFragments)([
      'SELECT table_name AS "tableName", table_schema AS "schema"',
      `FROM information_schema.tables WHERE table_type = 'BASE TABLE' AND table_name != 'spatial_ref_sys'`,
      (options == null ? void 0 : options.schema) ? `AND table_schema = ${this.escape(options.schema)}` : `AND table_schema !~ E'^pg_' AND table_schema NOT IN (${this._getTechnicalSchemaNames().map((schema) => this.escape(schema)).join(", ")})`,
      "ORDER BY table_schema, table_name"
    ]);
  }
  showConstraintsQuery(tableName, options) {
    const table = this.extractTableDetails(tableName);
    return (0, import_join_sql_fragments.joinSQLFragments)([
      'SELECT c.constraint_catalog AS "constraintCatalog",',
      'c.constraint_schema AS "constraintSchema",',
      'c.constraint_name AS "constraintName",',
      'c.constraint_type AS "constraintType",',
      'c.table_catalog AS "tableCatalog",',
      'c.table_schema AS "tableSchema",',
      'c.table_name AS "tableName",',
      'kcu.column_name AS "columnNames",',
      'ccu.table_schema AS "referencedTableSchema",',
      'ccu.table_name AS "referencedTableName",',
      'ccu.column_name AS "referencedColumnNames",',
      'r.delete_rule AS "deleteAction",',
      'r.update_rule AS "updateAction",',
      'ch.check_clause AS "definition",',
      'c.is_deferrable AS "isDeferrable",',
      'c.initially_deferred AS "initiallyDeferred"',
      "FROM INFORMATION_SCHEMA.table_constraints c",
      "LEFT JOIN INFORMATION_SCHEMA.referential_constraints r ON c.constraint_catalog = r.constraint_catalog AND c.constraint_schema = r.constraint_schema AND c.constraint_name = r.constraint_name",
      "LEFT JOIN INFORMATION_SCHEMA.key_column_usage kcu ON c.constraint_catalog = kcu.constraint_catalog AND c.constraint_schema = kcu.constraint_schema AND c.constraint_name = kcu.constraint_name",
      "LEFT JOIN information_schema.constraint_column_usage AS ccu ON r.constraint_catalog = ccu.constraint_catalog AND r.constraint_schema = ccu.constraint_schema AND r.constraint_name = ccu.constraint_name",
      "LEFT JOIN INFORMATION_SCHEMA.check_constraints ch ON c.constraint_catalog = ch.constraint_catalog AND c.constraint_schema = ch.constraint_schema AND c.constraint_name = ch.constraint_name",
      `WHERE c.table_name = ${this.escape(table.tableName)}`,
      `AND c.table_schema = ${this.escape(table.schema)}`,
      (options == null ? void 0 : options.columnName) ? `AND kcu.column_name = ${this.escape(options.columnName)}` : "",
      (options == null ? void 0 : options.constraintName) ? `AND c.constraint_name = ${this.escape(options.constraintName)}` : "",
      (options == null ? void 0 : options.constraintType) ? `AND c.constraint_type = ${this.escape(options.constraintType)}` : "",
      "ORDER BY c.constraint_name, kcu.ordinal_position"
    ]);
  }
  showIndexesQuery(tableName) {
    const table = this.extractTableDetails(tableName);
    return (0, import_join_sql_fragments.joinSQLFragments)([
      "SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey[:ix.indnkeyatts-1] AS index_fields,",
      "ix.indkey[ix.indnkeyatts:] AS include_fields, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names,",
      "pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a , pg_namespace s",
      "WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND",
      `t.relkind = 'r' and t.relname = ${this.escape(table.tableName)}`,
      `AND s.oid = t.relnamespace AND s.nspname = ${this.escape(table.schema)}`,
      "GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey, ix.indnkeyatts ORDER BY i.relname;"
    ]);
  }
  removeIndexQuery(tableName, indexNameOrAttributes, options) {
    if ((options == null ? void 0 : options.cascade) && (options == null ? void 0 : options.concurrently)) {
      throw new Error(`Cannot specify both concurrently and cascade options in removeIndexQuery for ${this.dialect.name} dialect`);
    }
    let indexName;
    const table = this.extractTableDetails(tableName);
    if (Array.isArray(indexNameOrAttributes)) {
      indexName = (0, import_string.generateIndexName)(table, { fields: indexNameOrAttributes });
    } else {
      indexName = indexNameOrAttributes;
    }
    return (0, import_join_sql_fragments.joinSQLFragments)([
      "DROP INDEX",
      (options == null ? void 0 : options.concurrently) ? "CONCURRENTLY" : "",
      (options == null ? void 0 : options.ifExists) ? "IF EXISTS" : "",
      `${this.quoteIdentifier(table.schema)}.${this.quoteIdentifier(indexName)}`,
      (options == null ? void 0 : options.cascade) ? "CASCADE" : ""
    ]);
  }
  jsonPathExtractionQuery(sqlExpression, path, unquote) {
    const operator = path.length === 1 ? unquote ? "->>" : "->" : unquote ? "#>>" : "#>";
    const pathSql = path.length === 1 ? this.escape(path[0]) : this.escape(path.map((value) => String(value)));
    return sqlExpression + operator + pathSql;
  }
  formatUnquoteJson(arg, options) {
    return `${this.escape(arg, options)}#>>ARRAY[]::TEXT[]`;
  }
  versionQuery() {
    return "SHOW SERVER_VERSION";
  }
}
//# sourceMappingURL=query-generator-typescript.js.map
