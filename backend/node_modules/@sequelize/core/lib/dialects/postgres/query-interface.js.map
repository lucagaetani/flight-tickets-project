{
  "version": 3,
  "sources": ["../../../src/dialects/postgres/query-interface.js"],
  "sourcesContent": ["'use strict';\n\nimport { Deferrable } from '../../deferrable';\nimport { camelizeObjectKeys } from '../../utils/object';\nimport { PostgresQueryInterfaceTypescript } from './query-interface-typescript.js';\n\nconst DataTypes = require('../../data-types');\nconst { QueryTypes } = require('../../query-types');\n\n/**\n * The interface that Sequelize uses to talk with Postgres database\n */\nexport class PostgresQueryInterface extends PostgresQueryInterfaceTypescript {\n  /**\n   * Ensure enum and their values.\n   *\n   * @param {string} tableName  Name of table to create\n   * @param {object} attributes Object representing a list of normalized table attributes\n   * @param {object} [options]\n   * @param {Model}  [model]\n   *\n   * @protected\n   */\n  async ensureEnums(tableName, attributes, options, model) {\n    const keys = Object.keys(attributes);\n    const keyLen = keys.length;\n\n    let sql = '';\n    let promises = [];\n    let i = 0;\n\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n\n      if (\n        type instanceof DataTypes.ENUM\n        || type instanceof DataTypes.ARRAY && type.options.type instanceof DataTypes.ENUM // ARRAY sub type is ENUM\n      ) {\n        sql = this.queryGenerator.pgListEnums(tableName, attribute.field || keys[i], options);\n        promises.push(this.sequelize.queryRaw(\n          sql,\n          { ...options, plain: true, raw: true, type: QueryTypes.SELECT },\n        ));\n      }\n    }\n\n    const results = await Promise.all(promises);\n    promises = [];\n    let enumIdx = 0;\n\n    // This little function allows us to re-use the same code that prepends or appends new value to enum array\n    const addEnumValue = (field, value, relativeValue, position = 'before', spliceStart = promises.length) => {\n      const valueOptions = { ...options };\n      valueOptions.before = null;\n      valueOptions.after = null;\n\n      switch (position) {\n        case 'after':\n          valueOptions.after = relativeValue;\n          break;\n        case 'before':\n        default:\n          valueOptions.before = relativeValue;\n          break;\n      }\n\n      promises.splice(spliceStart, 0, () => {\n        return this.sequelize.queryRaw(this.queryGenerator.pgEnumAdd(\n          tableName, field, value, valueOptions,\n        ), valueOptions);\n      });\n    };\n\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n      const enumType = type instanceof DataTypes.ARRAY ? type.options.type : type;\n      const field = attribute.field || keys[i];\n\n      if (\n        type instanceof DataTypes.ENUM\n        || type instanceof DataTypes.ARRAY && enumType instanceof DataTypes.ENUM // ARRAY sub type is ENUM\n      ) {\n        // If the enum type doesn't exist then create it\n        if (!results[enumIdx]) {\n          promises.push(() => {\n            return this.sequelize.queryRaw(this.queryGenerator.pgEnum(tableName, field, enumType, options), { ...options, raw: true });\n          });\n        } else if (Boolean(results[enumIdx]) && Boolean(model)) {\n          const enumVals = this.queryGenerator.fromArray(results[enumIdx].enum_value);\n          const vals = enumType.options.values;\n\n          // Going through already existing values allows us to make queries that depend on those values\n          // We will prepend all new values between the old ones, but keep in mind - we can't change order of already existing values\n          // Then we append the rest of new values AFTER the latest already existing value\n          // E.g.: [1,2] -> [0,2,1] ==> [1,0,2]\n          // E.g.: [1,2,3] -> [2,1,3,4] ==> [1,2,3,4]\n          // E.g.: [1] -> [0,2,3] ==> [1,0,2,3]\n          let lastOldEnumValue;\n          let rightestPosition = -1;\n          for (let oldIndex = 0; oldIndex < enumVals.length; oldIndex++) {\n            const enumVal = enumVals[oldIndex];\n            const newIdx = vals.indexOf(enumVal);\n            lastOldEnumValue = enumVal;\n\n            if (newIdx === -1) {\n              continue;\n            }\n\n            const newValuesBefore = vals.slice(0, newIdx);\n            const promisesLength = promises.length;\n            // we go in reverse order so we could stop when we meet old value\n            for (let reverseIdx = newValuesBefore.length - 1; reverseIdx >= 0; reverseIdx--) {\n              if (~enumVals.indexOf(newValuesBefore[reverseIdx])) {\n                break;\n              }\n\n              addEnumValue(field, newValuesBefore[reverseIdx], lastOldEnumValue, 'before', promisesLength);\n            }\n\n            // we detect the most 'right' position of old value in new enum array so we can append new values to it\n            if (newIdx > rightestPosition) {\n              rightestPosition = newIdx;\n            }\n          }\n\n          if (lastOldEnumValue && rightestPosition < vals.length - 1) {\n            const remainingEnumValues = vals.slice(rightestPosition + 1);\n            for (let reverseIdx = remainingEnumValues.length - 1; reverseIdx >= 0; reverseIdx--) {\n              addEnumValue(field, remainingEnumValues[reverseIdx], lastOldEnumValue, 'after');\n            }\n          }\n\n          enumIdx++;\n        }\n      }\n    }\n\n    const result = await promises\n      .reduce(async (promise, asyncFunction) => await asyncFunction(await promise), Promise.resolve());\n\n    // If ENUM processed, then refresh OIDs\n    if (promises.length > 0) {\n      await this.sequelize.dialect.connectionManager.refreshDynamicOids();\n    }\n\n    return result;\n  }\n\n  /**\n   * Drop specified enum from database (Postgres only)\n   *\n   * @param {string} [enumName]  Enum name to drop\n   * @param {object} options Query options\n   *\n   * @returns {Promise}\n   */\n  async dropEnum(enumName, options) {\n    options = options || {};\n\n    return this.sequelize.queryRaw(\n      this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.quoteIdentifier(enumName)),\n      { ...options, raw: true },\n    );\n  }\n\n  /**\n   * Drop all enums from database (Postgres only)\n   *\n   * @param {object} options Query options\n   *\n   * @returns {Promise}\n   */\n  async dropAllEnums(options) {\n    options = options || {};\n\n    const enums = await this.pgListEnums(null, options);\n\n    return await Promise.all(enums.map(result => this.sequelize.queryRaw(\n      this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.quoteIdentifier(result.enum_name)),\n      { ...options, raw: true },\n    )));\n  }\n\n  /**\n   * List all enums (Postgres only)\n   *\n   * @param {string} [tableName]  Table whose enum to list\n   * @param {object} [options]    Query options\n   *\n   * @returns {Promise}\n   */\n  async pgListEnums(tableName, options) {\n    options = options || {};\n    const sql = this.queryGenerator.pgListEnums(tableName);\n\n    return this.sequelize.queryRaw(sql, { ...options, plain: false, raw: true, type: QueryTypes.SELECT });\n  }\n\n  /**\n   * Since postgres has a special case for enums, we should drop the related\n   * enum type within the table and attribute\n   *\n   * @override\n   */\n  async dropTable(tableName, options) {\n    await super.dropTable(tableName, options);\n    const promises = [];\n    // TODO: we support receiving the model class instead of getting it from modelManager. More than one model can use the same table.\n    const model = this.sequelize.modelManager.findModel(model => this.queryGenerator.isSameTable(model.table, tableName));\n\n    if (!model) {\n      // Do nothing when model is not available\n      return;\n    }\n\n    const getTableName = (!options || !options.schema || options.schema === 'public' ? '' : `${options.schema}_`) + tableName;\n\n    const attributes = model.modelDefinition.attributes;\n\n    for (const attribute of attributes.values()) {\n      if (!(attribute.type instanceof DataTypes.ENUM)) {\n        continue;\n      }\n\n      const sql = this.queryGenerator.pgEnumDrop(getTableName, attribute.attributeName);\n      promises.push(this.sequelize.queryRaw(sql, {\n        ...options,\n        raw: true,\n        supportsSearchPath: false,\n      }));\n    }\n\n    await Promise.all(promises);\n  }\n}\n"],
  "mappings": "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",
  "names": ["model"]
}
