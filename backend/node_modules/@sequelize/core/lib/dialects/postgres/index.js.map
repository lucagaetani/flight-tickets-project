{
  "version": 3,
  "sources": ["../../../src/dialects/postgres/index.ts"],
  "sourcesContent": ["import type { Sequelize } from '../../sequelize.js';\nimport { createSpecifiedOrderedBindCollector } from '../../utils/sql';\nimport { AbstractDialect } from '../abstract';\nimport { PostgresConnectionManager } from './connection-manager';\nimport { registerPostgresDbDataTypeParsers } from './data-types-db.js';\nimport * as DataTypes from './data-types.js';\nimport { PostgresQuery } from './query';\nimport { PostgresQueryGenerator } from './query-generator';\nimport { PostgresQueryInterface } from './query-interface';\n\nexport class PostgresDialect extends AbstractDialect {\n  static readonly supports = AbstractDialect.extendSupport({\n    'DEFAULT VALUES': true,\n    EXCEPTION: true,\n    'ON DUPLICATE KEY': false,\n    'ORDER NULLS': true,\n    returnValues: 'returning',\n    bulkDefault: true,\n    schemas: true,\n    multiDatabases: true,\n    lock: true,\n    lockOf: true,\n    lockKey: true,\n    lockOuterJoinFailure: true,\n    skipLocked: true,\n    forShare: 'FOR SHARE',\n    constraints: {\n      deferrable: true,\n      removeOptions: { cascade: true, ifExists: true },\n    },\n    index: {\n      concurrently: true,\n      using: 2,\n      where: true,\n      functionBased: true,\n      operator: true,\n      include: true,\n    },\n    inserts: {\n      onConflictDoNothing: ' ON CONFLICT DO NOTHING',\n      updateOnDuplicate: ' ON CONFLICT DO UPDATE SET',\n      conflictFields: true,\n      onConflictWhere: true,\n    },\n    dataTypes: {\n      ARRAY: true,\n      RANGE: true,\n      GEOMETRY: true,\n      GEOGRAPHY: true,\n      JSON: true,\n      JSONB: true,\n      HSTORE: true,\n      TSVECTOR: true,\n      CITEXT: true,\n      DATETIME: { infinity: true },\n      DATEONLY: { infinity: true },\n      FLOAT: { NaN: true, infinity: true },\n      REAL: { NaN: true, infinity: true },\n      DOUBLE: { NaN: true, infinity: true },\n      DECIMAL: { unconstrained: true, NaN: true, infinity: true },\n      CIDR: true,\n      MACADDR: true,\n      INET: true,\n    },\n    jsonOperations: true,\n    jsonExtraction: {\n      unquoted: true,\n      quoted: true,\n    },\n    REGEXP: true,\n    IREGEXP: true,\n    searchPath: true,\n    escapeStringConstants: true,\n    globalTimeZoneConfig: true,\n    dropTable: {\n      cascade: true,\n    },\n    truncate: {\n      cascade: true,\n    },\n    removeColumn: {\n      cascade: true,\n      ifExists: true,\n    },\n  });\n\n  readonly connectionManager: PostgresConnectionManager;\n  readonly queryGenerator: PostgresQueryGenerator;\n  readonly queryInterface: PostgresQueryInterface;\n  readonly Query = PostgresQuery;\n  readonly dataTypesDocumentationUrl = 'https://www.postgresql.org/docs/current/datatype.html';\n\n  // minimum supported version\n  readonly defaultVersion = '11.0.0';\n  readonly TICK_CHAR_LEFT = '\"';\n  readonly TICK_CHAR_RIGHT = '\"';\n\n  constructor(sequelize: Sequelize) {\n    super(sequelize, DataTypes, 'postgres');\n    this.connectionManager = new PostgresConnectionManager(this, sequelize);\n    this.queryGenerator = new PostgresQueryGenerator({\n      dialect: this,\n      sequelize,\n    });\n    this.queryInterface = new PostgresQueryInterface(\n      sequelize,\n      this.queryGenerator,\n    );\n\n    registerPostgresDbDataTypeParsers(this);\n  }\n\n  createBindCollector() {\n    return createSpecifiedOrderedBindCollector();\n  }\n\n  escapeBuffer(buffer: Buffer): string {\n    const hex = buffer.toString('hex');\n\n    // bytea hex format http://www.postgresql.org/docs/current/static/datatype-binary.html\n    return `'\\\\x${hex}'`;\n  }\n\n  escapeString(value: string): string {\n    // http://www.postgresql.org/docs/8.2/static/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS\n    // http://stackoverflow.com/q/603572/130598\n    value = value.replaceAll('\\'', '\\'\\'')\n      // null character is not allowed in Postgres\n      .replaceAll('\\0', '\\\\0');\n\n    return `'${value}'`;\n  }\n\n  canBackslashEscape() {\n    // postgres can use \\ to escape if one of these is true:\n    // - standard_conforming_strings is off\n    // - the string is prefixed with E (out of scope for this method)\n\n    return !this.sequelize.options.standardConformingStrings;\n  }\n\n  getDefaultSchema() {\n    return 'public';\n  }\n\n  static getDefaultPort() {\n    return 5432;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
