{
  "version": 3,
  "sources": ["../../../src/dialects/mariadb/query-generator.js"],
  "sourcesContent": ["'use strict';\n\nimport { joinSQLFragments } from '../../utils/join-sql-fragments';\nimport { EMPTY_OBJECT } from '../../utils/object.js';\nimport { defaultValueSchemable } from '../../utils/query-builder-utils';\nimport { attributeTypeToSql, normalizeDataType } from '../abstract/data-types-utils';\n\nimport each from 'lodash/each';\nimport isPlainObject from 'lodash/isPlainObject';\n\nconst { MariaDbQueryGeneratorTypeScript } = require('./query-generator-typescript');\n\nconst typeWithoutDefault = new Set(['BLOB', 'TEXT', 'GEOMETRY', 'JSON']);\n\nexport class MariaDbQueryGenerator extends MariaDbQueryGeneratorTypeScript {\n  createSchemaQuery(schemaName, options) {\n    return joinSQLFragments([\n      'CREATE SCHEMA IF NOT EXISTS',\n      this.quoteIdentifier(schemaName),\n      options?.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`,\n      options?.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`,\n      ';',\n    ]);\n  }\n\n  dropSchemaQuery(schemaName) {\n    return `DROP SCHEMA IF EXISTS ${this.quoteIdentifier(schemaName)};`;\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = {\n      engine: 'InnoDB',\n      charset: null,\n      rowFormat: null,\n      ...options,\n    };\n\n    const primaryKeys = [];\n    const foreignKeys = {};\n    const attrStr = [];\n\n    for (const attr in attributes) {\n      if (!Object.hasOwn(attributes, attr)) {\n        continue;\n      }\n\n      const dataType = attributes[attr];\n      let match;\n\n      if (dataType.includes('PRIMARY KEY')) {\n        primaryKeys.push(attr);\n\n        if (dataType.includes('REFERENCES')) {\n          // MariaDB doesn't support inline REFERENCES declarations: move to the end\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(`${this.quoteIdentifier(attr)} ${match[1].replace('PRIMARY KEY', '')}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace('PRIMARY KEY', '')}`);\n        }\n      } else if (dataType.includes('REFERENCES')) {\n        // MariaDB doesn't support inline REFERENCES declarations: move to the end\n        match = dataType.match(/^(.+) (REFERENCES.*)$/);\n        attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n        foreignKeys[attr] = match[2];\n      } else {\n        attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n      }\n    }\n\n    const table = this.quoteTable(tableName);\n    let attributesClause = attrStr.join(', ');\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      each(options.uniqueKeys, (columns, indexName) => {\n        if (typeof indexName !== 'string') {\n          indexName = `uniq_${tableName}_${columns.fields.join('_')}`;\n        }\n\n        attributesClause += `, UNIQUE ${this.quoteIdentifier(indexName)} (${columns.fields.map(field => this.quoteIdentifier(field))\n          .join(', ')})`;\n      });\n    }\n\n    if (pkString.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pkString})`;\n    }\n\n    for (const fkey in foreignKeys) {\n      if (Object.hasOwn(foreignKeys, fkey)) {\n        attributesClause += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;\n      }\n    }\n\n    return joinSQLFragments([\n      'CREATE TABLE IF NOT EXISTS',\n      table,\n      `(${attributesClause})`,\n      `ENGINE=${options.engine}`,\n      options.comment && typeof options.comment === 'string' && `COMMENT ${this.escape(options.comment)}`,\n      options.charset && `DEFAULT CHARSET=${options.charset}`,\n      options.collate && `COLLATE ${options.collate}`,\n      options.initialAutoIncrement && `AUTO_INCREMENT=${options.initialAutoIncrement}`,\n      options.rowFormat && `ROW_FORMAT=${options.rowFormat}`,\n      ';',\n    ]);\n  }\n\n  addColumnQuery(table, key, dataType, options = {}) {\n    const ifNotExists = options.ifNotExists ? 'IF NOT EXISTS' : '';\n\n    dataType = {\n      ...dataType,\n      type: normalizeDataType(dataType.type, this.dialect),\n    };\n\n    return joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(table),\n      'ADD',\n      ifNotExists,\n      this.quoteIdentifier(key),\n      this.attributeToSQL(dataType, {\n        context: 'addColumn',\n        tableName: table,\n        foreignKey: key,\n      }),\n      ';',\n    ]);\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const attrString = [];\n    const constraintString = [];\n\n    for (const attributeName in attributes) {\n      let definition = attributes[attributeName];\n      if (definition.includes('REFERENCES')) {\n        const attrName = this.quoteIdentifier(attributeName);\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        constraintString.push(`FOREIGN KEY (${attrName}) ${definition}`);\n      } else {\n        attrString.push(`\\`${attributeName}\\` \\`${attributeName}\\` ${definition}`);\n      }\n    }\n\n    return joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      attrString.length && `CHANGE ${attrString.join(', ')}`,\n      constraintString.length && `ADD ${constraintString.join(', ')}`,\n      ';',\n    ]);\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const attrString = [];\n\n    for (const attrName in attributes) {\n      const definition = attributes[attrName];\n      attrString.push(`\\`${attrBefore}\\` \\`${attrName}\\` ${definition}`);\n    }\n\n    return joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'CHANGE',\n      attrString.join(', '),\n      ';',\n    ]);\n  }\n\n  truncateTableQuery(tableName) {\n    return `TRUNCATE ${this.quoteTable(tableName)}`;\n  }\n\n  deleteQuery(tableName, where, options = EMPTY_OBJECT, model) {\n    let query = `DELETE FROM ${this.quoteTable(tableName)}`;\n\n    const escapeOptions = { ...options, model };\n    const whereSql = this.whereQuery(where, escapeOptions);\n    if (whereSql) {\n      query += ` ${whereSql}`;\n    }\n\n    if (options.limit) {\n      query += ` LIMIT ${this.escape(options.limit, escapeOptions)}`;\n    }\n\n    return query;\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!isPlainObject(attribute)) {\n      attribute = {\n        type: attribute,\n      };\n    }\n\n    const attributeString = attributeTypeToSql(attribute.type, { escape: this.escape.bind(this), dialect: this.dialect });\n    let template = attributeString;\n\n    if (attribute.allowNull === false) {\n      template += ' NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      template += ' auto_increment';\n    }\n\n    // BLOB/TEXT/GEOMETRY/JSON cannot have a default value\n    if (!typeWithoutDefault.has(attributeString)\n      && attribute.type._binary !== true\n      && defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n\n    if (attribute.unique === true) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if (attribute.comment) {\n      template += ` COMMENT ${this.escape(attribute.comment)}`;\n    }\n\n    if (attribute.first) {\n      template += ' FIRST';\n    }\n\n    if (attribute.after) {\n      template += ` AFTER ${this.quoteIdentifier(attribute.after)}`;\n    }\n\n    if ((!options || !options.withoutForeignKeyConstraints) && attribute.references) {\n      if (options && options.context === 'addColumn' && options.foreignKey) {\n        const fkName = this.quoteIdentifier(`${this.extractTableDetails(options.tableName).tableName}_${options.foreignKey}_foreign_idx`);\n\n        template += `, ADD CONSTRAINT ${fkName} FOREIGN KEY (${this.quoteIdentifier(options.foreignKey)})`;\n      }\n\n      template += ` REFERENCES ${this.quoteTable(attribute.references.table)}`;\n\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier('id')})`;\n      }\n\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n\n    return template;\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  }\n}\n"],
  "mappings": "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",
  "names": ["each", "isPlainObject"]
}
