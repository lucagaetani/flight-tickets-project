{
  "version": 3,
  "sources": ["../../../src/dialects/mariadb/query.js"],
  "sourcesContent": ["'use strict';\n\nimport NodeUtil from 'node:util';\n\nimport forOwn from 'lodash/forOwn';\nimport zipObject from 'lodash/zipObject';\n\nconst { AbstractQuery } = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst DataTypes = require('../../data-types');\nconst { logger } = require('../../utils/logger');\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\nconst ER_CANT_DROP_FIELD_OR_KEY = 1091;\n\nconst debug = logger.debugContext('sql:mariadb');\n\nexport class MariaDbQuery extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, { showWarnings: false, ...options });\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const { connection, options } = this;\n\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n\n    let results;\n\n    try {\n      results = await connection.query(this.sql, parameters);\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        // MariaDB automatically rolls-back transactions in the event of a deadlock.\n        // However, we still initiate a manual rollback to ensure the connection gets released - see #13102.\n        try {\n          await options.transaction.rollback();\n        } catch {\n          // Ignore errors - since MariaDB automatically rolled back, we're\n          // not that worried about this redundant rollback failing.\n        }\n\n        options.transaction.finished = 'rollback';\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error);\n    } finally {\n      complete();\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n\n    return this.formatResults(results);\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data.affectedRows;\n    }\n\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        const modelDefinition = this.model?.modelDefinition;\n\n        // handle bulkCreate AI primary key\n        if (\n          modelDefinition?.autoIncrementAttributeName\n          && modelDefinition?.autoIncrementAttributeName === this.model.primaryKeyAttribute\n        ) {\n          // ONLY TRUE IF @auto_increment_increment is set to 1 !!\n          // Doesn't work with GALERA => each node will reserve increment (x for first server, x+1 for next node...)\n          const startId = data[this.getInsertIdField()];\n          result = new Array(data.affectedRows);\n          const pkColumnName = modelDefinition.attributes.get(this.model.primaryKeyAttribute).columnName;\n          for (let i = 0n; i < data.affectedRows; i++) {\n            result[i] = { [pkColumnName]: startId + i };\n          }\n\n          return [result, data.affectedRows];\n        }\n\n        return [data[this.getInsertIdField()], data.affectedRows];\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      this.handleJsonSelectQuery(data);\n\n      return this.handleSelectQuery(data);\n    }\n\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n\n    if (this.isRawQuery()) {\n      const meta = data.meta;\n\n      return [data, meta];\n    }\n\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        result[_result.Field] = {\n          type: _result.Type.toLowerCase().startsWith('enum') ? _result.Type.replace(/^enum/i,\n            'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.hasOwn(_result, 'Extra')\n            && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null,\n        };\n      }\n\n      return result;\n    }\n\n    return result;\n  }\n\n  handleJsonSelectQuery(rows) {\n    if (!this.model || !this.model.fieldRawAttributesMap) {\n      return;\n    }\n\n    const meta = rows.meta;\n    for (const [i, _field] of Object.keys(this.model.fieldRawAttributesMap).entries()) {\n      const modelField = this.model.fieldRawAttributesMap[_field];\n      if (modelField.type instanceof DataTypes.JSON) {\n        // Value is returned as String, not JSON\n        rows = rows.map(row => {\n          // JSON fields for MariaDB server 10.5.2+ already results in JSON format so we can skip JSON.parse\n          // In this case the column type field will be MYSQL_TYPE_STRING, but the extended type will indicate 'json'\n          if (\n            row[modelField.fieldName]\n            && typeof row[modelField.fieldName] === 'string'\n            && (!meta[i] || meta[i].dataTypeFormat !== 'json')\n          ) {\n            row[modelField.fieldName] = JSON.parse(row[modelField.fieldName]);\n          }\n\n          if (DataTypes.JSON.parse) {\n            return DataTypes.JSON.parse(modelField, this.sequelize.options,\n              row[modelField.fieldName]);\n          }\n\n          return row;\n        });\n      }\n    }\n  }\n\n  formatError(err) {\n    switch (err.errno) {\n      case ER_DUP_ENTRY: {\n        const match = err.message.match(\n          /Duplicate entry '([\\S\\s]*)' for key '?((.|\\s)*?)'?\\s.*$/,\n        );\n\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const fieldKey = match ? match[2] : undefined;\n        const fieldVal = match ? match[1] : undefined;\n        const uniqueKey = this.model && this.model.getIndexes().find(index => index.unique && index.name === fieldKey);\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) {\n            message = uniqueKey.msg;\n          }\n\n          fields = zipObject(uniqueKey.fields, values);\n        } else {\n          fields[fieldKey] = fieldVal;\n        }\n\n        const errors = [];\n        forOwn(fields, (value, field) => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            value,\n            this.instance,\n            'not_unique',\n          ));\n        });\n\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, cause: err, fields });\n      }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW: {\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n        const match = err.message.match(\n          /CONSTRAINT ([\"`])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/,\n        );\n        const quoteChar = match ? match[1] : '`';\n        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          reltype: err.errno === ER_ROW_IS_REFERENCED ? 'parent' : 'child',\n          table: match ? match[4] : undefined,\n          fields,\n          value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n          index: match ? match[2] : undefined,\n          cause: err,\n        });\n      }\n\n      case ER_CANT_DROP_FIELD_OR_KEY: {\n        const constraintMatch = err.sql.match(/(?:constraint|index) `(.+?)`/i);\n        const constraint = constraintMatch ? constraintMatch[1] : undefined;\n        const tableMatch = err.sql.match(/table `(.+?)`/i);\n        const table = tableMatch ? tableMatch[1] : undefined;\n\n        return new sequelizeErrors.UnknownConstraintError({\n          message: err.text,\n          constraint,\n          table,\n          cause: err,\n        });\n      }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n\n    let currItem;\n    const result = [];\n\n    for (const item of data) {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.Key_name === 'PRIMARY',\n          fields: [],\n          name: item.Key_name,\n          tableName: item.Table,\n          unique: item.Non_unique !== '1',\n          type: item.Index_type,\n        };\n        result.push(currItem);\n      }\n\n      currItem.fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC'\n          : item.Collation === 'D' ? 'DESC'\n          // Not sorted\n          : item.Collation === null ? null\n          : (() => {\n            throw new Error(`Unknown index collation ${NodeUtil.inspect(item.Collation)}`);\n          })(),\n      };\n    }\n\n    return result;\n  }\n}\n"],
  "mappings": "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",
  "names": ["zipObject", "forOwn", "NodeUtil"]
}
