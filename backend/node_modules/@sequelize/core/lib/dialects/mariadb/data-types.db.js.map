{
  "version": 3,
  "sources": ["../../../src/dialects/mariadb/data-types.db.ts"],
  "sourcesContent": ["import dayjs from 'dayjs';\nimport type { FieldInfo } from 'mariadb';\nimport { isValidTimeZone } from '../../utils/dayjs.js';\nimport type { MariaDbDialect } from './index.js';\n\n/**\n * First pass of DB value parsing: Parses based on the MariaDB Type ID.\n * If a Sequelize DataType is specified, the value is then passed to {@link DataTypes.ABSTRACT#parseDatabaseValue}.\n *\n * @param dialect\n */\nexport function registerMariaDbDbDataTypeParsers(dialect: MariaDbDialect) {\n  dialect.registerDataTypeParser(['DATETIME'], (value: FieldInfo) => {\n    const valueStr = value.string();\n    if (valueStr === null) {\n      return null;\n    }\n\n    const timeZone = dialect.sequelize.options.timezone;\n    if (timeZone === '+00:00') { // default value\n      // mariadb returns a UTC date string that looks like the following:\n      // 2022-01-01 00:00:00\n      // The above does not specify a time zone offset, so Date.parse will try to parse it as a local time.\n      // Adding +00 fixes this.\n      return `${valueStr}+00`;\n    }\n\n    if (isValidTimeZone(timeZone)) {\n      return dayjs.tz(valueStr, timeZone).toISOString();\n    }\n\n    // offset format, we can just append.\n    // \"2022-09-22 20:03:06\" with timeZone \"-04:00\"\n    // becomes \"2022-09-22 20:03:06-04:00\"\n    return valueStr + timeZone;\n  });\n\n  // dateonly\n  dialect.registerDataTypeParser(['DATE'], (value: FieldInfo) => {\n    return value.string();\n  });\n\n  // bigint\n  dialect.registerDataTypeParser(['LONGLONG'], (value: FieldInfo) => {\n    return value.string();\n  });\n\n  dialect.registerDataTypeParser(['GEOMETRY'], (value: FieldInfo) => {\n    return value.geometry();\n  });\n\n  // For backwards compatibility, we currently return BIGINTs as strings. We will implement bigint support for all\n  // dialects in the future: https://github.com/sequelize/sequelize/issues/10468\n  dialect.registerDataTypeParser(['BIGINT'], (value: FieldInfo) => {\n    return value.string();\n  });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAElB,IAAAA,gBAAgC;AASzB,SAAS,iCAAiC,SAAyB;AACxE,UAAQ,uBAAuB,CAAC,UAAU,GAAG,CAAC,UAAqB;AACjE,UAAM,WAAW,MAAM,OAAO;AAC9B,QAAI,aAAa,MAAM;AACrB,aAAO;AAAA,IACT;AAEA,UAAM,WAAW,QAAQ,UAAU,QAAQ;AAC3C,QAAI,aAAa,UAAU;AAKzB,aAAO,GAAG;AAAA,IACZ;AAEA,YAAI,+BAAgB,QAAQ,GAAG;AAC7B,aAAO,aAAAC,QAAM,GAAG,UAAU,QAAQ,EAAE,YAAY;AAAA,IAClD;AAKA,WAAO,WAAW;AAAA,EACpB,CAAC;AAGD,UAAQ,uBAAuB,CAAC,MAAM,GAAG,CAAC,UAAqB;AAC7D,WAAO,MAAM,OAAO;AAAA,EACtB,CAAC;AAGD,UAAQ,uBAAuB,CAAC,UAAU,GAAG,CAAC,UAAqB;AACjE,WAAO,MAAM,OAAO;AAAA,EACtB,CAAC;AAED,UAAQ,uBAAuB,CAAC,UAAU,GAAG,CAAC,UAAqB;AACjE,WAAO,MAAM,SAAS;AAAA,EACxB,CAAC;AAID,UAAQ,uBAAuB,CAAC,QAAQ,GAAG,CAAC,UAAqB;AAC/D,WAAO,MAAM,OAAO;AAAA,EACtB,CAAC;AACH;",
  "names": ["import_dayjs", "dayjs"]
}
