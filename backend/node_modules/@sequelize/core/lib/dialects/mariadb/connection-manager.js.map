{
  "version": 3,
  "sources": ["../../../src/dialects/mariadb/connection-manager.ts"],
  "sourcesContent": ["import dayjs from 'dayjs';\nimport type {\n  FieldInfo,\n  Connection as LibConnection,\n  ConnectionConfig as MariaDbConnectionConfig,\n  TypeCastNextFunction,\n  TypeCastResult,\n} from 'mariadb';\nimport semver from 'semver';\nimport {\n  AccessDeniedError,\n  ConnectionError,\n  ConnectionRefusedError,\n  HostNotFoundError,\n  HostNotReachableError,\n  InvalidConnectionError,\n} from '../../errors/index.js';\nimport type { ConnectionOptions, Sequelize } from '../../sequelize.js';\nimport { isErrorWithStringCode } from '../../utils/check.js';\nimport { logger } from '../../utils/logger';\nimport { removeUndefined } from '../../utils/object.js';\nimport type { Connection } from '../abstract/connection-manager';\nimport { AbstractConnectionManager } from '../abstract/connection-manager';\nimport type { MariaDbDialect } from './index.js';\n\nconst debug = logger.debugContext('connection:mariadb');\n\nexport interface MariaDbConnection extends Connection, LibConnection {}\n\n// TODO: once the code has been split into packages, we won't need to lazy load this anymore\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\ntype Lib = typeof import('mariadb');\n\n/**\n * MariaDB Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle MariaDB specific connections\n * Use https://github.com/MariaDB/mariadb-connector-nodejs to connect with MariaDB server\n *\n * @private\n */\nexport class MariaDbConnectionManager extends AbstractConnectionManager<MariaDbConnection> {\n  private readonly lib: Lib;\n\n  constructor(dialect: MariaDbDialect, sequelize: Sequelize) {\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('mariadb') as Lib;\n  }\n\n  #typeCast(field: FieldInfo, next: TypeCastNextFunction): TypeCastResult {\n    const parser = this.dialect.getParserForDatabaseDataType(field.type);\n\n    if (parser) {\n      return parser(field) as TypeCastResult;\n    }\n\n    return next();\n  }\n\n  /**\n   * Connect with MariaDB database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param config\n   * @returns\n   * @private\n   */\n  async connect(config: ConnectionOptions): Promise<MariaDbConnection> {\n    // Named timezone is not supported in mariadb, convert to offset\n    let tzOffset = this.sequelize.options.timezone;\n    tzOffset = tzOffset.includes('/') ? dayjs.tz(undefined, tzOffset).format('Z')\n      : tzOffset;\n\n    const connectionConfig: MariaDbConnectionConfig = removeUndefined({\n      host: config.host,\n      port: config.port ? Number(config.port) : undefined,\n      user: config.username,\n      password: config.password,\n      database: config.database,\n      timezone: tzOffset,\n      foundRows: false,\n      ...config.dialectOptions,\n      typeCast: (field: FieldInfo, next: TypeCastNextFunction) => this.#typeCast(field, next),\n    });\n\n    if (!this.sequelize.config.keepDefaultTimezone) {\n      // set timezone for this connection\n      if (connectionConfig.initSql) {\n        if (!Array.isArray(\n          connectionConfig.initSql,\n        )) {\n          connectionConfig.initSql = [connectionConfig.initSql];\n        }\n\n        connectionConfig.initSql.push(`SET time_zone = '${tzOffset}'`);\n      } else {\n        connectionConfig.initSql = `SET time_zone = '${tzOffset}'`;\n      }\n    }\n\n    try {\n      const connection = await this.lib.createConnection(connectionConfig);\n      this.sequelize.options.databaseVersion = semver.coerce(connection.serverVersion())!.version;\n\n      debug('connection acquired');\n      connection.on('error', error => {\n        switch (error.code) {\n          case 'ESOCKET':\n          case 'ECONNRESET':\n          case 'EPIPE':\n          case 'PROTOCOL_CONNECTION_LOST':\n            void this.pool.destroy(connection);\n            break;\n          default:\n        }\n      });\n\n      return connection;\n    } catch (error: unknown) {\n      if (!isErrorWithStringCode(error)) {\n        throw error;\n      }\n\n      switch (error.code) {\n        case 'ECONNREFUSED':\n          throw new ConnectionRefusedError(error);\n        case 'ER_ACCESS_DENIED_ERROR':\n        case 'ER_ACCESS_DENIED_NO_PASSWORD_ERROR':\n          throw new AccessDeniedError(error);\n        case 'ENOTFOUND':\n          throw new HostNotFoundError(error);\n        case 'EHOSTUNREACH':\n        case 'ENETUNREACH':\n        case 'EADDRNOTAVAIL':\n          throw new HostNotReachableError(error);\n        case 'EINVAL':\n          throw new InvalidConnectionError(error);\n        default:\n          throw new ConnectionError(error);\n      }\n    }\n  }\n\n  async disconnect(connection: MariaDbConnection) {\n    // Don't disconnect connections with CLOSED state\n    if (!connection.isValid()) {\n      debug('connection tried to disconnect but was already at CLOSED state');\n\n      return;\n    }\n\n    await connection.end();\n  }\n\n  validate(connection: MariaDbConnection): boolean {\n    return connection && connection.isValid();\n  }\n}\n"],
  "mappings": "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",
  "names": ["dayjs", "semver"]
}
