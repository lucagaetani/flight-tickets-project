"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var query_generator_typescript_exports = {};
__export(query_generator_typescript_exports, {
  MsSqlQueryGeneratorTypeScript: () => MsSqlQueryGeneratorTypeScript
});
module.exports = __toCommonJS(query_generator_typescript_exports);
var import_check = require("../../utils/check");
var import_join_sql_fragments = require("../../utils/join-sql-fragments");
var import_json = require("../../utils/json");
var import_string = require("../../utils/string");
var import_query_generator = require("../abstract/query-generator");
var import_query_generator_typescript = require("../abstract/query-generator-typescript");
const REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set(["ifExists"]);
class MsSqlQueryGeneratorTypeScript extends import_query_generator.AbstractQueryGenerator {
  _getTechnicalSchemaNames() {
    return [
      "db_accessadmin",
      "db_backupoperator",
      "db_datareader",
      "db_datawriter",
      "db_ddladmin",
      "db_denydatareader",
      "db_denydatawriter",
      "db_owner",
      "db_securityadmin",
      "INFORMATION_SCHEMA",
      "sys"
    ];
  }
  listSchemasQuery(options) {
    const schemasToSkip = ["dbo", "guest", ...this._getTechnicalSchemaNames()];
    if (options == null ? void 0 : options.skip) {
      schemasToSkip.push(...options.skip);
    }
    return (0, import_join_sql_fragments.joinSQLFragments)([
      "SELECT [name] AS [schema] FROM sys.schemas",
      `WHERE [name] NOT IN (${schemasToSkip.map((schema) => this.escape(schema)).join(", ")})`
    ]);
  }
  describeTableQuery(tableName) {
    const table = this.extractTableDetails(tableName);
    return (0, import_join_sql_fragments.joinSQLFragments)([
      "SELECT",
      `c.COLUMN_NAME AS 'Name',`,
      `c.DATA_TYPE AS 'Type',`,
      `c.CHARACTER_MAXIMUM_LENGTH AS 'Length',`,
      `c.IS_NULLABLE as 'IsNull',`,
      `COLUMN_DEFAULT AS 'Default',`,
      `pk.CONSTRAINT_TYPE AS 'Constraint',`,
      `COLUMNPROPERTY(OBJECT_ID(c.TABLE_SCHEMA+'.'+c.TABLE_NAME), c.COLUMN_NAME, 'IsIdentity') as 'IsIdentity',`,
      `CAST(prop.value AS NVARCHAR) AS 'Comment'`,
      "FROM",
      "INFORMATION_SCHEMA.TABLES t",
      "INNER JOIN",
      "INFORMATION_SCHEMA.COLUMNS c ON t.TABLE_NAME = c.TABLE_NAME AND t.TABLE_SCHEMA = c.TABLE_SCHEMA",
      "LEFT JOIN (SELECT tc.table_schema, tc.table_name,",
      "cu.column_name, tc.CONSTRAINT_TYPE",
      "FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc",
      "JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE  cu",
      "ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name",
      "and tc.constraint_name=cu.constraint_name",
      `and tc.CONSTRAINT_TYPE='PRIMARY KEY') pk`,
      "ON pk.table_schema=c.table_schema",
      "AND pk.table_name=c.table_name",
      "AND pk.column_name=c.column_name",
      "INNER JOIN sys.columns AS sc",
      `ON sc.object_id = object_id(t.table_schema + '.' + t.table_name) AND sc.name = c.column_name`,
      "LEFT JOIN sys.extended_properties prop ON prop.major_id = sc.object_id",
      "AND prop.minor_id = sc.column_id",
      `AND prop.name = 'MS_Description'`,
      `WHERE t.TABLE_NAME = ${this.escape(table.tableName)}`,
      `AND t.TABLE_SCHEMA = ${this.escape(table.schema)}`
    ]);
  }
  listTablesQuery(options) {
    return (0, import_join_sql_fragments.joinSQLFragments)([
      "SELECT t.name AS [tableName], s.name AS [schema]",
      `FROM sys.tables t INNER JOIN sys.schemas s ON t.schema_id = s.schema_id WHERE t.type = 'U'`,
      (options == null ? void 0 : options.schema) ? `AND s.name = ${this.escape(options.schema)}` : `AND s.name NOT IN (${this._getTechnicalSchemaNames().map((schema) => this.escape(schema)).join(", ")})`,
      "ORDER BY s.name, t.name"
    ]);
  }
  _getConstraintType(type) {
    switch (type) {
      case "CHECK":
        return "CHECK_CONSTRAINT";
      case "DEFAULT":
        return "DEFAULT_CONSTRAINT";
      case "FOREIGN KEY":
        return "FOREIGN_KEY_CONSTRAINT";
      case "PRIMARY KEY":
        return "PRIMARY_KEY_CONSTRAINT";
      case "UNIQUE":
        return "UNIQUE_CONSTRAINT";
      default:
        throw new Error(`Constraint type ${type} is not supported`);
    }
  }
  showConstraintsQuery(tableName, options) {
    const table = this.extractTableDetails(tableName);
    return (0, import_join_sql_fragments.joinSQLFragments)([
      "SELECT DB_NAME() AS constraintCatalog,",
      "s.[name] AS constraintSchema,",
      "c.constraintName,",
      `REPLACE(LEFT(c.constraintType, CHARINDEX('_CONSTRAINT', c.constraintType) - 1), '_', ' ') AS constraintType,`,
      "DB_NAME() AS tableCatalog,",
      "s.[name] AS tableSchema,",
      "t.[name] AS tableName,",
      "c.columnNames,",
      "c.referencedTableSchema,",
      "c.referencedTableName,",
      "c.referencedColumnNames,",
      "c.deleteAction,",
      "c.updateAction,",
      "c.definition",
      "FROM sys.tables t INNER JOIN sys.schemas s ON t.schema_id = s.schema_id",
      "INNER JOIN (",
      "SELECT kc.[name] AS constraintName, kc.[type_desc] AS constraintType, kc.[parent_object_id] AS constraintTableId, c.[name] AS columnNames, null as referencedTableSchema, null AS referencedTableName",
      ", null AS referencedColumnNames, null AS deleteAction, null AS updateAction, null AS definition",
      "FROM sys.key_constraints kc LEFT JOIN sys.indexes i ON kc.name = i.name",
      "LEFT JOIN sys.index_columns ic ON ic.index_id = i.index_id AND ic.object_id = kc.parent_object_id",
      "LEFT JOIN sys.columns c ON c.column_id = ic.column_id AND c.object_id = kc.parent_object_id UNION ALL",
      "SELECT [name] AS constraintName, [type_desc] AS constraintType, [parent_object_id] AS constraintTableId, null AS columnNames, null as referencedTableSchema, null AS referencedTableName",
      ", null AS referencedColumnNames, null AS deleteAction, null AS updateAction, [definition] FROM sys.check_constraints c UNION ALL",
      "SELECT dc.[name] AS constraintName, dc.[type_desc] AS constraintType, dc.[parent_object_id] AS constraintTableId, c.[name] AS columnNames, null as referencedTableSchema, null AS referencedTableName",
      ", null AS referencedColumnNames, null AS deleteAction, null AS updateAction, [definition] FROM sys.default_constraints dc",
      "INNER JOIN sys.columns c ON dc.parent_column_id = c.column_id AND dc.parent_object_id = c.object_id UNION ALL",
      "SELECT k.[name] AS constraintName, k.[type_desc] AS constraintType, k.[parent_object_id] AS constraintTableId, fcol.[name] AS columnNames, OBJECT_SCHEMA_NAME(k.[referenced_object_id]) as referencedTableSchema",
      ", OBJECT_NAME(k.[referenced_object_id]) AS referencedTableName, rcol.[name] AS referencedColumnNames, k.[delete_referential_action_desc] AS deleteAction",
      ", k.[update_referential_action_desc] AS updateAction, null AS definition FROM sys.foreign_keys k INNER JOIN sys.foreign_key_columns c ON k.[object_id] = c.constraint_object_id",
      "INNER JOIN sys.columns fcol ON c.parent_column_id = fcol.column_id AND c.parent_object_id = fcol.object_id",
      "INNER JOIN sys.columns rcol ON c.referenced_column_id = rcol.column_id AND c.referenced_object_id = rcol.object_id",
      ") c ON t.object_id = c.constraintTableId",
      `WHERE s.name = ${this.escape(table.schema)} AND t.name = ${this.escape(table.tableName)}`,
      (options == null ? void 0 : options.columnName) ? `AND c.columnNames = ${this.escape(options.columnName)}` : "",
      (options == null ? void 0 : options.constraintName) ? `AND c.constraintName = ${this.escape(options.constraintName)}` : "",
      (options == null ? void 0 : options.constraintType) ? `AND c.constraintType = ${this.escape(this._getConstraintType(options.constraintType))}` : "",
      "ORDER BY c.constraintName"
    ]);
  }
  showIndexesQuery(tableName) {
    const table = this.extractTableDetails(tableName);
    const objectId = (table == null ? void 0 : table.schema) ? `${table.schema}.${table.tableName}` : `${table.tableName}`;
    return (0, import_join_sql_fragments.joinSQLFragments)([
      "SELECT",
      "I.[name] AS [index_name],",
      "I.[type_desc] AS [index_type],",
      "C.[name] AS [column_name],",
      "IC.[is_descending_key],",
      "IC.[is_included_column],",
      "I.[is_unique],",
      "I.[is_primary_key],",
      "I.[is_unique_constraint]",
      "FROM sys.indexes I",
      "INNER JOIN sys.index_columns IC ON IC.index_id = I.index_id AND IC.object_id = I.object_id",
      "INNER JOIN sys.columns C ON IC.object_id = C.object_id AND IC.column_id = C.column_id",
      `WHERE I.[object_id] = OBJECT_ID(${this.escape(objectId)}) ORDER BY I.[name];`
    ]);
  }
  removeIndexQuery(tableName, indexNameOrAttributes, options) {
    if (options) {
      (0, import_check.rejectInvalidOptions)(
        "removeIndexQuery",
        this.dialect.name,
        import_query_generator_typescript.REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS,
        REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS,
        options
      );
    }
    let indexName;
    if (Array.isArray(indexNameOrAttributes)) {
      const table = this.extractTableDetails(tableName);
      indexName = (0, import_string.generateIndexName)(table, { fields: indexNameOrAttributes });
    } else {
      indexName = indexNameOrAttributes;
    }
    return (0, import_join_sql_fragments.joinSQLFragments)([
      "DROP INDEX",
      (options == null ? void 0 : options.ifExists) ? "IF EXISTS" : "",
      this.quoteIdentifier(indexName),
      "ON",
      this.quoteTable(tableName)
    ]);
  }
  jsonPathExtractionQuery(sqlExpression, path, unquote) {
    if (!unquote) {
      throw new Error(`JSON Paths are not supported in ${this.dialect.name} without unquoting the JSON value.`);
    }
    return `JSON_VALUE(${sqlExpression}, ${this.escape((0, import_json.buildJsonPath)(path))})`;
  }
  formatUnquoteJson(arg, options) {
    return `JSON_VALUE(${this.escape(arg, options)})`;
  }
  versionQuery() {
    return `DECLARE @ms_ver NVARCHAR(20);
SET @ms_ver = REVERSE(CONVERT(NVARCHAR(20), SERVERPROPERTY('ProductVersion')));
SELECT REVERSE(SUBSTRING(@ms_ver, CHARINDEX('.', @ms_ver)+1, 20)) AS 'version'`;
  }
}
//# sourceMappingURL=query-generator-typescript.js.map
