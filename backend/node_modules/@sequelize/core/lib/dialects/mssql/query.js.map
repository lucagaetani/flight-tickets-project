{
  "version": 3,
  "sources": ["../../../src/dialects/mssql/query.js"],
  "sourcesContent": ["'use strict';\n\nimport { getAttributeName } from '../../utils/format';\n\nimport forOwn from 'lodash/forOwn';\nimport zipObject from 'lodash/zipObject';\n\nconst { AbstractQuery } = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:mssql');\n\nconst minSafeIntegerAsBigInt = BigInt(Number.MIN_SAFE_INTEGER);\nconst maxSafeIntegerAsBigInt = BigInt(Number.MAX_SAFE_INTEGER);\n\nfunction getScale(aNum) {\n  if (!Number.isFinite(aNum)) {\n    return 0;\n  }\n\n  let e = 1;\n  while (Math.round(aNum * e) / e !== aNum) {\n    e *= 10;\n  }\n\n  return Math.log10(e);\n}\n\nexport class MsSqlQuery extends AbstractQuery {\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value, TYPES) {\n    const paramType = { type: TYPES.NVarChar, typeOptions: {}, value };\n    if (typeof value === 'number') {\n      if (Number.isInteger(value)) {\n        if (value >= -2_147_483_648 && value <= 2_147_483_647) {\n          paramType.type = TYPES.Int;\n        } else {\n          paramType.type = TYPES.BigInt;\n        }\n      } else {\n        paramType.type = TYPES.Numeric;\n        // Default to a reasonable numeric precision/scale pending more sophisticated logic\n        paramType.typeOptions = { precision: 30, scale: getScale(value) };\n      }\n    } else if (typeof value === 'bigint') {\n      if (value < minSafeIntegerAsBigInt || value > maxSafeIntegerAsBigInt) {\n        paramType.type = TYPES.VarChar;\n        paramType.value = value.toString();\n      } else {\n        return this.getSQLTypeFromJsType(Number(value), TYPES);\n      }\n    } else if (typeof value === 'boolean') {\n      paramType.type = TYPES.Bit;\n    }\n\n    if (Buffer.isBuffer(value)) {\n      paramType.type = TYPES.VarBinary;\n    }\n\n    return paramType;\n  }\n\n  async _run(connection, sql, parameters) {\n    this.sql = sql;\n    const { options } = this;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    const query = new Promise((resolve, reject) => {\n      // TRANSACTION SUPPORT\n      if (sql.startsWith('BEGIN TRANSACTION')) {\n        connection.beginTransaction(error => (error ? reject(error) : resolve([])), options.transaction.name, connection.lib.ISOLATION_LEVEL[options.isolationLevel]);\n\n        return;\n      }\n\n      if (sql.startsWith('COMMIT TRANSACTION')) {\n        connection.commitTransaction(error => (error ? reject(error) : resolve([])));\n\n        return;\n      }\n\n      if (sql.startsWith('ROLLBACK TRANSACTION')) {\n        connection.rollbackTransaction(error => (error ? reject(error) : resolve([])), options.transaction.name);\n\n        return;\n      }\n\n      if (sql.startsWith('SAVE TRANSACTION')) {\n        connection.saveTransaction(error => (error ? reject(error) : resolve([])), options.transaction.name);\n\n        return;\n      }\n\n      const rows = [];\n      const request = new connection.lib.Request(sql, (err, rowCount) => (err ? reject(err) : resolve([rows, rowCount])));\n\n      if (parameters) {\n        if (Array.isArray(parameters)) {\n          // eslint-disable-next-line unicorn/no-for-loop\n          for (let i = 0; i < parameters.length; i++) {\n            const paramType = this.getSQLTypeFromJsType(parameters[i], connection.lib.TYPES);\n            request.addParameter(String(i + 1), paramType.type, paramType.value, paramType.typeOptions);\n          }\n        } else {\n          forOwn(parameters, (parameter, parameterName) => {\n            const paramType = this.getSQLTypeFromJsType(parameter, connection.lib.TYPES);\n            request.addParameter(parameterName, paramType.type, paramType.value, paramType.typeOptions);\n          });\n        }\n\n      }\n\n      request.on('row', columns => {\n        rows.push(columns);\n      });\n\n      connection.execSql(request);\n    });\n\n    let rows;\n    let rowCount;\n\n    try {\n      [rows, rowCount] = await query;\n    } catch (error) {\n      error.sql = sql;\n      error.parameters = parameters;\n\n      throw this.formatError(error);\n    }\n\n    complete();\n\n    if (Array.isArray(rows)) {\n      const dialect = this.sequelize.dialect;\n      rows = rows.map(columns => {\n        const row = {};\n        for (const column of columns) {\n          const parser = dialect.getParserForDatabaseDataType(column.metadata.type.type);\n          let value = column.value;\n\n          if (value != null && parser) {\n            value = parser(value);\n          }\n\n          row[column.metadata.colName] = value;\n        }\n\n        return row;\n      });\n    }\n\n    return this.formatResults(rows, rowCount);\n  }\n\n  run(sql, parameters) {\n    return this.connection.queue.enqueue(() => this._run(this.connection, sql, parameters));\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   * @param {Array} data - The result of the query execution.\n   * @param {number} rowCount\n   * @private\n   * @example\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   */\n  formatResults(data, rowCount) {\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      return [this.instance || data, rowCount];\n    }\n\n    if (this.isDescribeQuery()) {\n      const result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace('(\\'', '').replace('\\')', '').replaceAll('\\'', '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Constraint === 'PRIMARY KEY',\n          autoIncrement: _result.IsIdentity === 1,\n          comment: _result.Comment,\n        };\n\n        if (\n          result[_result.Name].type.includes('CHAR')\n          && _result.Length\n        ) {\n          if (_result.Length === -1) {\n            result[_result.Name].type += '(MAX)';\n          } else {\n            result[_result.Name].type += `(${_result.Length})`;\n          }\n        }\n      }\n\n      return result;\n    }\n\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n\n    if (this.isBulkUpdateQuery()) {\n      if (this.options.returning) {\n        return this.handleSelectQuery(data);\n      }\n\n      return rowCount;\n    }\n\n    if (this.isBulkDeleteQuery()) {\n      return data[0] ? data[0].AFFECTEDROWS : 0;\n    }\n\n    if (this.isUpsertQuery()) {\n      // if this was an upsert and no data came back, that means the record exists, but the update was a noop.\n      // return the current instance and mark it as an \"not an insert\".\n      if (data && data.length === 0) {\n        return [this.instance || data, false];\n      }\n\n      this.handleInsertQuery(data);\n\n      return [this.instance || data, data[0].$action === 'INSERT'];\n    }\n\n    if (this.isUpdateQuery()) {\n      return [this.instance || data, rowCount];\n    }\n\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n\n    if (this.isRawQuery()) {\n      return [data, rowCount];\n    }\n\n    return data;\n  }\n\n  formatError(err) {\n    let match;\n\n    match = err.message.match(/Violation of (?:UNIQUE|PRIMARY) KEY constraint '([^']*)'\\. Cannot insert duplicate key in object '.*'\\.(:? The duplicate key value is \\((.*)\\).)?/s);\n    match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'\\.(:? The duplicate key value is \\((.*)\\).)?/s);\n    if (match && match.length > 1) {\n      let fields = {};\n      const uniqueKey = this.model && this.model.getIndexes().find(index => index.unique && index.name === match[1]);\n\n      let message = 'Validation error';\n\n      if (uniqueKey && Boolean(uniqueKey.msg)) {\n        message = uniqueKey.msg;\n      }\n\n      if (match[3]) {\n        const values = match[3].split(',').map(part => part.trim());\n        if (uniqueKey) {\n          fields = zipObject(uniqueKey.fields, values);\n        } else {\n          fields[match[1]] = match[3];\n        }\n      }\n\n      const errors = [];\n      forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(\n          this.getUniqueConstraintErrorMessage(field),\n          'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n          field,\n          value,\n          this.instance,\n          'not_unique',\n        ));\n      });\n\n      const uniqueConstraintError = new sequelizeErrors.UniqueConstraintError({ message, errors, cause: err, fields });\n      if (err.errors?.length > 0) {\n        return new sequelizeErrors.AggregateError([...err.errors, uniqueConstraintError]);\n      }\n\n      return uniqueConstraintError;\n    }\n\n    match = err.message.match(/The (?:DELETE|INSERT|MERGE|UPDATE) statement conflicted with the (?:FOREIGN KEY|REFERENCE) constraint \"(.*)\"\\. The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'\\./);\n    if (match && match.length > 1) {\n      const fkConstraintError = new sequelizeErrors.ForeignKeyConstraintError({\n        index: match[1],\n        cause: err,\n        table: match[3],\n        fields: [match[4]],\n      });\n\n      if (err.errors?.length > 0) {\n        return new sequelizeErrors.AggregateError([...err.errors, fkConstraintError]);\n      }\n\n      return fkConstraintError;\n    }\n\n    if (err.errors?.length > 0) {\n      let firstError;\n      for (const [index, error] of err.errors.entries()) {\n        match = error.message.match(/Could not (?:create|drop) constraint(?: or index)?\\. See previous errors\\./);\n        if (match && match.length > 0) {\n          let constraint = err.sql.match(/(?:constraint|index) \\[(.+?)]/i);\n          constraint = constraint ? constraint[1] : undefined;\n          let table = err.sql.match(/table \\[(.+?)]/i);\n          table = table ? table[1] : undefined;\n\n          firstError = new sequelizeErrors.UnknownConstraintError({\n            message: err.errors[index - 1].message,\n            constraint,\n            table,\n            cause: err,\n          });\n        }\n      }\n\n      if (firstError) {\n        return new sequelizeErrors.AggregateError([...err.errors, firstError]);\n      }\n\n      return new sequelizeErrors.AggregateError(err.errors);\n    }\n\n    return new sequelizeErrors.DatabaseError(err);\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith('select c.column_name as \\'name\\', c.data_type as \\'type\\', c.is_nullable as \\'isnull\\'');\n    result = result || this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n\n    return result;\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    const indexes = data.reduce((acc, curr) => {\n      if (acc.has(curr.index_name)) {\n        const index = acc.get(curr.index_name);\n        if (curr.is_included_column) {\n          index.includes.push(curr.column_name);\n        } else {\n          index.fields.push({\n            attribute: curr.column_name,\n            length: undefined,\n            order: curr.is_descending_key ? 'DESC' : 'ASC',\n            collate: undefined,\n          });\n        }\n\n        return acc;\n      }\n\n      acc.set(curr.index_name, {\n        primary: curr.is_primary_key,\n        fields: curr.is_included_column\n          ? []\n          : [\n            {\n              attribute: curr.column_name,\n              length: undefined,\n              order: curr.is_descending_key ? 'DESC' : 'ASC',\n              collate: undefined,\n            },\n          ],\n        includes: curr.is_included_column ? [curr.column_name] : [],\n        name: curr.index_name,\n        tableName: undefined,\n        unique: curr.is_unique,\n        type: null,\n      });\n\n      return acc;\n    }, new Map());\n\n    return Array.from(indexes.values());\n  }\n\n  handleInsertQuery(insertedRows, metaData) {\n    if (!this.instance?.dataValues) {\n      return;\n    }\n\n    // map column names to attribute names\n    insertedRows = insertedRows.map(row => {\n      const attributes = Object.create(null);\n\n      for (const columnName of Object.keys(row)) {\n        const attributeName = getAttributeName(this.model, columnName) ?? columnName;\n\n        attributes[attributeName] = row[columnName];\n      }\n\n      return attributes;\n    });\n\n    insertedRows = this._parseDataArrayByType(insertedRows, this.model, this.options.includeMap);\n\n    const autoIncrementAttributeName = this.model.autoIncrementAttribute;\n    let id = null;\n\n    id = id || insertedRows && insertedRows[0][this.getInsertIdField()];\n    id = id || metaData && metaData[this.getInsertIdField()];\n    id = id || insertedRows && insertedRows[0][autoIncrementAttributeName];\n\n    // assign values to existing instance\n    this.instance[autoIncrementAttributeName] = id;\n    for (const attributeName of Object.keys(insertedRows[0])) {\n      this.instance.dataValues[attributeName] = insertedRows[0][attributeName];\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["rows", "rowCount", "forOwn", "zipObject"]
}
