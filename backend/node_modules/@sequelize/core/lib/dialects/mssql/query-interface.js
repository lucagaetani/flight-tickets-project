"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var query_interface_exports = {};
__export(query_interface_exports, {
  MsSqlQueryInterface: () => MsSqlQueryInterface
});
module.exports = __toCommonJS(query_interface_exports);
var import_query_builder_utils = require("../../utils/query-builder-utils");
var import_sql = require("../../utils/sql");
var import_intersection = __toESM(require("lodash/intersection"));
const { QueryTypes } = require("../../query-types");
const { Op } = require("../../operators");
const { AbstractQueryInterface } = require("../abstract/query-interface");
class MsSqlQueryInterface extends AbstractQueryInterface {
  /**
  * A wrapper that fixes MSSQL's inability to cleanly remove columns from existing tables if they have a default constraint.
  *
  * @override
  */
  async removeColumn(tableName, columnName, options) {
    const allConstraints = await this.showConstraints(tableName, { ...options, columnName });
    const constraints = allConstraints.filter((constraint) => ["DEFAULT", "FOREIGN KEY", "PRIMARY KEY"].includes(constraint.constraintType));
    await Promise.all(constraints.map((constraint) => this.removeConstraint(tableName, constraint.constraintName, options)));
    await super.removeColumn(tableName, columnName, options);
  }
  /**
    * @override
    */
  async bulkInsert(tableName, records, options, attributes) {
    if (records.length > 1e3 && !options.transaction) {
      throw new Error(`MSSQL doesn't allow for inserting more than 1,000 rows at a time, so Sequelize executes the insert as multiple queries. Please run this in a transaction to ensure safe rollbacks`);
    }
    return super.bulkInsert(tableName, records, options, attributes);
  }
  /**
   * @override
   */
  async upsert(tableName, insertValues, updateValues, where, options) {
    if (options.bind) {
      (0, import_sql.assertNoReservedBind)(options.bind);
    }
    const model = options.model;
    const wheres = [];
    options = { ...options };
    if (!(0, import_query_builder_utils.isWhereEmpty)(where)) {
      wheres.push(where);
    }
    const uniqueColumnNames = Object.values(model.getIndexes()).filter((c) => c.unique && c.fields.length > 0).map((c) => c.fields);
    const attributes = Object.keys(insertValues);
    for (const index of uniqueColumnNames) {
      if ((0, import_intersection.default)(attributes, index).length === index.length) {
        where = {};
        for (const field of index) {
          where[field] = insertValues[field];
        }
        wheres.push(where);
      }
    }
    where = { [Op.or]: wheres };
    options.type = QueryTypes.UPSERT;
    options.raw = true;
    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);
    delete options.replacements;
    return await this.sequelize.queryRaw(sql, options);
  }
}
//# sourceMappingURL=query-interface.js.map
