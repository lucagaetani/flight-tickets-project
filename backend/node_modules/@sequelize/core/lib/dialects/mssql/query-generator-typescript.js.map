{
  "version": 3,
  "sources": ["../../../src/dialects/mssql/query-generator-typescript.ts"],
  "sourcesContent": ["import type { Expression } from '../../sequelize';\nimport { rejectInvalidOptions } from '../../utils/check';\nimport { joinSQLFragments } from '../../utils/join-sql-fragments';\nimport { buildJsonPath } from '../../utils/json';\nimport { generateIndexName } from '../../utils/string';\nimport { AbstractQueryGenerator } from '../abstract/query-generator';\nimport { REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS } from '../abstract/query-generator-typescript';\nimport type { EscapeOptions, RemoveIndexQueryOptions, TableNameOrModel } from '../abstract/query-generator-typescript';\nimport type {\n  ListSchemasQueryOptions,\n  ListTablesQueryOptions,\n  ShowConstraintsQueryOptions,\n} from '../abstract/query-generator.types';\nimport type { ConstraintType } from '../abstract/query-interface.types';\n\nconst REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS = new Set<keyof RemoveIndexQueryOptions>(['ifExists']);\n\n/**\n * Temporary class to ease the TypeScript migration\n */\nexport class MsSqlQueryGeneratorTypeScript extends AbstractQueryGenerator {\n  protected _getTechnicalSchemaNames() {\n    return [\n      'db_accessadmin',\n      'db_backupoperator',\n      'db_datareader',\n      'db_datawriter',\n      'db_ddladmin',\n      'db_denydatareader',\n      'db_denydatawriter',\n      'db_owner',\n      'db_securityadmin',\n      'INFORMATION_SCHEMA',\n      'sys',\n    ];\n  }\n\n  listSchemasQuery(options?: ListSchemasQueryOptions) {\n    const schemasToSkip = ['dbo', 'guest', ...this._getTechnicalSchemaNames()];\n\n    if (options?.skip) {\n      schemasToSkip.push(...options.skip);\n    }\n\n    return joinSQLFragments([\n      'SELECT [name] AS [schema] FROM sys.schemas',\n      `WHERE [name] NOT IN (${schemasToSkip.map(schema => this.escape(schema)).join(', ')})`,\n    ]);\n  }\n\n  describeTableQuery(tableName: TableNameOrModel) {\n    const table = this.extractTableDetails(tableName);\n\n    return joinSQLFragments([\n      'SELECT',\n      `c.COLUMN_NAME AS 'Name',`,\n      `c.DATA_TYPE AS 'Type',`,\n      `c.CHARACTER_MAXIMUM_LENGTH AS 'Length',`,\n      `c.IS_NULLABLE as 'IsNull',`,\n      `COLUMN_DEFAULT AS 'Default',`,\n      `pk.CONSTRAINT_TYPE AS 'Constraint',`,\n      `COLUMNPROPERTY(OBJECT_ID(c.TABLE_SCHEMA+'.'+c.TABLE_NAME), c.COLUMN_NAME, 'IsIdentity') as 'IsIdentity',`,\n      `CAST(prop.value AS NVARCHAR) AS 'Comment'`,\n      'FROM',\n      'INFORMATION_SCHEMA.TABLES t',\n      'INNER JOIN',\n      'INFORMATION_SCHEMA.COLUMNS c ON t.TABLE_NAME = c.TABLE_NAME AND t.TABLE_SCHEMA = c.TABLE_SCHEMA',\n      'LEFT JOIN (SELECT tc.table_schema, tc.table_name,',\n      'cu.column_name, tc.CONSTRAINT_TYPE',\n      'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc',\n      'JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE  cu',\n      'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name',\n      'and tc.constraint_name=cu.constraint_name',\n      `and tc.CONSTRAINT_TYPE='PRIMARY KEY') pk`,\n      'ON pk.table_schema=c.table_schema',\n      'AND pk.table_name=c.table_name',\n      'AND pk.column_name=c.column_name',\n      'INNER JOIN sys.columns AS sc',\n      `ON sc.object_id = object_id(t.table_schema + '.' + t.table_name) AND sc.name = c.column_name`,\n      'LEFT JOIN sys.extended_properties prop ON prop.major_id = sc.object_id',\n      'AND prop.minor_id = sc.column_id',\n      `AND prop.name = 'MS_Description'`,\n      `WHERE t.TABLE_NAME = ${this.escape(table.tableName)}`,\n      `AND t.TABLE_SCHEMA = ${this.escape(table.schema!)}`,\n    ]);\n  }\n\n  listTablesQuery(options?: ListTablesQueryOptions) {\n    return joinSQLFragments([\n      'SELECT t.name AS [tableName], s.name AS [schema]',\n      `FROM sys.tables t INNER JOIN sys.schemas s ON t.schema_id = s.schema_id WHERE t.type = 'U'`,\n      options?.schema\n        ? `AND s.name = ${this.escape(options.schema)}`\n        : `AND s.name NOT IN (${this._getTechnicalSchemaNames().map(schema => this.escape(schema)).join(', ')})`,\n      'ORDER BY s.name, t.name',\n    ]);\n  }\n\n  private _getConstraintType(type: ConstraintType): string {\n    switch (type) {\n      case 'CHECK':\n        return 'CHECK_CONSTRAINT';\n      case 'DEFAULT':\n        return 'DEFAULT_CONSTRAINT';\n      case 'FOREIGN KEY':\n        return 'FOREIGN_KEY_CONSTRAINT';\n      case 'PRIMARY KEY':\n        return 'PRIMARY_KEY_CONSTRAINT';\n      case 'UNIQUE':\n        return 'UNIQUE_CONSTRAINT';\n      default:\n        throw new Error(`Constraint type ${type} is not supported`);\n    }\n  }\n\n  showConstraintsQuery(tableName: TableNameOrModel, options?: ShowConstraintsQueryOptions) {\n    const table = this.extractTableDetails(tableName);\n\n    return joinSQLFragments([\n      'SELECT DB_NAME() AS constraintCatalog,',\n      's.[name] AS constraintSchema,',\n      'c.constraintName,',\n      `REPLACE(LEFT(c.constraintType, CHARINDEX('_CONSTRAINT', c.constraintType) - 1), '_', ' ') AS constraintType,`,\n      'DB_NAME() AS tableCatalog,',\n      's.[name] AS tableSchema,',\n      't.[name] AS tableName,',\n      'c.columnNames,',\n      'c.referencedTableSchema,',\n      'c.referencedTableName,',\n      'c.referencedColumnNames,',\n      'c.deleteAction,',\n      'c.updateAction,',\n      'c.definition',\n      'FROM sys.tables t INNER JOIN sys.schemas s ON t.schema_id = s.schema_id',\n      'INNER JOIN (',\n      'SELECT kc.[name] AS constraintName, kc.[type_desc] AS constraintType, kc.[parent_object_id] AS constraintTableId, c.[name] AS columnNames, null as referencedTableSchema, null AS referencedTableName',\n      ', null AS referencedColumnNames, null AS deleteAction, null AS updateAction, null AS definition',\n      'FROM sys.key_constraints kc LEFT JOIN sys.indexes i ON kc.name = i.name',\n      'LEFT JOIN sys.index_columns ic ON ic.index_id = i.index_id AND ic.object_id = kc.parent_object_id',\n      'LEFT JOIN sys.columns c ON c.column_id = ic.column_id AND c.object_id = kc.parent_object_id UNION ALL',\n      'SELECT [name] AS constraintName, [type_desc] AS constraintType, [parent_object_id] AS constraintTableId, null AS columnNames, null as referencedTableSchema, null AS referencedTableName',\n      ', null AS referencedColumnNames, null AS deleteAction, null AS updateAction, [definition] FROM sys.check_constraints c UNION ALL',\n      'SELECT dc.[name] AS constraintName, dc.[type_desc] AS constraintType, dc.[parent_object_id] AS constraintTableId, c.[name] AS columnNames, null as referencedTableSchema, null AS referencedTableName',\n      ', null AS referencedColumnNames, null AS deleteAction, null AS updateAction, [definition] FROM sys.default_constraints dc',\n      'INNER JOIN sys.columns c ON dc.parent_column_id = c.column_id AND dc.parent_object_id = c.object_id UNION ALL',\n      'SELECT k.[name] AS constraintName, k.[type_desc] AS constraintType, k.[parent_object_id] AS constraintTableId, fcol.[name] AS columnNames, OBJECT_SCHEMA_NAME(k.[referenced_object_id]) as referencedTableSchema',\n      ', OBJECT_NAME(k.[referenced_object_id]) AS referencedTableName, rcol.[name] AS referencedColumnNames, k.[delete_referential_action_desc] AS deleteAction',\n      ', k.[update_referential_action_desc] AS updateAction, null AS definition FROM sys.foreign_keys k INNER JOIN sys.foreign_key_columns c ON k.[object_id] = c.constraint_object_id',\n      'INNER JOIN sys.columns fcol ON c.parent_column_id = fcol.column_id AND c.parent_object_id = fcol.object_id',\n      'INNER JOIN sys.columns rcol ON c.referenced_column_id = rcol.column_id AND c.referenced_object_id = rcol.object_id',\n      ') c ON t.object_id = c.constraintTableId',\n      `WHERE s.name = ${this.escape(table.schema)} AND t.name = ${this.escape(table.tableName)}`,\n      options?.columnName ? `AND c.columnNames = ${this.escape(options.columnName)}` : '',\n      options?.constraintName ? `AND c.constraintName = ${this.escape(options.constraintName)}` : '',\n      options?.constraintType ? `AND c.constraintType = ${this.escape(this._getConstraintType(options.constraintType))}` : '',\n      'ORDER BY c.constraintName',\n    ]);\n  }\n\n  showIndexesQuery(tableName: TableNameOrModel) {\n    const table = this.extractTableDetails(tableName);\n    const objectId = table?.schema ? `${table.schema}.${table.tableName}` : `${table.tableName}`;\n\n    return joinSQLFragments([\n      'SELECT',\n      'I.[name] AS [index_name],',\n      'I.[type_desc] AS [index_type],',\n      'C.[name] AS [column_name],',\n      'IC.[is_descending_key],',\n      'IC.[is_included_column],',\n      'I.[is_unique],',\n      'I.[is_primary_key],',\n      'I.[is_unique_constraint]',\n      'FROM sys.indexes I',\n      'INNER JOIN sys.index_columns IC ON IC.index_id = I.index_id AND IC.object_id = I.object_id',\n      'INNER JOIN sys.columns C ON IC.object_id = C.object_id AND IC.column_id = C.column_id',\n      `WHERE I.[object_id] = OBJECT_ID(${this.escape(objectId)}) ORDER BY I.[name];`,\n    ]);\n  }\n\n  removeIndexQuery(\n    tableName: TableNameOrModel,\n    indexNameOrAttributes: string | string[],\n    options?: RemoveIndexQueryOptions,\n  ) {\n    if (options) {\n      rejectInvalidOptions(\n        'removeIndexQuery',\n        this.dialect.name,\n        REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS,\n        REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    let indexName: string;\n    if (Array.isArray(indexNameOrAttributes)) {\n      const table = this.extractTableDetails(tableName);\n      indexName = generateIndexName(table, { fields: indexNameOrAttributes });\n    } else {\n      indexName = indexNameOrAttributes;\n    }\n\n    return joinSQLFragments([\n      'DROP INDEX',\n      options?.ifExists ? 'IF EXISTS' : '',\n      this.quoteIdentifier(indexName),\n      'ON',\n      this.quoteTable(tableName),\n    ]);\n  }\n\n  jsonPathExtractionQuery(sqlExpression: string, path: ReadonlyArray<number | string>, unquote: boolean): string {\n    if (!unquote) {\n      throw new Error(`JSON Paths are not supported in ${this.dialect.name} without unquoting the JSON value.`);\n    }\n\n    return `JSON_VALUE(${sqlExpression}, ${this.escape(buildJsonPath(path))})`;\n  }\n\n  formatUnquoteJson(arg: Expression, options?: EscapeOptions) {\n    return `JSON_VALUE(${this.escape(arg, options)})`;\n  }\n\n  versionQuery() {\n    // Uses string manipulation to convert the MS Maj.Min.Patch.Build to semver Maj.Min.Patch\n    return `DECLARE @ms_ver NVARCHAR(20);\nSET @ms_ver = REVERSE(CONVERT(NVARCHAR(20), SERVERPROPERTY('ProductVersion')));\nSELECT REVERSE(SUBSTRING(@ms_ver, CHARINDEX('.', @ms_ver)+1, 20)) AS 'version'`;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
