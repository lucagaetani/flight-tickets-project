{
  "version": 3,
  "sources": ["../../../src/dialects/mssql/data-types.db.ts"],
  "sourcesContent": ["import dayjs from 'dayjs';\nimport type { MssqlDialect } from './index.js';\n\n/**\n * First pass of DB value parsing: Parses based on the MSSQL Type ID.\n * If a Sequelize DataType is specified, the value is then passed to {@link DataTypes.ABSTRACT#parseDatabaseValue}.\n *\n * @param dialect\n */\nexport function registerMsSqlDbDataTypeParsers(dialect: MssqlDialect) {\n  dialect.registerDataTypeParser(['GUIDN'], (value: unknown) => {\n    if (typeof value !== 'string') {\n      return value;\n    }\n\n    // unify with other dialects by forcing lowercase on UUID strings.\n    return value.toLowerCase();\n  });\n\n  dialect.registerDataTypeParser(['TIMEN'], (value: unknown) => {\n    if (value instanceof Date) {\n      // We lose precision past the millisecond because Tedious pre-parses the value.\n      // This could be fixed by https://github.com/tediousjs/tedious/issues/678\n      return dayjs.utc(value).format('HH:mm:ss.SSS');\n    }\n\n    return value;\n  });\n\n  dialect.registerDataTypeParser(['DATETIMEOFFSETN'], (value: unknown) => {\n    if (value instanceof Date) {\n      // Tedious pre-parses the value as a Date, but we want\n      // to provide a string in raw queries and let the user decide on which date library to use.\n      // As a result, Tedious parses the date, then we serialize it, then our Date data type parses it again.\n      // This is inefficient but could be fixed by https://github.com/tediousjs/tedious/issues/678\n      // We also lose precision past the millisecond because Tedious pre-parses the value.\n      return dayjs.utc(value).format('YYYY-MM-DD HH:mm:ss.SSS+00');\n    }\n\n    return value;\n  });\n\n  dialect.registerDataTypeParser(['DATEN'], (value: unknown) => {\n    if (value instanceof Date) {\n      return dayjs.utc(value).format('YYYY-MM-DD');\n    }\n\n    return value;\n  });\n\n  dialect.registerDataTypeParser(['DECIMAL', 'DECIMALN'], (value: unknown) => {\n    // Tedious returns DECIMAL as a JS number, which is not an appropriate type for a decimal.\n    return String(value);\n  });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AASX,SAAS,+BAA+B,SAAuB;AACpE,UAAQ,uBAAuB,CAAC,OAAO,GAAG,CAAC,UAAmB;AAC5D,QAAI,OAAO,UAAU,UAAU;AAC7B,aAAO;AAAA,IACT;AAGA,WAAO,MAAM,YAAY;AAAA,EAC3B,CAAC;AAED,UAAQ,uBAAuB,CAAC,OAAO,GAAG,CAAC,UAAmB;AAC5D,QAAI,iBAAiB,MAAM;AAGzB,aAAO,aAAAA,QAAM,IAAI,KAAK,EAAE,OAAO,cAAc;AAAA,IAC/C;AAEA,WAAO;AAAA,EACT,CAAC;AAED,UAAQ,uBAAuB,CAAC,iBAAiB,GAAG,CAAC,UAAmB;AACtE,QAAI,iBAAiB,MAAM;AAMzB,aAAO,aAAAA,QAAM,IAAI,KAAK,EAAE,OAAO,4BAA4B;AAAA,IAC7D;AAEA,WAAO;AAAA,EACT,CAAC;AAED,UAAQ,uBAAuB,CAAC,OAAO,GAAG,CAAC,UAAmB;AAC5D,QAAI,iBAAiB,MAAM;AACzB,aAAO,aAAAA,QAAM,IAAI,KAAK,EAAE,OAAO,YAAY;AAAA,IAC7C;AAEA,WAAO;AAAA,EACT,CAAC;AAED,UAAQ,uBAAuB,CAAC,WAAW,UAAU,GAAG,CAAC,UAAmB;AAE1E,WAAO,OAAO,KAAK;AAAA,EACrB,CAAC;AACH;",
  "names": ["dayjs"]
}
