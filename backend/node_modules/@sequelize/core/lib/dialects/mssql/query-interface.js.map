{
  "version": 3,
  "sources": ["../../../src/dialects/mssql/query-interface.js"],
  "sourcesContent": ["'use strict';\n\nimport { isWhereEmpty } from '../../utils/query-builder-utils';\nimport { assertNoReservedBind } from '../../utils/sql';\n\nimport intersection from 'lodash/intersection';\n\nconst { QueryTypes } = require('../../query-types');\nconst { Op } = require('../../operators');\nconst { AbstractQueryInterface } = require('../abstract/query-interface');\n\n/**\n * The interface that Sequelize uses to talk with MSSQL database\n */\nexport class MsSqlQueryInterface extends AbstractQueryInterface {\n  /**\n  * A wrapper that fixes MSSQL's inability to cleanly remove columns from existing tables if they have a default constraint.\n  *\n  * @override\n  */\n  async removeColumn(tableName, columnName, options) {\n    const allConstraints = await this.showConstraints(tableName, { ...options, columnName });\n    const constraints = allConstraints.filter(constraint => ['DEFAULT', 'FOREIGN KEY', 'PRIMARY KEY'].includes(constraint.constraintType));\n    await Promise.all(constraints.map(constraint => this.removeConstraint(tableName, constraint.constraintName, options)));\n\n    await super.removeColumn(tableName, columnName, options);\n  }\n\n  /**\n    * @override\n    */\n  async bulkInsert(tableName, records, options, attributes) {\n    // If more than 1,000 rows are inserted outside of a transaction, we can't guarantee safe rollbacks.\n    // See https://github.com/sequelize/sequelize/issues/15426\n    if (records.length > 1000 && !options.transaction) {\n      throw new Error(`MSSQL doesn't allow for inserting more than 1,000 rows at a time, so Sequelize executes the insert as multiple queries. Please run this in a transaction to ensure safe rollbacks`);\n    }\n\n    return super.bulkInsert(tableName, records, options, attributes);\n  }\n\n  /**\n   * @override\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    if (options.bind) {\n      assertNoReservedBind(options.bind);\n    }\n\n    const model = options.model;\n    const wheres = [];\n\n    options = { ...options };\n\n    if (!isWhereEmpty(where)) {\n      wheres.push(where);\n    }\n\n    // Lets combine unique keys and indexes into one\n    const uniqueColumnNames = Object.values(model.getIndexes()).filter(c => c.unique && c.fields.length > 0).map(c => c.fields);\n\n    const attributes = Object.keys(insertValues);\n    for (const index of uniqueColumnNames) {\n      if (intersection(attributes, index).length === index.length) {\n        where = {};\n        for (const field of index) {\n          where[field] = insertValues[field];\n        }\n\n        wheres.push(where);\n      }\n    }\n\n    where = { [Op.or]: wheres };\n\n    options.type = QueryTypes.UPSERT;\n    options.raw = true;\n\n    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n\n    // unlike bind, replacements are handled by QueryGenerator, not QueryRaw, and queryRaw will throw if we use the option\n    delete options.replacements;\n\n    return await this.sequelize.queryRaw(sql, options);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,iCAA6B;AAC7B,iBAAqC;AAErC,0BAAyB;AAEzB,MAAM,EAAE,WAAW,IAAI,QAAQ,mBAAmB;AAClD,MAAM,EAAE,GAAG,IAAI,QAAQ,iBAAiB;AACxC,MAAM,EAAE,uBAAuB,IAAI,QAAQ,6BAA6B;AAKjE,MAAM,4BAA4B,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM9D,MAAM,aAAa,WAAW,YAAY,SAAS;AACjD,UAAM,iBAAiB,MAAM,KAAK,gBAAgB,WAAW,EAAE,GAAG,SAAS,WAAW,CAAC;AACvF,UAAM,cAAc,eAAe,OAAO,gBAAc,CAAC,WAAW,eAAe,aAAa,EAAE,SAAS,WAAW,cAAc,CAAC;AACrI,UAAM,QAAQ,IAAI,YAAY,IAAI,gBAAc,KAAK,iBAAiB,WAAW,WAAW,gBAAgB,OAAO,CAAC,CAAC;AAErH,UAAM,MAAM,aAAa,WAAW,YAAY,OAAO;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,WAAW,WAAW,SAAS,SAAS,YAAY;AAGxD,QAAI,QAAQ,SAAS,OAAQ,CAAC,QAAQ,aAAa;AACjD,YAAM,IAAI,MAAM,mLAAmL;AAAA,IACrM;AAEA,WAAO,MAAM,WAAW,WAAW,SAAS,SAAS,UAAU;AAAA,EACjE;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,OAAO,WAAW,cAAc,cAAc,OAAO,SAAS;AAClE,QAAI,QAAQ,MAAM;AAChB,2CAAqB,QAAQ,IAAI;AAAA,IACnC;AAEA,UAAM,QAAQ,QAAQ;AACtB,UAAM,SAAS,CAAC;AAEhB,cAAU,EAAE,GAAG,QAAQ;AAEvB,QAAI,KAAC,yCAAa,KAAK,GAAG;AACxB,aAAO,KAAK,KAAK;AAAA,IACnB;AAGA,UAAM,oBAAoB,OAAO,OAAO,MAAM,WAAW,CAAC,EAAE,OAAO,OAAK,EAAE,UAAU,EAAE,OAAO,SAAS,CAAC,EAAE,IAAI,OAAK,EAAE,MAAM;AAE1H,UAAM,aAAa,OAAO,KAAK,YAAY;AAC3C,eAAW,SAAS,mBAAmB;AACrC,cAAI,oBAAAA,SAAa,YAAY,KAAK,EAAE,WAAW,MAAM,QAAQ;AAC3D,gBAAQ,CAAC;AACT,mBAAW,SAAS,OAAO;AACzB,gBAAM,KAAK,IAAI,aAAa,KAAK;AAAA,QACnC;AAEA,eAAO,KAAK,KAAK;AAAA,MACnB;AAAA,IACF;AAEA,YAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,OAAO;AAE1B,YAAQ,OAAO,WAAW;AAC1B,YAAQ,MAAM;AAEd,UAAM,MAAM,KAAK,eAAe,YAAY,WAAW,cAAc,cAAc,OAAO,OAAO,OAAO;AAGxG,WAAO,QAAQ;AAEf,WAAO,MAAM,KAAK,UAAU,SAAS,KAAK,OAAO;AAAA,EACnD;AACF;",
  "names": ["intersection"]
}
