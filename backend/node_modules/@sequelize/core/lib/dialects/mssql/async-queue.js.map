{
  "version": 3,
  "sources": ["../../../src/dialects/mssql/async-queue.ts"],
  "sourcesContent": ["import { BaseError } from '../../errors/base-error';\nimport { ConnectionError } from '../../errors/connection-error';\n\n/**\n * Thrown when a connection to a database is closed while an operation is in progress\n */\nexport class AsyncQueueError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'SequelizeAsyncQueueError';\n  }\n}\n\nexport class AsyncQueue {\n  previous: Promise<unknown>;\n  closed: boolean;\n  rejectCurrent: (reason?: any) => void;\n\n  constructor() {\n    this.previous = Promise.resolve();\n    this.closed = false;\n    this.rejectCurrent = () => {\n      /** do nothing */\n    };\n  }\n\n  close() {\n    this.closed = true;\n    this.rejectCurrent(\n      new ConnectionError(\n        new AsyncQueueError(\n          'the connection was closed before this query could finish executing',\n        ),\n      ),\n    );\n  }\n\n  async enqueue(asyncFunction: (...args: any[]) => Promise<unknown>) {\n    // This outer promise might seems superflous since down below we return asyncFunction().then(resolve, reject).\n    // However, this ensures that this.previous will never be a rejected promise so the queue will\n    // always keep going, while still communicating rejection from asyncFunction to the user.\n    return new Promise((resolve, reject) => {\n      this.previous = this.previous.then(async () => {\n        this.rejectCurrent = reject;\n        if (this.closed) {\n          return reject(\n            new ConnectionError(\n              new AsyncQueueError(\n                'the connection was closed before this query could be executed',\n              ),\n            ),\n          );\n        }\n\n        return asyncFunction().then(resolve, reject);\n      });\n    });\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAA0B;AAC1B,8BAAgC;AAKzB,MAAM,wBAAwB,4BAAU;AAAA,EAC7C,YAAY,SAAiB;AAC3B,UAAM,OAAO;AACb,SAAK,OAAO;AAAA,EACd;AACF;AAEO,MAAM,WAAW;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AAAA,EAEA,cAAc;AACZ,SAAK,WAAW,QAAQ,QAAQ;AAChC,SAAK,SAAS;AACd,SAAK,gBAAgB,MAAM;AAAA,IAE3B;AAAA,EACF;AAAA,EAEA,QAAQ;AACN,SAAK,SAAS;AACd,SAAK;AAAA,MACH,IAAI;AAAA,QACF,IAAI;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,QAAQ,eAAqD;AAIjE,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,WAAK,WAAW,KAAK,SAAS,KAAK,YAAY;AAC7C,aAAK,gBAAgB;AACrB,YAAI,KAAK,QAAQ;AACf,iBAAO;AAAA,YACL,IAAI;AAAA,cACF,IAAI;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAEA,eAAO,cAAc,EAAE,KAAK,SAAS,MAAM;AAAA,MAC7C,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AACF;",
  "names": []
}
