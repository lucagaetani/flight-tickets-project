{
  "version": 3,
  "sources": ["../../../src/dialects/ibmi/connection-manager.ts"],
  "sourcesContent": ["import type { NodeOdbcError, Connection as OdbcConnection } from 'odbc';\nimport { ConnectionRefusedError } from '../../errors/index.js';\nimport type { ConnectionOptions, Sequelize } from '../../sequelize.js';\nimport { logger } from '../../utils/logger';\nimport type { Connection } from '../abstract/connection-manager';\nimport { AbstractConnectionManager } from '../abstract/connection-manager';\nimport type { IBMiDialect } from './index.js';\n\nconst debug = logger.debugContext('connection:ibmi');\n\nexport interface IBMiConnection extends Connection, OdbcConnection {\n  // properties of ObdcConnection, but not declared in their typings\n  connected: boolean;\n}\n\n// TODO: once the code has been split into packages, we won't need to lazy load this anymore\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\ntype Lib = typeof import('odbc');\n\nexport class IBMiConnectionManager extends AbstractConnectionManager<IBMiConnection> {\n  private readonly lib: Lib;\n\n  constructor(dialect: IBMiDialect, sequelize: Sequelize) {\n    super(dialect, sequelize);\n\n    this.lib = this._loadDialectModule('odbc') as Lib;\n  }\n\n  async connect(config: ConnectionOptions): Promise<IBMiConnection> {\n    // Combine passed connection options into a connection string\n    // config.port has no real meaning for this ODBC Driver\n    const connectionKeywords = [];\n    if (config.dialectOptions && config.dialectOptions.odbcConnectionString) {\n      connectionKeywords.push(config.dialectOptions.odbcConnectionString);\n    }\n\n    // 'database' doesn't make sense in this context, but it is mapped here to\n    // DSN, which is a close fit\n    if (config.database) {\n      connectionKeywords.push(`DSN=${config.database}`);\n    }\n\n    if (config.username) {\n      connectionKeywords.push(`UID=${config.username}`);\n    }\n\n    if (config.password) {\n      connectionKeywords.push(`PWD=${config.password}`);\n    }\n\n    if (config.host) {\n      connectionKeywords.push(`SYSTEM=${config.host}`);\n    }\n\n    let connectionString: string = connectionKeywords.join(';');\n    if (!connectionString.endsWith(';')) {\n      connectionString += ';';\n    }\n\n    let connection;\n    try {\n      connection = await this.lib.connect(connectionString) as IBMiConnection;\n    } catch (error) {\n      if (!(error instanceof Error)) {\n        throw error;\n      }\n\n      if (error.toString().includes('Error connecting to the database')) {\n        throw new ConnectionRefusedError(error);\n      }\n\n      throw error;\n    }\n\n    return connection;\n  }\n\n  async disconnect(connection: IBMiConnection): Promise<void> {\n    if (!this.validate(connection)) {\n      debug('Tried to disconnect, but connection was already closed.');\n\n      return;\n    }\n\n    await new Promise<void>((resolve, reject) => {\n      connection.close((error: NodeOdbcError) => {\n        if (error) {\n          return void reject(error);\n        }\n\n        resolve();\n\n        // eslint-disable-next-line unicorn/no-useless-undefined -- bad typings in OBDC\n        return undefined;\n      });\n    });\n  }\n\n  validate(connection: IBMiConnection): boolean {\n    return connection.connected;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,oBAAuC;AAEvC,oBAAuB;AAEvB,gCAA0C;AAG1C,MAAM,QAAQ,qBAAO,aAAa,iBAAiB;AAW5C,MAAM,8BAA8B,oDAA0C;AAAA,EAClE;AAAA,EAEjB,YAAY,SAAsB,WAAsB;AACtD,UAAM,SAAS,SAAS;AAExB,SAAK,MAAM,KAAK,mBAAmB,MAAM;AAAA,EAC3C;AAAA,EAEA,MAAM,QAAQ,QAAoD;AAGhE,UAAM,qBAAqB,CAAC;AAC5B,QAAI,OAAO,kBAAkB,OAAO,eAAe,sBAAsB;AACvE,yBAAmB,KAAK,OAAO,eAAe,oBAAoB;AAAA,IACpE;AAIA,QAAI,OAAO,UAAU;AACnB,yBAAmB,KAAK,OAAO,OAAO,UAAU;AAAA,IAClD;AAEA,QAAI,OAAO,UAAU;AACnB,yBAAmB,KAAK,OAAO,OAAO,UAAU;AAAA,IAClD;AAEA,QAAI,OAAO,UAAU;AACnB,yBAAmB,KAAK,OAAO,OAAO,UAAU;AAAA,IAClD;AAEA,QAAI,OAAO,MAAM;AACf,yBAAmB,KAAK,UAAU,OAAO,MAAM;AAAA,IACjD;AAEA,QAAI,mBAA2B,mBAAmB,KAAK,GAAG;AAC1D,QAAI,CAAC,iBAAiB,SAAS,GAAG,GAAG;AACnC,0BAAoB;AAAA,IACtB;AAEA,QAAI;AACJ,QAAI;AACF,mBAAa,MAAM,KAAK,IAAI,QAAQ,gBAAgB;AAAA,IACtD,SAAS,OAAP;AACA,UAAI,EAAE,iBAAiB,QAAQ;AAC7B,cAAM;AAAA,MACR;AAEA,UAAI,MAAM,SAAS,EAAE,SAAS,kCAAkC,GAAG;AACjE,cAAM,IAAI,qCAAuB,KAAK;AAAA,MACxC;AAEA,YAAM;AAAA,IACR;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,WAAW,YAA2C;AAC1D,QAAI,CAAC,KAAK,SAAS,UAAU,GAAG;AAC9B,YAAM,yDAAyD;AAE/D;AAAA,IACF;AAEA,UAAM,IAAI,QAAc,CAAC,SAAS,WAAW;AAC3C,iBAAW,MAAM,CAAC,UAAyB;AACzC,YAAI,OAAO;AACT,iBAAO,KAAK,OAAO,KAAK;AAAA,QAC1B;AAEA,gBAAQ;AAGR,eAAO;AAAA,MACT,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EAEA,SAAS,YAAqC;AAC5C,WAAO,WAAW;AAAA,EACpB;AACF;",
  "names": []
}
