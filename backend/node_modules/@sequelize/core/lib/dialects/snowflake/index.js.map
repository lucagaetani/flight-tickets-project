{
  "version": 3,
  "sources": ["../../../src/dialects/snowflake/index.ts"],
  "sourcesContent": ["import type { Sequelize } from '../../sequelize.js';\nimport { createUnspecifiedOrderedBindCollector } from '../../utils/sql';\nimport { AbstractDialect } from '../abstract';\nimport { SnowflakeConnectionManager } from './connection-manager';\nimport * as DataTypes from './data-types.js';\nimport { SnowflakeQuery } from './query';\nimport { SnowflakeQueryGenerator } from './query-generator';\nimport { SnowflakeQueryInterface } from './query-interface';\n\nexport class SnowflakeDialect extends AbstractDialect {\n  static supports = AbstractDialect.extendSupport({\n    'VALUES ()': true,\n    'LIMIT ON UPDATE': true,\n    lock: true,\n    forShare: 'LOCK IN SHARE MODE',\n    settingIsolationLevelDuringTransaction: false,\n    inserts: {\n      ignoreDuplicates: ' IGNORE',\n      // disable for now, but could be enable by approach below\n      // https://stackoverflow.com/questions/54828745/how-to-migrate-on-conflict-do-nothing-from-postgresql-to-snowflake\n      // updateOnDuplicate: true\n    },\n    index: {\n      collate: false,\n      length: true,\n      parser: true,\n      type: true,\n      using: 1,\n    },\n    constraints: {\n      deferrable: true,\n      check: false,\n      removeOptions: { cascade: true },\n    },\n    indexViaAlter: true,\n    indexHints: true,\n    schemas: true,\n    multiDatabases: true,\n    dataTypes: {\n      COLLATE_BINARY: true,\n    },\n    REGEXP: true,\n    globalTimeZoneConfig: true,\n    dropTable: {\n      cascade: true,\n    },\n  });\n\n  readonly dataTypesDocumentationUrl = 'https://docs.snowflake.com/en/sql-reference/data-types.html';\n  // TODO: fix the minimum supported version\n  readonly defaultVersion = '5.7.0';\n  readonly Query = SnowflakeQuery;\n  readonly TICK_CHAR_LEFT = '\"';\n  readonly TICK_CHAR_RIGHT = '\"';\n  readonly connectionManager: SnowflakeConnectionManager;\n  readonly queryGenerator: SnowflakeQueryGenerator;\n  readonly queryInterface: SnowflakeQueryInterface;\n\n  constructor(sequelize: Sequelize) {\n    console.warn('The Snowflake dialect is experimental and usage is at your own risk. Its development is exclusively community-driven and not officially supported by the maintainers.');\n\n    super(sequelize, DataTypes, 'snowflake');\n    this.connectionManager = new SnowflakeConnectionManager(this, sequelize);\n    this.queryGenerator = new SnowflakeQueryGenerator({\n      dialect: this,\n      sequelize,\n    });\n    this.queryInterface = new SnowflakeQueryInterface(sequelize, this.queryGenerator);\n  }\n\n  createBindCollector() {\n    return createUnspecifiedOrderedBindCollector();\n  }\n\n  getDefaultSchema(): string {\n    return 'PUBLIC';\n  }\n\n  static getDefaultPort() {\n    return 3306;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,iBAAsD;AACtD,sBAAgC;AAChC,gCAA2C;AAC3C,gBAA2B;AAC3B,mBAA+B;AAC/B,6BAAwC;AACxC,6BAAwC;AAEjC,MAAM,yBAAyB,gCAAgB;AAAA,EACpD,OAAO,WAAW,gCAAgB,cAAc;AAAA,IAC9C,aAAa;AAAA,IACb,mBAAmB;AAAA,IACnB,MAAM;AAAA,IACN,UAAU;AAAA,IACV,wCAAwC;AAAA,IACxC,SAAS;AAAA,MACP,kBAAkB;AAAA;AAAA;AAAA;AAAA,IAIpB;AAAA,IACA,OAAO;AAAA,MACL,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,OAAO;AAAA,IACT;AAAA,IACA,aAAa;AAAA,MACX,YAAY;AAAA,MACZ,OAAO;AAAA,MACP,eAAe,EAAE,SAAS,KAAK;AAAA,IACjC;AAAA,IACA,eAAe;AAAA,IACf,YAAY;AAAA,IACZ,SAAS;AAAA,IACT,gBAAgB;AAAA,IAChB,WAAW;AAAA,MACT,gBAAgB;AAAA,IAClB;AAAA,IACA,QAAQ;AAAA,IACR,sBAAsB;AAAA,IACtB,WAAW;AAAA,MACT,SAAS;AAAA,IACX;AAAA,EACF,CAAC;AAAA,EAEQ,4BAA4B;AAAA;AAAA,EAE5B,iBAAiB;AAAA,EACjB,QAAQ;AAAA,EACR,iBAAiB;AAAA,EACjB,kBAAkB;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AAAA,EAET,YAAY,WAAsB;AAChC,YAAQ,KAAK,uKAAuK;AAEpL,UAAM,WAAW,WAAW,WAAW;AACvC,SAAK,oBAAoB,IAAI,qDAA2B,MAAM,SAAS;AACvE,SAAK,iBAAiB,IAAI,+CAAwB;AAAA,MAChD,SAAS;AAAA,MACT;AAAA,IACF,CAAC;AACD,SAAK,iBAAiB,IAAI,+CAAwB,WAAW,KAAK,cAAc;AAAA,EAClF;AAAA,EAEA,sBAAsB;AACpB,eAAO,kDAAsC;AAAA,EAC/C;AAAA,EAEA,mBAA2B;AACzB,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,iBAAiB;AACtB,WAAO;AAAA,EACT;AACF;",
  "names": []
}
