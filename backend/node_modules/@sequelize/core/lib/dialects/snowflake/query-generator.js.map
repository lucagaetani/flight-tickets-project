{
  "version": 3,
  "sources": ["../../../src/dialects/snowflake/query-generator.js"],
  "sourcesContent": ["'use strict';\n\nimport { joinSQLFragments } from '../../utils/join-sql-fragments';\nimport { EMPTY_OBJECT } from '../../utils/object.js';\nimport { defaultValueSchemable } from '../../utils/query-builder-utils';\nimport { quoteIdentifier } from '../../utils/dialect.js';\nimport { rejectInvalidOptions } from '../../utils/check';\nimport {\n  ADD_COLUMN_QUERY_SUPPORTABLE_OPTIONS,\n  CREATE_DATABASE_QUERY_SUPPORTABLE_OPTIONS,\n  CREATE_SCHEMA_QUERY_SUPPORTABLE_OPTIONS,\n  CREATE_TABLE_QUERY_SUPPORTABLE_OPTIONS,\n  REMOVE_COLUMN_QUERY_SUPPORTABLE_OPTIONS,\n} from '../abstract/query-generator';\n\nimport each from 'lodash/each';\nimport isPlainObject from 'lodash/isPlainObject';\n\nconst { SnowflakeQueryGeneratorTypeScript } = require('./query-generator-typescript');\nconst { Op } = require('../../operators');\n\n/**\n * list of reserved words in Snowflake\n * source: https://docs.snowflake.com/en/sql-reference/reserved-keywords.html\n *\n * @private\n */\nconst SNOWFLAKE_RESERVED_WORDS = 'account,all,alter,and,any,as,between,by,case,cast,check,column,connect,connections,constraint,create,cross,current,current_date,current_time,current_timestamp,current_user,database,delete,distinct,drop,else,exists,false,following,for,from,full,grant,group,gscluster,having,ilike,in,increment,inner,insert,intersect,into,is,issue,join,lateral,left,like,localtime,localtimestamp,minus,natural,not,null,of,on,or,order,organization,qualify,regexp,revoke,right,rlike,row,rows,sample,schema,select,set,some,start,table,tablesample,then,to,trigger,true,try_cast,union,unique,update,using,values,view,when,whenever,where,with'.split(',');\n\nconst typeWithoutDefault = new Set(['BLOB', 'TEXT', 'GEOMETRY', 'JSON']);\n\nconst ADD_COLUMN_QUERY_SUPPORTED_OPTIONS = new Set();\nconst CREATE_DATABASE_QUERY_SUPPORTED_OPTIONS = new Set(['charset', 'collate']);\nconst CREATE_SCHEMA_QUERY_SUPPORTED_OPTIONS = new Set();\nconst LIST_SCHEMAS_QUERY_SUPPORTED_OPTIONS = new Set();\nconst REMOVE_COLUMN_QUERY_SUPPORTED_OPTIONS = new Set();\nconst CREATE_TABLE_QUERY_SUPPORTED_OPTIONS = new Set(['collate', 'charset', 'rowFormat', 'comment', 'uniqueKeys']);\n\nexport class SnowflakeQueryGenerator extends SnowflakeQueryGeneratorTypeScript {\n  constructor(options) {\n    super(options);\n\n    this.whereSqlBuilder.setOperatorKeyword(Op.regexp, 'REGEXP');\n    this.whereSqlBuilder.setOperatorKeyword(Op.notRegexp, 'NOT REGEXP');\n  }\n\n  createDatabaseQuery(databaseName, options) {\n    if (options) {\n      rejectInvalidOptions(\n        'createDatabaseQuery',\n        this.dialect.name,\n        CREATE_DATABASE_QUERY_SUPPORTABLE_OPTIONS,\n        CREATE_DATABASE_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    return joinSQLFragments([\n      'CREATE DATABASE IF NOT EXISTS',\n      this.quoteIdentifier(databaseName),\n      options?.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`,\n      options?.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`,\n      ';',\n    ]);\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return `DROP DATABASE IF EXISTS ${this.quoteIdentifier(databaseName)};`;\n  }\n\n  listDatabasesQuery() {\n    return `SHOW DATABASES;`;\n  }\n\n  createSchemaQuery(schema, options) {\n    if (options) {\n      rejectInvalidOptions(\n        'createSchemaQuery',\n        this.dialect.name,\n        CREATE_SCHEMA_QUERY_SUPPORTABLE_OPTIONS,\n        CREATE_SCHEMA_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    return `CREATE SCHEMA IF NOT EXISTS ${this.quoteIdentifier(schema)};`;\n  }\n\n  dropSchemaQuery(schema) {\n    return `DROP SCHEMA IF EXISTS ${this.quoteIdentifier(schema)} CASCADE;`;\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    if (options) {\n      rejectInvalidOptions(\n        'createTableQuery',\n        this.dialect.name,\n        CREATE_TABLE_QUERY_SUPPORTABLE_OPTIONS,\n        CREATE_TABLE_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    options = {\n      charset: null,\n      rowFormat: null,\n      ...options,\n    };\n\n    const primaryKeys = [];\n    const foreignKeys = {};\n    const attrStr = [];\n\n    for (const attr in attributes) {\n      if (!Object.hasOwn(attributes, attr)) {\n        continue;\n      }\n\n      const dataType = attributes[attr];\n      let match;\n\n      if (dataType.includes('PRIMARY KEY')) {\n        primaryKeys.push(attr);\n\n        if (dataType.includes('REFERENCES')) {\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(`${this.quoteIdentifier(attr)} ${match[1].replace('PRIMARY KEY', '')}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace('PRIMARY KEY', '')}`);\n        }\n      } else if (dataType.includes('REFERENCES')) {\n        match = dataType.match(/^(.+) (REFERENCES.*)$/);\n        attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n        foreignKeys[attr] = match[2];\n      } else {\n        attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n      }\n    }\n\n    const table = this.quoteTable(tableName);\n    let attributesClause = attrStr.join(', ');\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      each(options.uniqueKeys, (columns, indexName) => {\n        if (typeof indexName !== 'string') {\n          indexName = `uniq_${tableName}_${columns.fields.join('_')}`;\n        }\n\n        attributesClause += `, UNIQUE ${this.quoteIdentifier(indexName)} (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n      });\n    }\n\n    if (pkString.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pkString})`;\n    }\n\n    for (const fkey in foreignKeys) {\n      if (Object.hasOwn(foreignKeys, fkey)) {\n        attributesClause += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;\n      }\n    }\n\n    return joinSQLFragments([\n      'CREATE TABLE IF NOT EXISTS',\n      table,\n      `(${attributesClause})`,\n      options.comment && typeof options.comment === 'string' && `COMMENT ${this.escape(options.comment)}`,\n      options.charset && `DEFAULT CHARSET=${options.charset}`,\n      options.collate && `COLLATE ${options.collate}`,\n      options.rowFormat && `ROW_FORMAT=${options.rowFormat}`,\n      ';',\n    ]);\n  }\n\n  addColumnQuery(table, key, dataType, options) {\n    if (options) {\n      rejectInvalidOptions(\n        'addColumnQuery',\n        this.dialect.name,\n        ADD_COLUMN_QUERY_SUPPORTABLE_OPTIONS,\n        ADD_COLUMN_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    return joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(table),\n      'ADD',\n      this.quoteIdentifier(key),\n      this.attributeToSQL(dataType, {\n        context: 'addColumn',\n        tableName: table,\n        foreignKey: key,\n      }),\n      ';',\n    ]);\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const query = (...subQuerys) => joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'ALTER COLUMN',\n      ...subQuerys,\n      ';',\n    ]);\n    const sql = [];\n    for (const attributeName in attributes) {\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n      const attrSql = [];\n\n      if (definition.includes('NOT NULL')) {\n        attrSql.push(query(this.quoteIdentifier(attributeName), 'SET NOT NULL'));\n\n        definition = definition.replace('NOT NULL', '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql.push(query(this.quoteIdentifier(attributeName), 'DROP NOT NULL'));\n      }\n\n      if (definition.includes('DEFAULT')) {\n        attrSql.push(query(this.quoteIdentifier(attributeName), 'SET DEFAULT', definition.match(/DEFAULT ([^;]+)/)[1]));\n\n        definition = definition.replace(/(DEFAULT[^;]+)/, '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql.push(query(this.quoteIdentifier(attributeName), 'DROP DEFAULT'));\n      }\n\n      if (/UNIQUE;*$/.test(definition)) {\n        definition = definition.replace(/UNIQUE;*$/, '');\n        attrSql.push(query('ADD UNIQUE (', this.quoteIdentifier(attributeName), ')').replace('ALTER COLUMN', ''));\n      }\n\n      if (definition.includes('REFERENCES')) {\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        attrSql.push(query('ADD FOREIGN KEY (', this.quoteIdentifier(attributeName), ')', definition).replace('ALTER COLUMN', ''));\n      } else {\n        attrSql.push(query(this.quoteIdentifier(attributeName), 'TYPE', definition));\n      }\n\n      sql.push(attrSql.join(''));\n    }\n\n    return sql.join('');\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const attrString = [];\n\n    for (const attrName in attributes) {\n      const definition = attributes[attrName];\n      attrString.push(`'${attrBefore}' '${attrName}' ${definition}`);\n    }\n\n    return joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'RENAME COLUMN',\n      attrString.join(' to '),\n      ';',\n    ]);\n  }\n\n  truncateTableQuery(tableName) {\n    return joinSQLFragments([\n      'TRUNCATE',\n      this.quoteTable(tableName),\n    ]);\n  }\n\n  deleteQuery(tableName, where, options = EMPTY_OBJECT, model) {\n    const escapeOptions = { ...options, model };\n\n    const table = this.quoteTable(tableName);\n    const limit = options.limit && ` LIMIT ${this.escape(options.limit, escapeOptions)}`;\n    let primaryKeys = '';\n    let primaryKeysSelection = '';\n\n    let whereClause = this.whereQuery(where, escapeOptions);\n    if (whereClause) {\n      whereClause = ` ${whereClause}`;\n    }\n\n    if (limit) {\n      if (!model) {\n        throw new Error('Cannot LIMIT delete without a model.');\n      }\n\n      const pks = Object.values(model.primaryKeys).map(pk => this.quoteIdentifier(pk.field)).join(',');\n\n      primaryKeys = model.primaryKeyAttributes.length > 1 ? `(${pks})` : pks;\n      primaryKeysSelection = pks;\n\n      return joinSQLFragments([\n        'DELETE FROM',\n        table,\n        'WHERE',\n        primaryKeys,\n        'IN (SELECT',\n        primaryKeysSelection,\n        'FROM',\n        table,\n        whereClause,\n        limit,\n        ')',\n      ]);\n    }\n\n    return joinSQLFragments([\n      'DELETE FROM',\n      table,\n      whereClause,\n    ]);\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!isPlainObject(attribute)) {\n      attribute = {\n        type: attribute,\n      };\n    }\n\n    const attributeString = attribute.type.toString({ dialect: this.dialect });\n    let template = attributeString;\n\n    if (attribute.allowNull === false) {\n      template += ' NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      template += ' AUTOINCREMENT';\n    }\n\n    // BLOB/TEXT/GEOMETRY/JSON cannot have a default value\n    if (!typeWithoutDefault.has(attributeString)\n      && attribute.type._binary !== true\n      && defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue, { ...options, type: attribute.type })}`;\n    }\n\n    if (attribute.unique === true) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if (attribute.comment) {\n      template += ` COMMENT ${this.escape(attribute.comment, options)}`;\n    }\n\n    if (attribute.first) {\n      template += ' FIRST';\n    }\n\n    if (attribute.after) {\n      template += ` AFTER ${this.quoteIdentifier(attribute.after)}`;\n    }\n\n    if (attribute.references) {\n      if (options && options.context === 'addColumn' && options.foreignKey) {\n        const attrName = this.quoteIdentifier(options.foreignKey);\n        const fkName = this.quoteIdentifier(`${options.tableName}_${attrName}_foreign_idx`);\n\n        template += `, ADD CONSTRAINT ${fkName} FOREIGN KEY (${attrName})`;\n      }\n\n      template += ` REFERENCES ${this.quoteTable(attribute.references.table)}`;\n\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier('id')})`;\n      }\n\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n\n    return template;\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  }\n\n  dataTypeMapping(tableName, attr, dataType) {\n    if (dataType.includes('PRIMARY KEY')) {\n      dataType = dataType.replace('PRIMARY KEY', '');\n    }\n\n    if (dataType.includes('SERIAL')) {\n      if (dataType.includes('BIGINT')) {\n        dataType = dataType.replace('SERIAL', 'BIGSERIAL');\n        dataType = dataType.replace('BIGINT', '');\n      } else if (dataType.includes('SMALLINT')) {\n        dataType = dataType.replace('SERIAL', 'SMALLSERIAL');\n        dataType = dataType.replace('SMALLINT', '');\n      } else {\n        dataType = dataType.replace('INTEGER', '');\n      }\n\n      dataType = dataType.replace('NOT NULL', '');\n    }\n\n    return dataType;\n  }\n\n  addLimitAndOffset(options) {\n    if (options.offset) {\n      return ` LIMIT ${this.escape(options.limit ?? null, options)} OFFSET ${this.escape(options.offset, options)}`;\n    }\n\n    if (options.limit != null) {\n      return ` LIMIT ${this.escape(options.limit, options)}`;\n    }\n\n    return '';\n  }\n\n  /**\n   * Quote identifier in sql clause\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    const optForceQuote = force || false;\n    // TODO [>7]: remove \"quoteIdentifiers: false\" option\n    const optQuoteIdentifiers = this.options.quoteIdentifiers !== false;\n\n    if (\n      optForceQuote === true\n      // TODO [>7]: drop this.options.quoteIdentifiers. Always quote identifiers.\n      || optQuoteIdentifiers !== false\n      || identifier.includes('.')\n      || identifier.includes('->')\n      || SNOWFLAKE_RESERVED_WORDS.includes(identifier.toLowerCase())\n    ) {\n      // In Snowflake if tables or attributes are created double-quoted,\n      // they are also case sensitive. If they contain any uppercase\n      // characters, they must always be double-quoted. This makes it\n      // impossible to write queries in portable SQL if tables are created in\n      // this way. Hence, we strip quotes if we don't want case sensitivity.\n      return quoteIdentifier(identifier, this.dialect.TICK_CHAR_LEFT, this.dialect.TICK_CHAR_RIGHT);\n    }\n\n    return identifier;\n  }\n}\n"],
  "mappings": "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",
  "names": ["each", "isPlainObject"]
}
