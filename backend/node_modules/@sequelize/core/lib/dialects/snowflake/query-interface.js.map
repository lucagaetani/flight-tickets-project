{
  "version": 3,
  "sources": ["../../../src/dialects/snowflake/query-interface.js"],
  "sourcesContent": ["'use strict';\n\nimport { getObjectFromMap } from '../../utils/object';\nimport { assertNoReservedBind, combineBinds } from '../../utils/sql';\n\nconst sequelizeErrors = require('../../errors');\nconst { AbstractQueryInterface } = require('../abstract/query-interface');\nconst { QueryTypes } = require('../../query-types');\n\n/**\n * The interface that Sequelize uses to talk with Snowflake database\n */\nexport class SnowflakeQueryInterface extends AbstractQueryInterface {\n  /** @override */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    if (options.bind) {\n      assertNoReservedBind(options.bind);\n    }\n\n    options = { ...options };\n\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n\n    const model = options.model;\n    const modelDefinition = model.modelDefinition;\n    const { query, bind } = this.queryGenerator.insertQuery(tableName, insertValues, getObjectFromMap(modelDefinition.attributes), options);\n\n    delete options.replacements;\n    options.bind = combineBinds(options.bind, bind);\n\n    return await this.sequelize.queryRaw(query, options);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,oBAAiC;AACjC,iBAAmD;AAEnD,MAAM,kBAAkB,QAAQ,cAAc;AAC9C,MAAM,EAAE,uBAAuB,IAAI,QAAQ,6BAA6B;AACxE,MAAM,EAAE,WAAW,IAAI,QAAQ,mBAAmB;AAK3C,MAAM,gCAAgC,uBAAuB;AAAA;AAAA,EAElE,MAAM,OAAO,WAAW,cAAc,cAAc,OAAO,SAAS;AAClE,QAAI,QAAQ,MAAM;AAChB,2CAAqB,QAAQ,IAAI;AAAA,IACnC;AAEA,cAAU,EAAE,GAAG,QAAQ;AAEvB,YAAQ,OAAO,WAAW;AAC1B,YAAQ,oBAAoB,OAAO,KAAK,YAAY;AAEpD,UAAM,QAAQ,QAAQ;AACtB,UAAM,kBAAkB,MAAM;AAC9B,UAAM,EAAE,OAAO,KAAK,IAAI,KAAK,eAAe,YAAY,WAAW,kBAAc,gCAAiB,gBAAgB,UAAU,GAAG,OAAO;AAEtI,WAAO,QAAQ;AACf,YAAQ,WAAO,yBAAa,QAAQ,MAAM,IAAI;AAE9C,WAAO,MAAM,KAAK,UAAU,SAAS,OAAO,OAAO;AAAA,EACrD;AACF;",
  "names": []
}
