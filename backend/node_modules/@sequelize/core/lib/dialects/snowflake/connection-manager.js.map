{
  "version": 3,
  "sources": ["../../../src/dialects/snowflake/connection-manager.ts"],
  "sourcesContent": ["import type {\n  Connection as SnowflakeSdkConnection,\n  ConnectionOptions as SnowflakeSdkConnectionOptions,\n} from 'snowflake-sdk';\nimport {\n  AccessDeniedError,\n  ConnectionError,\n  ConnectionRefusedError,\n  HostNotFoundError,\n  HostNotReachableError,\n  InvalidConnectionError,\n} from '../../errors/index.js';\nimport type { ConnectionOptions, Sequelize } from '../../sequelize.js';\nimport { isErrorWithStringCode } from '../../utils/check.js';\nimport { logger } from '../../utils/logger';\nimport type { Connection } from '../abstract/connection-manager';\nimport { AbstractConnectionManager } from '../abstract/connection-manager';\nimport type { SnowflakeDialect } from './index.js';\n\nconst debug = logger.debugContext('connection:snowflake');\n\nexport interface SnowflakeConnection extends Connection, SnowflakeSdkConnection {\n\n}\n\n// TODO: once the code has been split into packages, we won't need to lazy load this anymore\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\ntype Lib = typeof import('snowflake-sdk');\n\nexport class SnowflakeConnectionManager extends AbstractConnectionManager<SnowflakeConnection> {\n  private readonly lib: Lib;\n\n  constructor(dialect: SnowflakeDialect, sequelize: Sequelize) {\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('snowflake-sdk') as Lib;\n  }\n\n  /**\n   * Connect with a snowflake database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param config\n   * @returns\n   * @private\n   */\n  async connect(config: ConnectionOptions): Promise<SnowflakeConnection> {\n    const connectionConfig: SnowflakeSdkConnectionOptions = {\n      account: config.host!,\n      username: config.username!,\n      password: config.password!,\n      database: config.database,\n      // @ts-expect-error -- snowflake specific options. They should be in dialectOptions. Do not declare them in ConnectionOptions.\n      warehouse: config.warehouse,\n      // @ts-expect-error -- snowflake specific options. They should be in dialectOptions. Do not declare them in ConnectionOptions.\n      role: config.role,\n      ...config.dialectOptions,\n    };\n\n    try {\n      const connection = this.lib.createConnection(connectionConfig) as SnowflakeConnection;\n\n      await new Promise<void>((resolve, reject) => {\n        connection.connect(err => {\n          if (err) {\n            return void reject(err);\n          }\n\n          resolve();\n        });\n      });\n\n      debug('connection acquired');\n\n      if (!this.sequelize.config.keepDefaultTimezone) {\n        // TODO: remove default timezone.\n        // default value is '+00:00', put a quick workaround for it.\n        const tzOffset = this.sequelize.options.timezone === '+00:00' ? 'Etc/UTC' : this.sequelize.options.timezone;\n        const isNamedTzOffset = tzOffset.includes('/');\n        if (!isNamedTzOffset) {\n          throw new Error('Snowflake only supports named timezones for the sequelize \"timezone\" option.');\n        }\n\n        await new Promise<void>((resolve, reject) => {\n          connection.execute({\n            sqlText: `ALTER SESSION SET timezone = '${tzOffset}'`,\n            complete(err) {\n              if (err) {\n                return void reject(err);\n              }\n\n              resolve();\n            },\n          });\n        });\n      }\n\n      return connection;\n    } catch (error) {\n      if (!isErrorWithStringCode(error)) {\n        throw error;\n      }\n\n      switch (error.code) {\n        case 'ECONNREFUSED':\n          throw new ConnectionRefusedError(error);\n        case 'ER_ACCESS_DENIED_ERROR':\n          throw new AccessDeniedError(error);\n        case 'ENOTFOUND':\n          throw new HostNotFoundError(error);\n        case 'EHOSTUNREACH':\n          throw new HostNotReachableError(error);\n        case 'EINVAL':\n          throw new InvalidConnectionError(error);\n        default:\n          throw new ConnectionError(error);\n      }\n    }\n  }\n\n  async disconnect(connection: SnowflakeConnection): Promise<void> {\n    // Don't disconnect connections with CLOSED state\n    if (!connection.isUp()) {\n      debug('connection tried to disconnect but was already at CLOSED state');\n\n      return;\n    }\n\n    await new Promise((resolve, reject) => {\n      connection.destroy(err => {\n        if (err) {\n          console.error(`Unable to disconnect: ${err.message}`);\n          reject(err);\n        } else {\n          console.error(`Disconnected connection with id: ${connection.getId()}`);\n          resolve(connection.getId());\n        }\n      });\n    });\n  }\n\n  validate(connection: SnowflakeConnection) {\n    return connection.isUp();\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,oBAOO;AAEP,mBAAsC;AACtC,oBAAuB;AAEvB,gCAA0C;AAG1C,MAAM,QAAQ,qBAAO,aAAa,sBAAsB;AAUjD,MAAM,mCAAmC,oDAA+C;AAAA,EAC5E;AAAA,EAEjB,YAAY,SAA2B,WAAsB;AAC3D,UAAM,SAAS,SAAS;AACxB,SAAK,MAAM,KAAK,mBAAmB,eAAe;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,QAAQ,QAAyD;AACrE,UAAM,mBAAkD;AAAA,MACtD,SAAS,OAAO;AAAA,MAChB,UAAU,OAAO;AAAA,MACjB,UAAU,OAAO;AAAA,MACjB,UAAU,OAAO;AAAA;AAAA,MAEjB,WAAW,OAAO;AAAA;AAAA,MAElB,MAAM,OAAO;AAAA,MACb,GAAG,OAAO;AAAA,IACZ;AAEA,QAAI;AACF,YAAM,aAAa,KAAK,IAAI,iBAAiB,gBAAgB;AAE7D,YAAM,IAAI,QAAc,CAAC,SAAS,WAAW;AAC3C,mBAAW,QAAQ,SAAO;AACxB,cAAI,KAAK;AACP,mBAAO,KAAK,OAAO,GAAG;AAAA,UACxB;AAEA,kBAAQ;AAAA,QACV,CAAC;AAAA,MACH,CAAC;AAED,YAAM,qBAAqB;AAE3B,UAAI,CAAC,KAAK,UAAU,OAAO,qBAAqB;AAG9C,cAAM,WAAW,KAAK,UAAU,QAAQ,aAAa,WAAW,YAAY,KAAK,UAAU,QAAQ;AACnG,cAAM,kBAAkB,SAAS,SAAS,GAAG;AAC7C,YAAI,CAAC,iBAAiB;AACpB,gBAAM,IAAI,MAAM,8EAA8E;AAAA,QAChG;AAEA,cAAM,IAAI,QAAc,CAAC,SAAS,WAAW;AAC3C,qBAAW,QAAQ;AAAA,YACjB,SAAS,iCAAiC;AAAA,YAC1C,SAAS,KAAK;AACZ,kBAAI,KAAK;AACP,uBAAO,KAAK,OAAO,GAAG;AAAA,cACxB;AAEA,sBAAQ;AAAA,YACV;AAAA,UACF,CAAC;AAAA,QACH,CAAC;AAAA,MACH;AAEA,aAAO;AAAA,IACT,SAAS,OAAP;AACA,UAAI,KAAC,oCAAsB,KAAK,GAAG;AACjC,cAAM;AAAA,MACR;AAEA,cAAQ,MAAM,MAAM;AAAA,QAClB,KAAK;AACH,gBAAM,IAAI,qCAAuB,KAAK;AAAA,QACxC,KAAK;AACH,gBAAM,IAAI,gCAAkB,KAAK;AAAA,QACnC,KAAK;AACH,gBAAM,IAAI,gCAAkB,KAAK;AAAA,QACnC,KAAK;AACH,gBAAM,IAAI,oCAAsB,KAAK;AAAA,QACvC,KAAK;AACH,gBAAM,IAAI,qCAAuB,KAAK;AAAA,QACxC;AACE,gBAAM,IAAI,8BAAgB,KAAK;AAAA,MACnC;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,WAAW,YAAgD;AAE/D,QAAI,CAAC,WAAW,KAAK,GAAG;AACtB,YAAM,gEAAgE;AAEtE;AAAA,IACF;AAEA,UAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AACrC,iBAAW,QAAQ,SAAO;AACxB,YAAI,KAAK;AACP,kBAAQ,MAAM,yBAAyB,IAAI,SAAS;AACpD,iBAAO,GAAG;AAAA,QACZ,OAAO;AACL,kBAAQ,MAAM,oCAAoC,WAAW,MAAM,GAAG;AACtE,kBAAQ,WAAW,MAAM,CAAC;AAAA,QAC5B;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EAEA,SAAS,YAAiC;AACxC,WAAO,WAAW,KAAK;AAAA,EACzB;AACF;",
  "names": []
}
