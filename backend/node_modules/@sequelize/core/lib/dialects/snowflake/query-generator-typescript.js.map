{
  "version": 3,
  "sources": ["../../../src/dialects/snowflake/query-generator-typescript.ts"],
  "sourcesContent": ["import { rejectInvalidOptions } from '../../utils/check';\nimport { joinSQLFragments } from '../../utils/join-sql-fragments';\nimport { AbstractQueryGenerator } from '../abstract/query-generator';\nimport { SHOW_CONSTRAINTS_QUERY_SUPPORTABLE_OPTIONS, type TableNameOrModel } from '../abstract/query-generator-typescript';\nimport type {\n  ListSchemasQueryOptions,\n  ListTablesQueryOptions,\n  ShowConstraintsQueryOptions,\n} from '../abstract/query-generator.types';\n\nconst SHOW_CONSTRAINTS_QUERY_SUPPORTED_OPTIONS = new Set<keyof ShowConstraintsQueryOptions>(['constraintName', 'constraintType']);\n\n/**\n * Temporary class to ease the TypeScript migration\n */\nexport class SnowflakeQueryGeneratorTypeScript extends AbstractQueryGenerator {\n  protected _getTechnicalSchemaNames() {\n    return ['INFORMATION_SCHEMA', 'PERFORMANCE_SCHEMA', 'SYS', 'information_schema', 'performance_schema', 'sys'];\n  }\n\n  listSchemasQuery(options?: ListSchemasQueryOptions) {\n    const schemasToSkip = this._getTechnicalSchemaNames();\n\n    if (options && Array.isArray(options?.skip)) {\n      schemasToSkip.push(...options.skip);\n    }\n\n    return joinSQLFragments([\n      'SELECT SCHEMA_NAME AS \"schema\"',\n      'FROM INFORMATION_SCHEMA.SCHEMATA',\n      `WHERE SCHEMA_NAME NOT IN (${schemasToSkip.map(schema => this.escape(schema)).join(', ')})`,\n    ]);\n  }\n\n  describeTableQuery(tableName: TableNameOrModel) {\n    return `SHOW FULL COLUMNS FROM ${this.quoteTable(tableName)};`;\n  }\n\n  listTablesQuery(options?: ListTablesQueryOptions) {\n    return joinSQLFragments([\n      'SELECT TABLE_NAME AS \"tableName\",',\n      'TABLE_SCHEMA AS \"schema\"',\n      `FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'`,\n      options?.schema\n        ? `AND TABLE_SCHEMA = ${this.escape(options.schema)}`\n        : `AND TABLE_SCHEMA NOT IN (${this._getTechnicalSchemaNames().map(schema => this.escape(schema)).join(', ')})`,\n      'ORDER BY TABLE_SCHEMA, TABLE_NAME',\n    ]);\n  }\n\n  showConstraintsQuery(tableName: TableNameOrModel, options?: ShowConstraintsQueryOptions) {\n    if (options) {\n      rejectInvalidOptions(\n        'showConstraintsQuery',\n        this.dialect.name,\n        SHOW_CONSTRAINTS_QUERY_SUPPORTABLE_OPTIONS,\n        SHOW_CONSTRAINTS_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    const table = this.extractTableDetails(tableName);\n\n    return joinSQLFragments([\n      'SELECT c.CONSTRAINT_CATALOG AS constraintCatalog,',\n      'c.CONSTRAINT_SCHEMA AS constraintSchema,',\n      'c.CONSTRAINT_NAME AS constraintName,',\n      'c.CONSTRAINT_TYPE AS constraintType,',\n      'c.TABLE_CATALOG AS tableCatalog,',\n      'c.TABLE_SCHEMA AS tableSchema,',\n      'c.TABLE_NAME AS tableName,',\n      'fk.TABLE_SCHEMA AS referencedTableSchema,',\n      'fk.TABLE_NAME AS referencedTableName,',\n      'r.DELETE_RULE AS deleteAction,',\n      'r.UPDATE_RULE AS updateAction,',\n      'c.IS_DEFERRABLE AS isDeferrable,',\n      'c.INITIALLY_DEFERRED AS initiallyDeferred',\n      'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS c',\n      'LEFT JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS r ON c.CONSTRAINT_CATALOG = r.CONSTRAINT_CATALOG AND c.CONSTRAINT_SCHEMA = r.CONSTRAINT_SCHEMA AND c.CONSTRAINT_NAME = r.CONSTRAINT_NAME',\n      'LEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS fk ON r.UNIQUE_CONSTRAINT_CATALOG = fk.CONSTRAINT_CATALOG AND r.UNIQUE_CONSTRAINT_SCHEMA = fk.CONSTRAINT_SCHEMA AND r.UNIQUE_CONSTRAINT_NAME = fk.CONSTRAINT_NAME',\n      `WHERE c.TABLE_NAME = ${this.escape(table.tableName)}`,\n      `AND c.TABLE_SCHEMA = ${this.escape(table.schema)}`,\n      options?.constraintName ? `AND c.CONSTRAINT_NAME = ${this.escape(options.constraintName)}` : '',\n      options?.constraintType ? `AND c.CONSTRAINT_TYPE = ${this.escape(options.constraintType)}` : '',\n      'ORDER BY c.CONSTRAINT_NAME',\n    ]);\n  }\n\n  showIndexesQuery() {\n    // TODO [+snowflake-sdk]: check if this is the correct implementation\n    return `SELECT '' FROM DUAL`;\n  }\n\n  versionQuery() {\n    return 'SELECT CURRENT_VERSION() AS \"version\"';\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAqC;AACrC,gCAAiC;AACjC,6BAAuC;AACvC,wCAAkF;AAOlF,MAAM,2CAA2C,oBAAI,IAAuC,CAAC,kBAAkB,gBAAgB,CAAC;AAKzH,MAAM,0CAA0C,8CAAuB;AAAA,EAClE,2BAA2B;AACnC,WAAO,CAAC,sBAAsB,sBAAsB,OAAO,sBAAsB,sBAAsB,KAAK;AAAA,EAC9G;AAAA,EAEA,iBAAiB,SAAmC;AAClD,UAAM,gBAAgB,KAAK,yBAAyB;AAEpD,QAAI,WAAW,MAAM,QAAQ,mCAAS,IAAI,GAAG;AAC3C,oBAAc,KAAK,GAAG,QAAQ,IAAI;AAAA,IACpC;AAEA,eAAO,4CAAiB;AAAA,MACtB;AAAA,MACA;AAAA,MACA,6BAA6B,cAAc,IAAI,YAAU,KAAK,OAAO,MAAM,CAAC,EAAE,KAAK,IAAI;AAAA,IACzF,CAAC;AAAA,EACH;AAAA,EAEA,mBAAmB,WAA6B;AAC9C,WAAO,0BAA0B,KAAK,WAAW,SAAS;AAAA,EAC5D;AAAA,EAEA,gBAAgB,SAAkC;AAChD,eAAO,4CAAiB;AAAA,MACtB;AAAA,MACA;AAAA,MACA;AAAA,OACA,mCAAS,UACL,sBAAsB,KAAK,OAAO,QAAQ,MAAM,MAChD,4BAA4B,KAAK,yBAAyB,EAAE,IAAI,YAAU,KAAK,OAAO,MAAM,CAAC,EAAE,KAAK,IAAI;AAAA,MAC5G;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,qBAAqB,WAA6B,SAAuC;AACvF,QAAI,SAAS;AACX;AAAA,QACE;AAAA,QACA,KAAK,QAAQ;AAAA,QACb;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAEA,UAAM,QAAQ,KAAK,oBAAoB,SAAS;AAEhD,eAAO,4CAAiB;AAAA,MACtB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,wBAAwB,KAAK,OAAO,MAAM,SAAS;AAAA,MACnD,wBAAwB,KAAK,OAAO,MAAM,MAAM;AAAA,OAChD,mCAAS,kBAAiB,2BAA2B,KAAK,OAAO,QAAQ,cAAc,MAAM;AAAA,OAC7F,mCAAS,kBAAiB,2BAA2B,KAAK,OAAO,QAAQ,cAAc,MAAM;AAAA,MAC7F;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,mBAAmB;AAEjB,WAAO;AAAA,EACT;AAAA,EAEA,eAAe;AACb,WAAO;AAAA,EACT;AACF;",
  "names": []
}
