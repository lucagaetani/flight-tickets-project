{
  "version": 3,
  "sources": ["../../../src/dialects/db2/query.js"],
  "sourcesContent": ["'use strict';\n\nimport assert from 'node:assert';\nimport { AbstractQuery } from '../abstract/query';\nimport { logger } from '../../utils/logger';\n\nimport forOwn from 'lodash/forOwn';\n\nconst sequelizeErrors = require('../../errors');\n\nconst debug = logger.debugContext('sql:db2');\n\nexport class Db2Query extends AbstractQuery {\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value) {\n    if (Buffer.isBuffer(value)) {\n      return { ParamType: 'INPUT', DataType: 'BLOB', Data: value };\n    }\n\n    if (typeof value === 'bigint') {\n      // The ibm_db module does not handle bigint, send as a string instead:\n      return value.toString();\n    }\n\n    return value;\n  }\n\n  async _run(connection, sql, parameters) {\n    assert(typeof sql === 'string', `sql parameter must be a string`);\n\n    this.sql = sql;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (this.sql.startsWith('BEGIN TRANSACTION')) {\n      try {\n        await connection.beginTransaction();\n      } catch (error) {\n        throw this.formatError(error);\n      }\n\n      return this.formatResults();\n    }\n\n    if (this.sql.startsWith('COMMIT TRANSACTION')) {\n      try {\n        await connection.commitTransaction();\n      } catch (error) {\n        throw this.formatError(error);\n      }\n\n      return this.formatResults();\n    }\n\n    if (this.sql.startsWith('ROLLBACK TRANSACTION')) {\n      try {\n        await connection.rollbackTransaction();\n      } catch (error) {\n        throw this.formatError(error);\n      }\n\n      return this.formatResults();\n    }\n\n    if (this.sql.startsWith('SAVE TRANSACTION')) {\n      try {\n        // TODO: This is not a savepoint! It's unsafe and this behavior should be removed.\n        await connection.commitTransaction();\n        await connection.beginTransaction();\n      } catch (error) {\n        throw this.formatError(error);\n      }\n\n      return this.formatResults();\n    }\n\n    const params = [];\n    if (parameters) {\n      forOwn(parameters, (value, key) => {\n        const param = this.getSQLTypeFromJsType(value, key);\n        params.push(param);\n      });\n    }\n\n    const SQL = this.sql.toUpperCase();\n    let newSql = this.sql;\n\n    // TODO: move this to Db2QueryGenerator\n    if ((this.isSelectQuery() || SQL.startsWith('SELECT '))\n            && !SQL.includes(' FROM ', 8)) {\n      if (this.sql.at(-1) === ';') {\n        newSql = this.sql.slice(0, -1);\n      }\n\n      newSql += ' FROM SYSIBM.SYSDUMMY1;';\n    }\n\n    let stmt;\n    try {\n      stmt = await connection.prepare(newSql);\n    } catch (error) {\n      throw this.formatError(error);\n    }\n\n    let res;\n    try {\n      // Warning: the promise version stmt.execute() does not return the same thing as stmt.execute(callback), despite the documentation.\n      res = await this.#execute(stmt, params);\n    } catch (error) {\n      if (error.message) {\n        // eslint-disable-next-line no-ex-assign -- legacy code. TODO: reformat\n        error = this.filterSQLError(error, this.sql, connection);\n        if (error === null) {\n          stmt.closeSync();\n\n          return this.formatResults([], 0);\n        }\n      }\n\n      error.sql = sql;\n      stmt.closeSync();\n      throw this.formatError(error, connection, parameters);\n    }\n\n    const { result, outparams } = res;\n\n    complete();\n\n    // map the INOUT parameters to the name provided by the dev\n    // this is an internal API, not yet ready for dev consumption, hence the _unsafe_ prefix.\n    if (outparams && this.options.bindParameterOrder && this.options._unsafe_db2Outparams) {\n      for (let i = 0; i < this.options.bindParameterOrder.length; i++) {\n        const paramName = this.options.bindParameterOrder[i];\n        const paramValue = outparams[i];\n\n        this.options._unsafe_db2Outparams.set(paramName, paramValue);\n      }\n    }\n\n    let data = [];\n    let metadata = [];\n    let affectedRows = 0;\n    if (typeof result === 'object') {\n      if (this.sql.startsWith('DELETE FROM ')) {\n        affectedRows = result.getAffectedRowsSync();\n      } else {\n        data = result.fetchAllSync();\n        metadata = result.getColumnMetadataSync();\n      }\n\n      result.closeSync();\n    }\n\n    stmt.closeSync();\n    const datalen = data.length;\n    if (datalen > 0) {\n      const coltypes = {};\n      for (const metadatum of metadata) {\n        coltypes[metadatum.SQL_DESC_NAME] = metadatum.SQL_DESC_TYPE_NAME;\n      }\n\n      for (let i = 0; i < datalen; i++) {\n        for (const column in data[i]) {\n          const value = data[i][column];\n          if (value === null) {\n            continue;\n          }\n\n          const parse = this.sequelize.dialect.getParserForDatabaseDataType(coltypes[column]);\n          if (parse) {\n            data[i][column] = parse(value);\n          }\n        }\n      }\n\n      if (outparams && outparams.length > 0) {\n        data.unshift(outparams);\n      }\n\n      return this.formatResults(data, datalen, metadata, connection);\n    }\n\n    return this.formatResults(data, affectedRows);\n  }\n\n  async run(sql, parameters) {\n    return await this._run(this.connection, sql, parameters);\n  }\n\n  #execute(stmt, params) {\n    return new Promise((resolve, reject) => {\n      stmt.execute(params, (err, result, outparams) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve({ result, outparams });\n        }\n      });\n    });\n  }\n\n  filterSQLError(err, sql, connection) {\n    // This error is safe to ignore:\n    // [IBM][CLI Driver][DB2/LINUXX8664] SQL0605W  The index was not created because an index \"x\" with a matching definition already exists.  SQLSTATE=01550\n    if (err.message.search('SQL0605W') !== -1) {\n      return null;\n    }\n\n    return err;\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @param {Integer} rowCount - The number of affected rows.\n   * @param {Array} metadata - Metadata of the returned result set.\n   * @param {object} conn - The connection object.\n   * @private\n   */\n  formatResults(data, rowCount, metadata, conn) {\n    let result = this.instance;\n    if (this.isInsertQuery(data, metadata)) {\n      this.handleInsertQuery(data, metadata);\n\n      if (!this.instance) {\n        if (this.options.plain) {\n          const record = data[0];\n          result = record[Object.keys(record)[0]];\n        } else {\n          result = data;\n        }\n      }\n    }\n\n    if (this.isDescribeQuery()) {\n      result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace('(\\'', '').replace('\\')', '').replaceAll('\\'', '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'Y',\n          defaultValue: _result.Default,\n          primaryKey: _result.KeySeq > 0,\n          autoIncrement: _result.IsIdentity === 'Y',\n          comment: _result.Comment,\n        };\n      }\n    } else if (this.isShowIndexesQuery()) {\n      result = this.handleShowIndexesQuery(data);\n    } else if (this.isSelectQuery()) {\n      result = this.handleSelectQuery(data);\n    } else if (this.isUpsertQuery()) {\n      result = data;\n    } else if (this.isDropSchemaQuery()) {\n      result = data[0];\n      if (conn) {\n        const query = 'DROP TABLE ERRORSCHEMA.ERRORTABLE';\n        conn.querySync(query);\n      }\n    } else if (this.isCallQuery()) {\n      result = data;\n    } else if (this.isBulkUpdateQuery()) {\n      result = data.length;\n    } else if (this.isBulkDeleteQuery()) {\n      result = rowCount;\n    } else if (this.isInsertQuery() || this.isUpdateQuery()) {\n      result = [result, rowCount];\n    } else if (this.isShowConstraintsQuery()) {\n      result = data;\n    } else if (this.isRawQuery()) {\n      // Db2 returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      result = [data, metadata];\n    } else {\n      result = data;\n    }\n\n    return result;\n  }\n\n  formatError(err, conn, parameters) {\n    let match;\n\n    if (!(err && err.message)) {\n      err.message = 'No error message found.';\n    }\n\n    match = err.message.match(/SQL0803N {2}One or more values in the INSERT statement, UPDATE statement, or foreign key update caused by a DELETE statement are not valid because the primary key, unique constraint or unique index identified by \"(\\d)+\" constrains table \"(.*)\\.(.*)\" from having duplicate values for the index key./);\n    if (match && match.length > 0) {\n      let uniqueIndexName = '';\n      let uniqueKey = '';\n      const fields = {};\n      let message = err.message;\n      const query = `SELECT INDNAME FROM SYSCAT.INDEXES  WHERE IID = ${match[1]} AND TABSCHEMA = '${match[2]}' AND TABNAME = '${match[3]}'`;\n\n      if (Boolean(conn) && match.length > 3) {\n        uniqueIndexName = conn.querySync(query);\n        uniqueIndexName = uniqueIndexName[0].INDNAME;\n      }\n\n      if (this.model && Boolean(uniqueIndexName)) {\n        uniqueKey = this.model.getIndexes().find(index => index.unique && index.name === uniqueIndexName);\n      }\n\n      if (!uniqueKey && this.options.fields) {\n        uniqueKey = this.options.fields[match[1] - 1];\n      }\n\n      if (uniqueKey) {\n        // TODO: DB2 uses a custom \"column\" property, but it should use \"fields\" instead, so column can be removed\n        if (this.options.where\n          && this.options.where[uniqueKey.column] !== undefined) {\n          fields[uniqueKey.column] = this.options.where[uniqueKey.column];\n        } else if (this.options.instance && this.options.instance.dataValues\n          && this.options.instance.dataValues[uniqueKey.column]) {\n          fields[uniqueKey.column] = this.options.instance.dataValues[uniqueKey.column];\n        } else if (parameters) {\n          fields[uniqueKey.column] = parameters['0'];\n        }\n      }\n\n      if (uniqueKey && Boolean(uniqueKey.msg)) {\n        message = uniqueKey.msg;\n      }\n\n      const errors = [];\n      forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(\n          this.getUniqueConstraintErrorMessage(field),\n          'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n          field,\n          value,\n          this.instance,\n          'not_unique',\n        ));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({ message, errors, cause: err, fields });\n    }\n\n    match = err.message.match(/SQL0532N {2}A parent row cannot be deleted because the relationship \"(.*)\" restricts the deletion/)\n      || err.message.match(/SQL0530N/)\n      || err.message.match(/SQL0531N/);\n    if (match && match.length > 0) {\n      const data = err.message.match(/(?:\"([\\w.]+)\")/);\n      const constraintData = data && data.length > 0 ? data[1] : undefined;\n      const [, table, constraint] = constraintData.split('.');\n\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: constraint,\n        cause: err,\n        table,\n      });\n    }\n\n    match = err.message.match(/SQL0204N {2}\"(.*)\" is an undefined name./);\n    if (match && match.length > 1) {\n      const constraint = match[1];\n      let table = err.sql.match(/table \"(.+?)\"/i);\n      table = table ? table[1] : undefined;\n\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[0],\n        constraint,\n        table,\n        cause: err,\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err);\n  }\n\n  isDropSchemaQuery() {\n    let result = false;\n\n    if (this.sql.startsWith('CALL SYSPROC.ADMIN_DROP_SCHEMA')) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith('select c.column_name as \\'name\\', c.data_type as \\'type\\', c.is_nullable as \\'isnull\\'');\n    result = result || this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n\n    return result;\n  }\n\n  handleShowIndexesQuery(data) {\n    const indexes = data.reduce((acc, curr) => {\n      if (acc.has(curr.name)) {\n        const index = acc.get(curr.name);\n        if (curr.columnOrder === 'I') {\n          index.includes.push(curr.columnName);\n        } else {\n          index.fields.push({\n            attribute: curr.columnName,\n            length: undefined,\n            order: curr.columnOrder === 'D' ? 'DESC' : curr.columnOrder === 'A' ? 'ASC' : undefined,\n            collate: undefined,\n          });\n        }\n\n        return acc;\n      }\n\n      acc.set(curr.name, {\n        primary: curr.keyType === 'P',\n        fields: curr.columnOrder === 'I' ? [] : [{\n          attribute: curr.columnName,\n          length: undefined,\n          order: curr.columnOrder === 'D' ? 'DESC' : 'ASC',\n          collate: undefined,\n        }],\n        includes: curr.columnOrder === 'I' ? [curr.columnName] : [],\n        name: curr.name,\n        tableName: curr.tableName,\n        unique: curr.keyType === 'U',\n        type: curr.type,\n      });\n\n      return acc;\n    }, new Map());\n\n    return Array.from(indexes.values());\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (!this.instance) {\n      return;\n    }\n\n    const modelDefinition = this.model.modelDefinition;\n    if (!modelDefinition.autoIncrementAttributeName) {\n      return;\n    }\n\n    const autoIncrementAttribute = modelDefinition.attributes.get(modelDefinition.autoIncrementAttributeName);\n\n    const id = (results?.[0][this.getInsertIdField()])\n      ?? (metaData?.[this.getInsertIdField()])\n      ?? (results?.[0][autoIncrementAttribute.columnName]);\n\n    this.instance[autoIncrementAttribute.attributeName] = id;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,yBAAmB;AACnB,mBAA8B;AAC9B,oBAAuB;AAEvB,oBAAmB;AAEnB,MAAM,kBAAkB,QAAQ,cAAc;AAE9C,MAAM,QAAQ,qBAAO,aAAa,SAAS;AAEpC,MAAM,iBAAiB,2BAAc;AAAA,EAC1C,mBAAmB;AACjB,WAAO;AAAA,EACT;AAAA,EAEA,qBAAqB,OAAO;AAC1B,QAAI,OAAO,SAAS,KAAK,GAAG;AAC1B,aAAO,EAAE,WAAW,SAAS,UAAU,QAAQ,MAAM,MAAM;AAAA,IAC7D;AAEA,QAAI,OAAO,UAAU,UAAU;AAE7B,aAAO,MAAM,SAAS;AAAA,IACxB;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,KAAK,YAAY,KAAK,YAAY;AACtC,2BAAAA,SAAO,OAAO,QAAQ,UAAU,gCAAgC;AAEhE,SAAK,MAAM;AAEX,UAAM,WAAW,KAAK,UAAU,KAAK,OAAO,UAAU;AAEtD,QAAI,KAAK,IAAI,WAAW,mBAAmB,GAAG;AAC5C,UAAI;AACF,cAAM,WAAW,iBAAiB;AAAA,MACpC,SAAS,OAAP;AACA,cAAM,KAAK,YAAY,KAAK;AAAA,MAC9B;AAEA,aAAO,KAAK,cAAc;AAAA,IAC5B;AAEA,QAAI,KAAK,IAAI,WAAW,oBAAoB,GAAG;AAC7C,UAAI;AACF,cAAM,WAAW,kBAAkB;AAAA,MACrC,SAAS,OAAP;AACA,cAAM,KAAK,YAAY,KAAK;AAAA,MAC9B;AAEA,aAAO,KAAK,cAAc;AAAA,IAC5B;AAEA,QAAI,KAAK,IAAI,WAAW,sBAAsB,GAAG;AAC/C,UAAI;AACF,cAAM,WAAW,oBAAoB;AAAA,MACvC,SAAS,OAAP;AACA,cAAM,KAAK,YAAY,KAAK;AAAA,MAC9B;AAEA,aAAO,KAAK,cAAc;AAAA,IAC5B;AAEA,QAAI,KAAK,IAAI,WAAW,kBAAkB,GAAG;AAC3C,UAAI;AAEF,cAAM,WAAW,kBAAkB;AACnC,cAAM,WAAW,iBAAiB;AAAA,MACpC,SAAS,OAAP;AACA,cAAM,KAAK,YAAY,KAAK;AAAA,MAC9B;AAEA,aAAO,KAAK,cAAc;AAAA,IAC5B;AAEA,UAAM,SAAS,CAAC;AAChB,QAAI,YAAY;AACd,wBAAAC,SAAO,YAAY,CAAC,OAAO,QAAQ;AACjC,cAAM,QAAQ,KAAK,qBAAqB,OAAO,GAAG;AAClD,eAAO,KAAK,KAAK;AAAA,MACnB,CAAC;AAAA,IACH;AAEA,UAAM,MAAM,KAAK,IAAI,YAAY;AACjC,QAAI,SAAS,KAAK;AAGlB,SAAK,KAAK,cAAc,KAAK,IAAI,WAAW,SAAS,MAC1C,CAAC,IAAI,SAAS,UAAU,CAAC,GAAG;AACrC,UAAI,KAAK,IAAI,GAAG,EAAE,MAAM,KAAK;AAC3B,iBAAS,KAAK,IAAI,MAAM,GAAG,EAAE;AAAA,MAC/B;AAEA,gBAAU;AAAA,IACZ;AAEA,QAAI;AACJ,QAAI;AACF,aAAO,MAAM,WAAW,QAAQ,MAAM;AAAA,IACxC,SAAS,OAAP;AACA,YAAM,KAAK,YAAY,KAAK;AAAA,IAC9B;AAEA,QAAI;AACJ,QAAI;AAEF,YAAM,MAAM,KAAK,SAAS,MAAM,MAAM;AAAA,IACxC,SAAS,OAAP;AACA,UAAI,MAAM,SAAS;AAEjB,gBAAQ,KAAK,eAAe,OAAO,KAAK,KAAK,UAAU;AACvD,YAAI,UAAU,MAAM;AAClB,eAAK,UAAU;AAEf,iBAAO,KAAK,cAAc,CAAC,GAAG,CAAC;AAAA,QACjC;AAAA,MACF;AAEA,YAAM,MAAM;AACZ,WAAK,UAAU;AACf,YAAM,KAAK,YAAY,OAAO,YAAY,UAAU;AAAA,IACtD;AAEA,UAAM,EAAE,QAAQ,UAAU,IAAI;AAE9B,aAAS;AAIT,QAAI,aAAa,KAAK,QAAQ,sBAAsB,KAAK,QAAQ,sBAAsB;AACrF,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,mBAAmB,QAAQ,KAAK;AAC/D,cAAM,YAAY,KAAK,QAAQ,mBAAmB,CAAC;AACnD,cAAM,aAAa,UAAU,CAAC;AAE9B,aAAK,QAAQ,qBAAqB,IAAI,WAAW,UAAU;AAAA,MAC7D;AAAA,IACF;AAEA,QAAI,OAAO,CAAC;AACZ,QAAI,WAAW,CAAC;AAChB,QAAI,eAAe;AACnB,QAAI,OAAO,WAAW,UAAU;AAC9B,UAAI,KAAK,IAAI,WAAW,cAAc,GAAG;AACvC,uBAAe,OAAO,oBAAoB;AAAA,MAC5C,OAAO;AACL,eAAO,OAAO,aAAa;AAC3B,mBAAW,OAAO,sBAAsB;AAAA,MAC1C;AAEA,aAAO,UAAU;AAAA,IACnB;AAEA,SAAK,UAAU;AACf,UAAM,UAAU,KAAK;AACrB,QAAI,UAAU,GAAG;AACf,YAAM,WAAW,CAAC;AAClB,iBAAW,aAAa,UAAU;AAChC,iBAAS,UAAU,aAAa,IAAI,UAAU;AAAA,MAChD;AAEA,eAAS,IAAI,GAAG,IAAI,SAAS,KAAK;AAChC,mBAAW,UAAU,KAAK,CAAC,GAAG;AAC5B,gBAAM,QAAQ,KAAK,CAAC,EAAE,MAAM;AAC5B,cAAI,UAAU,MAAM;AAClB;AAAA,UACF;AAEA,gBAAM,QAAQ,KAAK,UAAU,QAAQ,6BAA6B,SAAS,MAAM,CAAC;AAClF,cAAI,OAAO;AACT,iBAAK,CAAC,EAAE,MAAM,IAAI,MAAM,KAAK;AAAA,UAC/B;AAAA,QACF;AAAA,MACF;AAEA,UAAI,aAAa,UAAU,SAAS,GAAG;AACrC,aAAK,QAAQ,SAAS;AAAA,MACxB;AAEA,aAAO,KAAK,cAAc,MAAM,SAAS,UAAU,UAAU;AAAA,IAC/D;AAEA,WAAO,KAAK,cAAc,MAAM,YAAY;AAAA,EAC9C;AAAA,EAEA,MAAM,IAAI,KAAK,YAAY;AACzB,WAAO,MAAM,KAAK,KAAK,KAAK,YAAY,KAAK,UAAU;AAAA,EACzD;AAAA,EAEA,SAAS,MAAM,QAAQ;AACrB,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,WAAK,QAAQ,QAAQ,CAAC,KAAK,QAAQ,cAAc;AAC/C,YAAI,KAAK;AACP,iBAAO,GAAG;AAAA,QACZ,OAAO;AACL,kBAAQ,EAAE,QAAQ,UAAU,CAAC;AAAA,QAC/B;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EAEA,eAAe,KAAK,KAAK,YAAY;AAGnC,QAAI,IAAI,QAAQ,OAAO,UAAU,MAAM,IAAI;AACzC,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,cAAc,MAAM,UAAU,UAAU,MAAM;AAC5C,QAAI,SAAS,KAAK;AAClB,QAAI,KAAK,cAAc,MAAM,QAAQ,GAAG;AACtC,WAAK,kBAAkB,MAAM,QAAQ;AAErC,UAAI,CAAC,KAAK,UAAU;AAClB,YAAI,KAAK,QAAQ,OAAO;AACtB,gBAAM,SAAS,KAAK,CAAC;AACrB,mBAAS,OAAO,OAAO,KAAK,MAAM,EAAE,CAAC,CAAC;AAAA,QACxC,OAAO;AACL,mBAAS;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,QAAI,KAAK,gBAAgB,GAAG;AAC1B,eAAS,CAAC;AACV,iBAAW,WAAW,MAAM;AAC1B,YAAI,QAAQ,SAAS;AACnB,kBAAQ,UAAU,QAAQ,QAAQ,QAAQ,MAAO,EAAE,EAAE,QAAQ,MAAO,EAAE,EAAE,WAAW,KAAM,EAAE;AAAA,QAC7F;AAEA,eAAO,QAAQ,IAAI,IAAI;AAAA,UACrB,MAAM,QAAQ,KAAK,YAAY;AAAA,UAC/B,WAAW,QAAQ,WAAW;AAAA,UAC9B,cAAc,QAAQ;AAAA,UACtB,YAAY,QAAQ,SAAS;AAAA,UAC7B,eAAe,QAAQ,eAAe;AAAA,UACtC,SAAS,QAAQ;AAAA,QACnB;AAAA,MACF;AAAA,IACF,WAAW,KAAK,mBAAmB,GAAG;AACpC,eAAS,KAAK,uBAAuB,IAAI;AAAA,IAC3C,WAAW,KAAK,cAAc,GAAG;AAC/B,eAAS,KAAK,kBAAkB,IAAI;AAAA,IACtC,WAAW,KAAK,cAAc,GAAG;AAC/B,eAAS;AAAA,IACX,WAAW,KAAK,kBAAkB,GAAG;AACnC,eAAS,KAAK,CAAC;AACf,UAAI,MAAM;AACR,cAAM,QAAQ;AACd,aAAK,UAAU,KAAK;AAAA,MACtB;AAAA,IACF,WAAW,KAAK,YAAY,GAAG;AAC7B,eAAS;AAAA,IACX,WAAW,KAAK,kBAAkB,GAAG;AACnC,eAAS,KAAK;AAAA,IAChB,WAAW,KAAK,kBAAkB,GAAG;AACnC,eAAS;AAAA,IACX,WAAW,KAAK,cAAc,KAAK,KAAK,cAAc,GAAG;AACvD,eAAS,CAAC,QAAQ,QAAQ;AAAA,IAC5B,WAAW,KAAK,uBAAuB,GAAG;AACxC,eAAS;AAAA,IACX,WAAW,KAAK,WAAW,GAAG;AAE5B,eAAS,CAAC,MAAM,QAAQ;AAAA,IAC1B,OAAO;AACL,eAAS;AAAA,IACX;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,YAAY,KAAK,MAAM,YAAY;AACjC,QAAI;AAEJ,QAAI,EAAE,OAAO,IAAI,UAAU;AACzB,UAAI,UAAU;AAAA,IAChB;AAEA,YAAQ,IAAI,QAAQ,MAAM,2SAA2S;AACrU,QAAI,SAAS,MAAM,SAAS,GAAG;AAC7B,UAAI,kBAAkB;AACtB,UAAI,YAAY;AAChB,YAAM,SAAS,CAAC;AAChB,UAAI,UAAU,IAAI;AAClB,YAAM,QAAQ,mDAAmD,MAAM,CAAC,sBAAsB,MAAM,CAAC,qBAAqB,MAAM,CAAC;AAEjI,UAAI,QAAQ,IAAI,KAAK,MAAM,SAAS,GAAG;AACrC,0BAAkB,KAAK,UAAU,KAAK;AACtC,0BAAkB,gBAAgB,CAAC,EAAE;AAAA,MACvC;AAEA,UAAI,KAAK,SAAS,QAAQ,eAAe,GAAG;AAC1C,oBAAY,KAAK,MAAM,WAAW,EAAE,KAAK,WAAS,MAAM,UAAU,MAAM,SAAS,eAAe;AAAA,MAClG;AAEA,UAAI,CAAC,aAAa,KAAK,QAAQ,QAAQ;AACrC,oBAAY,KAAK,QAAQ,OAAO,MAAM,CAAC,IAAI,CAAC;AAAA,MAC9C;AAEA,UAAI,WAAW;AAEb,YAAI,KAAK,QAAQ,SACZ,KAAK,QAAQ,MAAM,UAAU,MAAM,MAAM,QAAW;AACvD,iBAAO,UAAU,MAAM,IAAI,KAAK,QAAQ,MAAM,UAAU,MAAM;AAAA,QAChE,WAAW,KAAK,QAAQ,YAAY,KAAK,QAAQ,SAAS,cACrD,KAAK,QAAQ,SAAS,WAAW,UAAU,MAAM,GAAG;AACvD,iBAAO,UAAU,MAAM,IAAI,KAAK,QAAQ,SAAS,WAAW,UAAU,MAAM;AAAA,QAC9E,WAAW,YAAY;AACrB,iBAAO,UAAU,MAAM,IAAI,WAAW,GAAG;AAAA,QAC3C;AAAA,MACF;AAEA,UAAI,aAAa,QAAQ,UAAU,GAAG,GAAG;AACvC,kBAAU,UAAU;AAAA,MACtB;AAEA,YAAM,SAAS,CAAC;AAChB,wBAAAA,SAAO,QAAQ,CAAC,OAAO,UAAU;AAC/B,eAAO,KAAK,IAAI,gBAAgB;AAAA,UAC9B,KAAK,gCAAgC,KAAK;AAAA,UAC1C;AAAA;AAAA,UACA;AAAA,UACA;AAAA,UACA,KAAK;AAAA,UACL;AAAA,QACF,CAAC;AAAA,MACH,CAAC;AAED,aAAO,IAAI,gBAAgB,sBAAsB,EAAE,SAAS,QAAQ,OAAO,KAAK,OAAO,CAAC;AAAA,IAC1F;AAEA,YAAQ,IAAI,QAAQ,MAAM,mGAAmG,KACxH,IAAI,QAAQ,MAAM,UAAU,KAC5B,IAAI,QAAQ,MAAM,UAAU;AACjC,QAAI,SAAS,MAAM,SAAS,GAAG;AAC7B,YAAM,OAAO,IAAI,QAAQ,MAAM,gBAAgB;AAC/C,YAAM,iBAAiB,QAAQ,KAAK,SAAS,IAAI,KAAK,CAAC,IAAI;AAC3D,YAAM,CAAC,EAAE,OAAO,UAAU,IAAI,eAAe,MAAM,GAAG;AAEtD,aAAO,IAAI,gBAAgB,0BAA0B;AAAA,QACnD,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,OAAO;AAAA,QACP;AAAA,MACF,CAAC;AAAA,IACH;AAEA,YAAQ,IAAI,QAAQ,MAAM,0CAA0C;AACpE,QAAI,SAAS,MAAM,SAAS,GAAG;AAC7B,YAAM,aAAa,MAAM,CAAC;AAC1B,UAAI,QAAQ,IAAI,IAAI,MAAM,gBAAgB;AAC1C,cAAQ,QAAQ,MAAM,CAAC,IAAI;AAE3B,aAAO,IAAI,gBAAgB,uBAAuB;AAAA,QAChD,SAAS,MAAM,CAAC;AAAA,QAChB;AAAA,QACA;AAAA,QACA,OAAO;AAAA,MACT,CAAC;AAAA,IACH;AAEA,WAAO,IAAI,gBAAgB,cAAc,GAAG;AAAA,EAC9C;AAAA,EAEA,oBAAoB;AAClB,QAAI,SAAS;AAEb,QAAI,KAAK,IAAI,WAAW,gCAAgC,GAAG;AACzD,eAAS;AAAA,IACX;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,wBAAwB;AACtB,QAAI,SAAS;AAEb,aAAS,UAAU,KAAK,IAAI,YAAY,EAAE,WAAW,kFAAwF;AAC7I,aAAS,UAAU,KAAK,IAAI,YAAY,EAAE,WAAW,6CAA6C;AAClG,aAAS,UAAU,KAAK,IAAI,YAAY,EAAE,WAAW,gCAAgC;AAErF,WAAO;AAAA,EACT;AAAA,EAEA,uBAAuB,MAAM;AAC3B,UAAM,UAAU,KAAK,OAAO,CAAC,KAAK,SAAS;AACzC,UAAI,IAAI,IAAI,KAAK,IAAI,GAAG;AACtB,cAAM,QAAQ,IAAI,IAAI,KAAK,IAAI;AAC/B,YAAI,KAAK,gBAAgB,KAAK;AAC5B,gBAAM,SAAS,KAAK,KAAK,UAAU;AAAA,QACrC,OAAO;AACL,gBAAM,OAAO,KAAK;AAAA,YAChB,WAAW,KAAK;AAAA,YAChB,QAAQ;AAAA,YACR,OAAO,KAAK,gBAAgB,MAAM,SAAS,KAAK,gBAAgB,MAAM,QAAQ;AAAA,YAC9E,SAAS;AAAA,UACX,CAAC;AAAA,QACH;AAEA,eAAO;AAAA,MACT;AAEA,UAAI,IAAI,KAAK,MAAM;AAAA,QACjB,SAAS,KAAK,YAAY;AAAA,QAC1B,QAAQ,KAAK,gBAAgB,MAAM,CAAC,IAAI,CAAC;AAAA,UACvC,WAAW,KAAK;AAAA,UAChB,QAAQ;AAAA,UACR,OAAO,KAAK,gBAAgB,MAAM,SAAS;AAAA,UAC3C,SAAS;AAAA,QACX,CAAC;AAAA,QACD,UAAU,KAAK,gBAAgB,MAAM,CAAC,KAAK,UAAU,IAAI,CAAC;AAAA,QAC1D,MAAM,KAAK;AAAA,QACX,WAAW,KAAK;AAAA,QAChB,QAAQ,KAAK,YAAY;AAAA,QACzB,MAAM,KAAK;AAAA,MACb,CAAC;AAED,aAAO;AAAA,IACT,GAAG,oBAAI,IAAI,CAAC;AAEZ,WAAO,MAAM,KAAK,QAAQ,OAAO,CAAC;AAAA,EACpC;AAAA,EAEA,kBAAkB,SAAS,UAAU;AACnC,QAAI,CAAC,KAAK,UAAU;AAClB;AAAA,IACF;AAEA,UAAM,kBAAkB,KAAK,MAAM;AACnC,QAAI,CAAC,gBAAgB,4BAA4B;AAC/C;AAAA,IACF;AAEA,UAAM,yBAAyB,gBAAgB,WAAW,IAAI,gBAAgB,0BAA0B;AAExG,UAAM,MAAM,mCAAU,GAAG,KAAK,iBAAiB,QACzC,qCAAW,KAAK,iBAAiB,QACjC,mCAAU,GAAG,uBAAuB;AAE1C,SAAK,SAAS,uBAAuB,aAAa,IAAI;AAAA,EACxD;AACF;",
  "names": ["assert", "forOwn"]
}
