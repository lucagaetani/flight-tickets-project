{
  "version": 3,
  "sources": ["../../../src/dialects/db2/data-types.ts"],
  "sourcesContent": ["import dayjs from 'dayjs';\nimport maxBy from 'lodash/maxBy.js';\nimport * as BaseTypes from '../abstract/data-types.js';\nimport type { AcceptedDate } from '../abstract/data-types.js';\nimport type { AbstractDialect } from '../abstract/index.js';\n\nfunction removeUnsupportedIntegerOptions(dataType: BaseTypes.BaseIntegerDataType, dialect: AbstractDialect) {\n  if (dataType.options.length != null) {\n    // this option only makes sense for zerofill\n    dialect.warnDataTypeIssue(`${dialect.name} does not support ${dataType.getDataTypeId()} with length specified. This options is ignored.`);\n\n    delete dataType.options.length;\n  }\n}\n\nexport class BLOB extends BaseTypes.BLOB {\n  toSql() {\n    if (this.options.length != null) {\n      if (this.options.length.toLowerCase() === 'tiny') { // tiny = 255 bytes\n        return 'BLOB(255)';\n      }\n\n      if (this.options.length.toLowerCase() === 'medium') { // medium = 16M\n        return 'BLOB(16M)';\n      }\n\n      if (this.options.length.toLowerCase() === 'long') { // long = 2GB\n        return 'BLOB(2G)';\n      }\n\n      return `BLOB(${this.options.length})`;\n    }\n\n    return 'BLOB(1M)';\n  }\n}\n\nexport class STRING extends BaseTypes.STRING {\n  toSql() {\n    const length = this.options.length ?? 255;\n\n    if (this.options.binary) {\n      if (length <= 4000) {\n        return `VARCHAR(${length}) FOR BIT DATA`;\n      }\n\n      throw new Error(`${this._getDialect().name} does not support the BINARY option for data types with a length greater than 4000.`);\n    }\n\n    if (length <= 4000) {\n      return `VARCHAR(${length})`;\n    }\n\n    return `CLOB(${length})`;\n  }\n}\n\nexport class CHAR extends BaseTypes.CHAR {\n  toSql() {\n    if (this.options.binary) {\n      return `CHAR(${this.options.length ?? 255}) FOR BIT DATA`;\n    }\n\n    return super.toSql();\n  }\n}\n\nexport class TEXT extends BaseTypes.TEXT {\n  toSql() {\n    // default value for CLOB\n    let len = 2_147_483_647;\n    if (typeof this.options.length === 'string') {\n      switch (this.options.length.toLowerCase()) {\n        // 'tiny', 'medium' and 'long' are MySQL values.\n        // 'max' is dialect-dependant.\n        case 'tiny':\n          len = 2 ** 8;\n          break;\n        case 'medium':\n          len = 2 ** 24;\n          break;\n        case 'long':\n          // long would normally be 2 ** 32, but that's above the limit for DB2\n          len = 2_147_483_647;\n          break;\n        default:\n          throw new Error(`LENGTH value ${this.options.length} is not supported. Expected a number of one of the following strings: tiny, medium, long.`);\n      }\n    }\n\n    if (len > 32_672) {\n      return `CLOB(${len})`;\n    }\n\n    return `VARCHAR(${len})`;\n  }\n}\n\nexport class UUID extends BaseTypes.UUID {\n  toSql() {\n    return 'CHAR(36) FOR BIT DATA';\n  }\n}\n\nexport class NOW extends BaseTypes.NOW {\n  toSql() {\n    return 'CURRENT TIME';\n  }\n}\n\nexport class DATE extends BaseTypes.DATE {\n  protected _checkOptionSupport(dialect: AbstractDialect) {\n    super._checkOptionSupport(dialect);\n\n    if (this.options.precision != null && this.options.precision > 6) {\n      this.options.precision = 6;\n    }\n  }\n\n  toSql() {\n    return `TIMESTAMP${this.options.precision != null ? `(${this.options.precision})` : ''}`;\n  }\n\n  toBindableValue(date: AcceptedDate) {\n    date = dayjs(date).utc(false);\n\n    return date.format('YYYY-MM-DD HH:mm:ss.SSS');\n  }\n}\n\nexport class TINYINT extends BaseTypes.TINYINT {\n  protected _checkOptionSupport(dialect: AbstractDialect) {\n    super._checkOptionSupport(dialect);\n    removeUnsupportedIntegerOptions(this, dialect);\n  }\n\n  // TODO: add >= 0 =< 2^8-1 check when the unsigned option is true\n  // TODO: add >= -2^7 =< 2^7-1 check when the unsigned option is false\n\n  toSql(): string {\n    return 'SMALLINT';\n  }\n}\n\nexport class SMALLINT extends BaseTypes.SMALLINT {\n  protected _checkOptionSupport(dialect: AbstractDialect) {\n    super._checkOptionSupport(dialect);\n    removeUnsupportedIntegerOptions(this, dialect);\n  }\n\n  // TODO: add >= 0 =< 2^16-1 check when the unsigned option is true\n\n  toSql(): string {\n    if (this.options.unsigned) {\n      return 'INTEGER';\n    }\n\n    return 'SMALLINT';\n  }\n}\n\nexport class MEDIUMINT extends BaseTypes.MEDIUMINT {\n  protected _checkOptionSupport(dialect: AbstractDialect) {\n    super._checkOptionSupport(dialect);\n    removeUnsupportedIntegerOptions(this, dialect);\n  }\n\n  // TODO: add >= 0 =< 2^24-1 check when the unsigned option is true\n  // TODO: add >= -2^23 =< 2^23-1 check when the unsigned option is false\n\n  toSql(): string {\n    return 'INTEGER';\n  }\n}\n\nexport class INTEGER extends BaseTypes.INTEGER {\n  protected _checkOptionSupport(dialect: AbstractDialect) {\n    super._checkOptionSupport(dialect);\n    removeUnsupportedIntegerOptions(this, dialect);\n  }\n\n  // TODO: add >= 0 =< 2^32-1 check when the unsigned option is true\n\n  toSql(): string {\n    if (this.options.unsigned) {\n      return 'BIGINT';\n    }\n\n    return 'INTEGER';\n  }\n}\n\nexport class BIGINT extends BaseTypes.BIGINT {\n  protected _checkOptionSupport(dialect: AbstractDialect) {\n    super._checkOptionSupport(dialect);\n    removeUnsupportedIntegerOptions(this, dialect);\n  }\n}\n\nexport class FLOAT extends BaseTypes.FLOAT {\n  // TODO: add check constraint >= 0 if unsigned is true\n\n  getNumberSqlTypeName() {\n    return 'REAL';\n  }\n}\n\nexport class DOUBLE extends BaseTypes.DOUBLE {\n  // TODO: add check constraint >= 0 if unsigned is true\n\n  getNumberSqlTypeName() {\n    return 'DOUBLE';\n  }\n}\n\nexport class DECIMAL extends BaseTypes.DECIMAL {\n  // TODO: add check constraint >= 0 if unsigned is true\n}\n\nexport class ENUM<Member extends string> extends BaseTypes.ENUM<Member> {\n  toSql() {\n    const minLength = maxBy(this.options.values, value => value.length)?.length ?? 0;\n\n    // db2 does not have an ENUM type, we use VARCHAR instead.\n    return `VARCHAR(${Math.max(minLength, 255)})`;\n  }\n}\n"],
  "mappings": "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",
  "names": ["dayjs", "maxBy"]
}
