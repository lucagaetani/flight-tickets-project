{
  "version": 3,
  "sources": ["../../../src/dialects/db2/connection-manager.ts"],
  "sourcesContent": ["import assert from 'node:assert';\nimport NodeUtil from 'node:util';\nimport type { ConnStr, Database as Db2LibDatabase } from 'ibm_db';\nimport { ConnectionError, ConnectionRefusedError } from '../../errors/index.js';\nimport type { ConnectionOptions, Sequelize } from '../../sequelize.js';\nimport type { Connection } from '../abstract/connection-manager';\nimport { AbstractConnectionManager } from '../abstract/connection-manager';\nimport type { Db2Dialect } from './index.js';\n\n// TODO: once the code has been split into packages, we won't need to lazy load this anymore\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\ntype Lib = typeof import('ibm_db');\n\nexport interface Db2Connection extends Connection, Db2LibDatabase {\n  // properties added by us\n  // TODO: replace with Symbols.\n  lib: Lib;\n}\n\n/**\n * DB2 Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle DB2 specific connections\n * Use https://github.com/ibmdb/node-ibm_db to connect with DB2 server\n *\n * @private\n */\nexport class Db2ConnectionManager extends AbstractConnectionManager<Db2Connection> {\n  private readonly lib;\n\n  constructor(dialect: Db2Dialect, sequelize: Sequelize) {\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('ibm_db') as Lib;\n  }\n\n  /**\n   * Connect with DB2 database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   *\n   * @param config\n   * @returns\n   * @private\n   */\n  async connect(config: ConnectionOptions): Promise<Db2Connection> {\n    const connectionConfig: ConnStr = {\n      // @ts-expect-error -- Bad typings\n      DATABASE: config.database,\n      // @ts-expect-error -- Bad typings\n      HOSTNAME: config.host,\n      // @ts-expect-error -- Bad typings\n      PORT: config.port,\n      // @ts-expect-error -- Bad typings\n      UID: config.username,\n      // @ts-expect-error -- Bad typings\n      PWD: config.password,\n      ...(config.ssl ? { SECURITY: config.ssl } : undefined),\n      // TODO: pass this property through dialectOptions\n      // @ts-expect-error -- DB2 specific option that should not be at the top level\n      ...(config.sslcertificate ? { SSLServerCertificate: config.ssl } : undefined),\n      ...config.dialectOptions,\n    };\n\n    try {\n      return await new Promise((resolve, reject) => {\n        const connection = new this.lib.Database() as Db2Connection;\n        connection.lib = this.lib;\n        connection.open(connectionConfig, error => {\n          if (error) {\n            if (error.message && error.message.includes('SQL30081N')) {\n              return void reject(new ConnectionRefusedError(error));\n            }\n\n            return void reject(new ConnectionError(error));\n          }\n\n          return void resolve(connection);\n        });\n      });\n    } catch (error) {\n      assert(error instanceof Error, `DB2 threw a non-error value: ${NodeUtil.inspect(error)}`);\n\n      throw new ConnectionError(error);\n    }\n  }\n\n  async disconnect(connection: Db2Connection) {\n    // Don't disconnect a connection that is already disconnected\n    if (!connection.connected) {\n      return;\n    }\n\n    await connection.close();\n  }\n\n  validate(connection: Db2Connection): boolean {\n    return connection.connected;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAmB;AACnB,uBAAqB;AAErB,oBAAwD;AAGxD,gCAA0C;AAsBnC,MAAM,6BAA6B,oDAAyC;AAAA,EAChE;AAAA,EAEjB,YAAY,SAAqB,WAAsB;AACrD,UAAM,SAAS,SAAS;AACxB,SAAK,MAAM,KAAK,mBAAmB,QAAQ;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,QAAQ,QAAmD;AAC/D,UAAM,mBAA4B;AAAA;AAAA,MAEhC,UAAU,OAAO;AAAA;AAAA,MAEjB,UAAU,OAAO;AAAA;AAAA,MAEjB,MAAM,OAAO;AAAA;AAAA,MAEb,KAAK,OAAO;AAAA;AAAA,MAEZ,KAAK,OAAO;AAAA,MACZ,GAAI,OAAO,MAAM,EAAE,UAAU,OAAO,IAAI,IAAI;AAAA;AAAA;AAAA,MAG5C,GAAI,OAAO,iBAAiB,EAAE,sBAAsB,OAAO,IAAI,IAAI;AAAA,MACnE,GAAG,OAAO;AAAA,IACZ;AAEA,QAAI;AACF,aAAO,MAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC5C,cAAM,aAAa,IAAI,KAAK,IAAI,SAAS;AACzC,mBAAW,MAAM,KAAK;AACtB,mBAAW,KAAK,kBAAkB,WAAS;AACzC,cAAI,OAAO;AACT,gBAAI,MAAM,WAAW,MAAM,QAAQ,SAAS,WAAW,GAAG;AACxD,qBAAO,KAAK,OAAO,IAAI,qCAAuB,KAAK,CAAC;AAAA,YACtD;AAEA,mBAAO,KAAK,OAAO,IAAI,8BAAgB,KAAK,CAAC;AAAA,UAC/C;AAEA,iBAAO,KAAK,QAAQ,UAAU;AAAA,QAChC,CAAC;AAAA,MACH,CAAC;AAAA,IACH,SAAS,OAAP;AACA,6BAAAA,SAAO,iBAAiB,OAAO,gCAAgC,iBAAAC,QAAS,QAAQ,KAAK,GAAG;AAExF,YAAM,IAAI,8BAAgB,KAAK;AAAA,IACjC;AAAA,EACF;AAAA,EAEA,MAAM,WAAW,YAA2B;AAE1C,QAAI,CAAC,WAAW,WAAW;AACzB;AAAA,IACF;AAEA,UAAM,WAAW,MAAM;AAAA,EACzB;AAAA,EAEA,SAAS,YAAoC;AAC3C,WAAO,WAAW;AAAA,EACpB;AACF;",
  "names": ["assert", "NodeUtil"]
}
