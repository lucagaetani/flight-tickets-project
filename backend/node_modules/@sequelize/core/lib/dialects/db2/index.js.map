{
  "version": 3,
  "sources": ["../../../src/dialects/db2/index.ts"],
  "sourcesContent": ["import type { Sequelize } from '../../sequelize.js';\nimport { createUnspecifiedOrderedBindCollector } from '../../utils/sql';\nimport { AbstractDialect } from '../abstract';\nimport { Db2ConnectionManager } from './connection-manager';\nimport * as DataTypes from './data-types.js';\nimport { Db2Query } from './query';\nimport { Db2QueryGenerator } from './query-generator';\nimport { Db2QueryInterface } from './query-interface';\n\nexport class Db2Dialect extends AbstractDialect {\n  static supports = AbstractDialect.extendSupport({\n    migrations: false,\n    schemas: true,\n    finalTable: true,\n    autoIncrement: {\n      defaultValue: false,\n    },\n    alterColumn: {\n      unique: false,\n    },\n    index: {\n      collate: false,\n      using: false,\n      where: true,\n      include: true,\n    },\n    constraints: {\n      onUpdate: false,\n    },\n    tmpTableTrigger: true,\n    dataTypes: {\n      COLLATE_BINARY: true,\n      TIME: {\n        precision: false,\n      },\n    },\n    removeColumn: {\n      cascade: true,\n    },\n  });\n\n  readonly defaultVersion = '1.0.0';\n  readonly dataTypesDocumentationUrl = 'https://www.ibm.com/support/knowledgecenter/SSEPGG_11.1.0/com.ibm.db2.luw.sql.ref.doc/doc/r0008478.html';\n  readonly connectionManager: Db2ConnectionManager;\n  readonly queryGenerator: Db2QueryGenerator;\n  readonly queryInterface: Db2QueryInterface;\n  readonly Query = Db2Query;\n\n  readonly TICK_CHAR_LEFT = '\"';\n  readonly TICK_CHAR_RIGHT = '\"';\n\n  constructor(sequelize: Sequelize) {\n    super(sequelize, DataTypes, 'db2');\n    this.connectionManager = new Db2ConnectionManager(this, sequelize);\n    this.queryGenerator = new Db2QueryGenerator({\n      dialect: this,\n      sequelize,\n    });\n    this.queryInterface = new Db2QueryInterface(sequelize, this.queryGenerator);\n\n    this.registerDataTypeParser(['CHAR () FOR BIT DATA', 'VARCHAR () FOR BIT DATA'], value => {\n      return value.toString();\n    });\n\n    this.registerDataTypeParser(['TIMESTAMP'], value => {\n      // values are returned as UTC, but the UTC Offset is left unspecified.\n      return `${value}+00`;\n    });\n  }\n\n  createBindCollector() {\n    return createUnspecifiedOrderedBindCollector();\n  }\n\n  escapeBuffer(buffer: Buffer): string {\n    return `BLOB(${this.queryGenerator.escape(buffer.toString())})`;\n  }\n\n  getDefaultSchema(): string {\n    return this.sequelize.config.username.toUpperCase();\n  }\n\n  static getDefaultPort() {\n    return 3306;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,iBAAsD;AACtD,sBAAgC;AAChC,gCAAqC;AACrC,gBAA2B;AAC3B,mBAAyB;AACzB,6BAAkC;AAClC,6BAAkC;AAE3B,MAAM,mBAAmB,gCAAgB;AAAA,EAC9C,OAAO,WAAW,gCAAgB,cAAc;AAAA,IAC9C,YAAY;AAAA,IACZ,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,eAAe;AAAA,MACb,cAAc;AAAA,IAChB;AAAA,IACA,aAAa;AAAA,MACX,QAAQ;AAAA,IACV;AAAA,IACA,OAAO;AAAA,MACL,SAAS;AAAA,MACT,OAAO;AAAA,MACP,OAAO;AAAA,MACP,SAAS;AAAA,IACX;AAAA,IACA,aAAa;AAAA,MACX,UAAU;AAAA,IACZ;AAAA,IACA,iBAAiB;AAAA,IACjB,WAAW;AAAA,MACT,gBAAgB;AAAA,MAChB,MAAM;AAAA,QACJ,WAAW;AAAA,MACb;AAAA,IACF;AAAA,IACA,cAAc;AAAA,MACZ,SAAS;AAAA,IACX;AAAA,EACF,CAAC;AAAA,EAEQ,iBAAiB;AAAA,EACjB,4BAA4B;AAAA,EAC5B;AAAA,EACA;AAAA,EACA;AAAA,EACA,QAAQ;AAAA,EAER,iBAAiB;AAAA,EACjB,kBAAkB;AAAA,EAE3B,YAAY,WAAsB;AAChC,UAAM,WAAW,WAAW,KAAK;AACjC,SAAK,oBAAoB,IAAI,+CAAqB,MAAM,SAAS;AACjE,SAAK,iBAAiB,IAAI,yCAAkB;AAAA,MAC1C,SAAS;AAAA,MACT;AAAA,IACF,CAAC;AACD,SAAK,iBAAiB,IAAI,yCAAkB,WAAW,KAAK,cAAc;AAE1E,SAAK,uBAAuB,CAAC,wBAAwB,yBAAyB,GAAG,WAAS;AACxF,aAAO,MAAM,SAAS;AAAA,IACxB,CAAC;AAED,SAAK,uBAAuB,CAAC,WAAW,GAAG,WAAS;AAElD,aAAO,GAAG;AAAA,IACZ,CAAC;AAAA,EACH;AAAA,EAEA,sBAAsB;AACpB,eAAO,kDAAsC;AAAA,EAC/C;AAAA,EAEA,aAAa,QAAwB;AACnC,WAAO,QAAQ,KAAK,eAAe,OAAO,OAAO,SAAS,CAAC;AAAA,EAC7D;AAAA,EAEA,mBAA2B;AACzB,WAAO,KAAK,UAAU,OAAO,SAAS,YAAY;AAAA,EACpD;AAAA,EAEA,OAAO,iBAAiB;AACtB,WAAO;AAAA,EACT;AACF;",
  "names": []
}
