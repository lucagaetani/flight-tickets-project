{
  "version": 3,
  "sources": ["../../../src/dialects/mysql/query-generator-typescript.ts"],
  "sourcesContent": ["import { Op } from '../../operators.js';\nimport type { Expression } from '../../sequelize.js';\nimport { rejectInvalidOptions } from '../../utils/check';\nimport { joinSQLFragments } from '../../utils/join-sql-fragments';\nimport { buildJsonPath } from '../../utils/json.js';\nimport { generateIndexName } from '../../utils/string';\nimport { AbstractQueryGenerator } from '../abstract/query-generator';\nimport { REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS } from '../abstract/query-generator-typescript';\nimport type {\n  EscapeOptions,\n  QueryGeneratorOptions,\n  RemoveIndexQueryOptions,\n  TableNameOrModel,\n} from '../abstract/query-generator-typescript';\nimport type {\n  ListSchemasQueryOptions,\n  ListTablesQueryOptions,\n  ShowConstraintsQueryOptions,\n} from '../abstract/query-generator.types.js';\n\nconst REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS = new Set<keyof RemoveIndexQueryOptions>();\n\n/**\n * Temporary class to ease the TypeScript migration\n */\nexport class MySqlQueryGeneratorTypeScript extends AbstractQueryGenerator {\n  constructor(options: QueryGeneratorOptions) {\n    super(options);\n\n    this.whereSqlBuilder.setOperatorKeyword(Op.regexp, 'REGEXP');\n    this.whereSqlBuilder.setOperatorKeyword(Op.notRegexp, 'NOT REGEXP');\n  }\n\n  protected _getTechnicalSchemaNames() {\n    return ['MYSQL', 'INFORMATION_SCHEMA', 'PERFORMANCE_SCHEMA', 'SYS', 'mysql', 'information_schema', 'performance_schema', 'sys'];\n  }\n\n  listSchemasQuery(options?: ListSchemasQueryOptions) {\n    const schemasToSkip = this._getTechnicalSchemaNames();\n\n    if (options && Array.isArray(options?.skip)) {\n      schemasToSkip.push(...options.skip);\n    }\n\n    return joinSQLFragments([\n      'SELECT SCHEMA_NAME AS `schema`',\n      'FROM INFORMATION_SCHEMA.SCHEMATA',\n      `WHERE SCHEMA_NAME NOT IN (${schemasToSkip.map(schema => this.escape(schema)).join(', ')})`,\n    ]);\n  }\n\n  describeTableQuery(tableName: TableNameOrModel) {\n    return `SHOW FULL COLUMNS FROM ${this.quoteTable(tableName)};`;\n  }\n\n  listTablesQuery(options?: ListTablesQueryOptions) {\n    return joinSQLFragments([\n      'SELECT TABLE_NAME AS `tableName`,',\n      'TABLE_SCHEMA AS `schema`',\n      `FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'`,\n      options?.schema\n        ? `AND TABLE_SCHEMA = ${this.escape(options.schema)}`\n        : `AND TABLE_SCHEMA NOT IN (${this._getTechnicalSchemaNames().map(schema => this.escape(schema)).join(', ')})`,\n      'ORDER BY TABLE_SCHEMA, TABLE_NAME',\n    ]);\n  }\n\n  showConstraintsQuery(tableName: TableNameOrModel, options?: ShowConstraintsQueryOptions) {\n    const table = this.extractTableDetails(tableName);\n\n    return joinSQLFragments([\n      'SELECT c.CONSTRAINT_SCHEMA AS constraintSchema,',\n      'c.CONSTRAINT_NAME AS constraintName,',\n      'c.CONSTRAINT_TYPE AS constraintType,',\n      'c.TABLE_SCHEMA AS tableSchema,',\n      'c.TABLE_NAME AS tableName,',\n      'kcu.COLUMN_NAME AS columnNames,',\n      'kcu.REFERENCED_TABLE_SCHEMA AS referencedTableSchema,',\n      'kcu.REFERENCED_TABLE_NAME AS referencedTableName,',\n      'kcu.REFERENCED_COLUMN_NAME AS referencedColumnNames,',\n      'r.DELETE_RULE AS deleteAction,',\n      'r.UPDATE_RULE AS updateAction',\n      'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS c',\n      'LEFT JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS r ON c.CONSTRAINT_CATALOG = r.CONSTRAINT_CATALOG',\n      'AND c.CONSTRAINT_SCHEMA = r.CONSTRAINT_SCHEMA AND c.CONSTRAINT_NAME = r.CONSTRAINT_NAME AND c.TABLE_NAME = r.TABLE_NAME',\n      'LEFT JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu ON c.CONSTRAINT_CATALOG = kcu.CONSTRAINT_CATALOG',\n      'AND c.CONSTRAINT_SCHEMA = kcu.CONSTRAINT_SCHEMA AND c.CONSTRAINT_NAME = kcu.CONSTRAINT_NAME AND c.TABLE_NAME = kcu.TABLE_NAME',\n      `WHERE c.TABLE_NAME = ${this.escape(table.tableName)}`,\n      `AND c.TABLE_SCHEMA = ${this.escape(table.schema)}`,\n      options?.columnName ? `AND kcu.COLUMN_NAME = ${this.escape(options.columnName)}` : '',\n      options?.constraintName ? `AND c.CONSTRAINT_NAME = ${this.escape(options.constraintName)}` : '',\n      options?.constraintType ? `AND c.CONSTRAINT_TYPE = ${this.escape(options.constraintType)}` : '',\n      'ORDER BY c.CONSTRAINT_NAME, kcu.ORDINAL_POSITION',\n    ]);\n  }\n\n  showIndexesQuery(tableName: TableNameOrModel) {\n    return `SHOW INDEX FROM ${this.quoteTable(tableName)}`;\n  }\n\n  getToggleForeignKeyChecksQuery(enable: boolean): string {\n    return `SET FOREIGN_KEY_CHECKS=${enable ? '1' : '0'}`;\n  }\n\n  removeIndexQuery(\n    tableName: TableNameOrModel,\n    indexNameOrAttributes: string | string[],\n    options?: RemoveIndexQueryOptions,\n  ) {\n    if (options) {\n      rejectInvalidOptions(\n        'removeIndexQuery',\n        this.dialect.name,\n        REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS,\n        REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    let indexName: string;\n    if (Array.isArray(indexNameOrAttributes)) {\n      const table = this.extractTableDetails(tableName);\n      indexName = generateIndexName(table, { fields: indexNameOrAttributes });\n    } else {\n      indexName = indexNameOrAttributes;\n    }\n\n    return `DROP INDEX ${this.quoteIdentifier(indexName)} ON ${this.quoteTable(tableName)}`;\n  }\n\n  jsonPathExtractionQuery(sqlExpression: string, path: ReadonlyArray<number | string>, unquote: boolean): string {\n    const extractQuery = `json_extract(${sqlExpression},${this.escape(buildJsonPath(path))})`;\n    if (unquote) {\n      return `json_unquote(${extractQuery})`;\n    }\n\n    return extractQuery;\n  }\n\n  formatUnquoteJson(arg: Expression, options?: EscapeOptions) {\n    return `json_unquote(${this.escape(arg, options)})`;\n  }\n\n  versionQuery() {\n    return 'SELECT VERSION() as `version`';\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
