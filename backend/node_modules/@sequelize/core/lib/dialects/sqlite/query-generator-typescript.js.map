{
  "version": 3,
  "sources": ["../../../src/dialects/sqlite/query-generator-typescript.ts"],
  "sourcesContent": ["import { randomBytes } from 'node:crypto';\nimport { rejectInvalidOptions } from '../../utils/check';\nimport { joinSQLFragments } from '../../utils/join-sql-fragments';\nimport { generateIndexName } from '../../utils/string';\nimport { AbstractQueryGenerator } from '../abstract/query-generator';\nimport {\n  LIST_TABLES_QUERY_SUPPORTABLE_OPTIONS,\n  REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS,\n} from '../abstract/query-generator-typescript';\nimport type { RemoveIndexQueryOptions, TableNameOrModel } from '../abstract/query-generator-typescript';\nimport type {\n  ListTablesQueryOptions,\n  RemoveColumnQueryOptions,\n  ShowConstraintsQueryOptions,\n} from '../abstract/query-generator.types';\nimport type { ColumnsDescription } from '../abstract/query-interface.types';\n\nconst LIST_TABLES_QUERY_SUPPORTED_OPTIONS = new Set<keyof ListTablesQueryOptions>();\nconst REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS = new Set<keyof RemoveIndexQueryOptions>(['ifExists']);\n\n/**\n * Temporary class to ease the TypeScript migration\n */\nexport class SqliteQueryGeneratorTypeScript extends AbstractQueryGenerator {\n  createSchemaQuery(): string {\n    throw new Error(`Schemas are not supported in ${this.dialect.name}.`);\n  }\n\n  dropSchemaQuery(): string {\n    throw new Error(`Schemas are not supported in ${this.dialect.name}.`);\n  }\n\n  describeTableQuery(tableName: TableNameOrModel) {\n    return `PRAGMA TABLE_INFO(${this.quoteTable(tableName)})`;\n  }\n\n  describeCreateTableQuery(tableName: TableNameOrModel) {\n    return `SELECT sql FROM sqlite_master WHERE tbl_name = ${this.escapeTable(tableName)};`;\n  }\n\n  listTablesQuery(options?: ListTablesQueryOptions) {\n    if (options) {\n      rejectInvalidOptions(\n        'listTablesQuery',\n        this.dialect.name,\n        LIST_TABLES_QUERY_SUPPORTABLE_OPTIONS,\n        LIST_TABLES_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    return 'SELECT name AS `tableName` FROM sqlite_master WHERE type=\\'table\\' AND name != \\'sqlite_sequence\\'';\n  }\n\n  showConstraintsQuery(tableName: TableNameOrModel, _options?: ShowConstraintsQueryOptions) {\n    return joinSQLFragments([\n      'SELECT sql FROM sqlite_master',\n      `WHERE tbl_name = ${this.escapeTable(tableName)}`,\n    ]);\n  }\n\n  showIndexesQuery(tableName: TableNameOrModel) {\n    return `PRAGMA INDEX_LIST(${this.quoteTable(tableName)})`;\n  }\n\n  getToggleForeignKeyChecksQuery(enable: boolean): string {\n    return `PRAGMA foreign_keys = ${enable ? 'ON' : 'OFF'}`;\n  }\n\n  removeColumnQuery(_table: TableNameOrModel, _columnName: string, _options?: RemoveColumnQueryOptions): string {\n    throw new Error(`removeColumnQuery is not supported in ${this.dialect.name}.`);\n  }\n\n  removeIndexQuery(\n    tableName: TableNameOrModel,\n    indexNameOrAttributes: string | string[],\n    options?: RemoveIndexQueryOptions,\n  ) {\n    if (options) {\n      rejectInvalidOptions(\n        'removeIndexQuery',\n        this.dialect.name,\n        REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS,\n        REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    let indexName: string;\n    if (Array.isArray(indexNameOrAttributes)) {\n      const table = this.extractTableDetails(tableName);\n      indexName = generateIndexName(table, { fields: indexNameOrAttributes });\n    } else {\n      indexName = indexNameOrAttributes;\n    }\n\n    return joinSQLFragments([\n      'DROP INDEX',\n      options?.ifExists ? 'IF EXISTS' : '',\n      this.quoteIdentifier(indexName),\n    ]);\n  }\n\n  _replaceTableQuery(tableName: TableNameOrModel, attributes: ColumnsDescription, createTableSql?: string) {\n    const table = this.extractTableDetails(tableName);\n    const backupTable = this.extractTableDetails(`${table.tableName}_${randomBytes(8).toString('hex')}`, table);\n    const quotedTableName = this.quoteTable(table);\n    const quotedBackupTableName = this.quoteTable(backupTable);\n\n    const tableAttributes = this.attributesToSQL(attributes);\n    const attributeNames = Object.keys(tableAttributes).map(attr => this.quoteIdentifier(attr)).join(', ');\n\n    const backupTableSql = createTableSql\n      ? `${createTableSql.replace(`CREATE TABLE ${quotedTableName}`, `CREATE TABLE ${quotedBackupTableName}`)};`\n      : this.createTableQuery(backupTable, tableAttributes);\n\n    return joinSQLFragments([\n      backupTableSql,\n      `INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};`,\n      `DROP TABLE ${quotedTableName};`,\n      `ALTER TABLE ${quotedBackupTableName} RENAME TO ${quotedTableName};`,\n    ]);\n  }\n\n  private escapeTable(tableName: TableNameOrModel): string {\n    const table = this.extractTableDetails(tableName);\n\n    if (table.schema) {\n      return this.escape(`${table.schema}${table.delimiter}${table.tableName}`);\n    }\n\n    return this.escape(table.tableName);\n  }\n\n  versionQuery() {\n    return 'SELECT sqlite_version() as `version`';\n  }\n\n  tableExistsQuery(tableName: TableNameOrModel): string {\n\n    return `SELECT name FROM sqlite_master WHERE type = 'table' AND name = ${this.escapeTable(tableName)}`;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
