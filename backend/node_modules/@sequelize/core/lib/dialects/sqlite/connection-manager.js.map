{
  "version": 3,
  "sources": ["../../../src/dialects/sqlite/connection-manager.ts"],
  "sourcesContent": ["import fs from 'node:fs';\nimport path from 'node:path';\nimport { promisify } from 'node:util';\nimport type { Database } from 'sqlite3';\nimport { ConnectionError } from '../../errors/index.js';\nimport type { Sequelize } from '../../sequelize.js';\nimport { map } from '../../utils/iterators.js';\nimport { logger } from '../../utils/logger';\nimport type { Connection, GetConnectionOptions } from '../abstract/connection-manager';\nimport { AbstractConnectionManager } from '../abstract/connection-manager';\nimport type { SqliteDialect } from './index.js';\n\nconst debug = logger.debugContext('connection:sqlite');\n\n// TODO: once the code has been split into packages, we won't need to lazy load this anymore\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\ntype Lib = typeof import('sqlite3');\n\ninterface SqliteConnection extends Connection, Database {\n  // Not declared by sqlite3's typings\n  filename: string;\n}\n\nexport class SqliteConnectionManager extends AbstractConnectionManager<SqliteConnection> {\n  private readonly lib: Lib;\n  private readonly connections = new Map<string, SqliteConnection>();\n\n  constructor(dialect: SqliteDialect, sequelize: Sequelize) {\n    super(dialect, sequelize);\n\n    // We attempt to parse file location from a connection uri\n    // but we shouldn't match sequelize default host.\n    if (this.sequelize.options.host === 'localhost') {\n      delete this.sequelize.options.host;\n    }\n\n    this.lib = this._loadDialectModule('sqlite3') as Lib;\n  }\n\n  async _onProcessExit() {\n    await Promise.all(\n      map(this.connections.values(), async connection => {\n        return promisify(connection.close.bind(connection))();\n      }),\n    );\n\n    return super._onProcessExit();\n  }\n\n  async getConnection(options: GetConnectionOptions): Promise<SqliteConnection> {\n    const connectionUuid = options.uuid || 'default';\n\n    // Using ?? instead of || is important because an empty string signals to SQLite to create a temporary disk-based database.\n    const storage = this.sequelize.options.storage\n      ?? this.sequelize.options.host\n      ?? ':memory:';\n\n    const inMemory = storage === ':memory:';\n\n    const defaultReadWriteMode = this.lib.OPEN_READWRITE | this.lib.OPEN_CREATE;\n    const readWriteMode = this.sequelize.options.dialectOptions?.mode || defaultReadWriteMode;\n\n    const connectionCacheKey = inMemory ? ':memory:' : connectionUuid;\n\n    if (this.connections.has(connectionCacheKey)) {\n      return this.connections.get(connectionCacheKey)!;\n    }\n\n    const storageDir = path.dirname(storage);\n\n    if (!inMemory && (readWriteMode & this.lib.OPEN_CREATE) !== 0 && !fs.existsSync(storageDir)) {\n      // automatic path provision for `options.storage`\n      fs.mkdirSync(storageDir, { recursive: true });\n    }\n\n    const connection = await new Promise<SqliteConnection>((resolve, reject) => {\n      const connectionInstance = new this.lib.Database(\n        storage,\n        readWriteMode,\n        (err: Error | null) => {\n          if (err) {\n            return void reject(new ConnectionError(err));\n          }\n\n          debug(`connection acquired ${connectionUuid}`);\n          this.connections.set(connectionCacheKey, connectionInstance);\n\n          resolve(connectionInstance);\n        },\n      ) as SqliteConnection;\n    });\n\n    await this._initDatabaseVersion(connection);\n\n    if (this.sequelize.config.password) {\n      // Make it possible to define and use password for sqlite encryption plugin like sqlcipher\n      connection.run(`PRAGMA KEY=${this.sequelize.escape(this.sequelize.config.password)}`);\n    }\n\n    if (this.sequelize.options.foreignKeys !== false) {\n      // Make it possible to define and use foreign key constraints unless\n      // explicitly disallowed. It's still opt-in per relation\n      connection.run('PRAGMA FOREIGN_KEYS=ON');\n    }\n\n    return connection;\n  }\n\n  async disconnect(_connection: SqliteConnection): Promise<void> {}\n\n  async releaseConnection(connection: SqliteConnection, force?: boolean): Promise<void> {\n    if (connection.filename === ':memory:' && force !== true) {\n      return;\n    }\n\n    if (connection.uuid) {\n      connection.close();\n      debug(`connection released ${connection.uuid}`);\n      this.connections.delete(connection.uuid);\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAe;AACf,uBAAiB;AACjB,uBAA0B;AAE1B,oBAAgC;AAEhC,uBAAoB;AACpB,oBAAuB;AAEvB,gCAA0C;AAG1C,MAAM,QAAQ,qBAAO,aAAa,mBAAmB;AAW9C,MAAM,gCAAgC,oDAA4C;AAAA,EACtE;AAAA,EACA,cAAc,oBAAI,IAA8B;AAAA,EAEjE,YAAY,SAAwB,WAAsB;AACxD,UAAM,SAAS,SAAS;AAIxB,QAAI,KAAK,UAAU,QAAQ,SAAS,aAAa;AAC/C,aAAO,KAAK,UAAU,QAAQ;AAAA,IAChC;AAEA,SAAK,MAAM,KAAK,mBAAmB,SAAS;AAAA,EAC9C;AAAA,EAEA,MAAM,iBAAiB;AACrB,UAAM,QAAQ;AAAA,UACZ,sBAAI,KAAK,YAAY,OAAO,GAAG,OAAM,eAAc;AACjD,mBAAO,4BAAU,WAAW,MAAM,KAAK,UAAU,CAAC,EAAE;AAAA,MACtD,CAAC;AAAA,IACH;AAEA,WAAO,MAAM,eAAe;AAAA,EAC9B;AAAA,EAEA,MAAM,cAAc,SAA0D;AAjDhF;AAkDI,UAAM,iBAAiB,QAAQ,QAAQ;AAGvC,UAAM,UAAU,KAAK,UAAU,QAAQ,WAClC,KAAK,UAAU,QAAQ,QACvB;AAEL,UAAM,WAAW,YAAY;AAE7B,UAAM,uBAAuB,KAAK,IAAI,iBAAiB,KAAK,IAAI;AAChE,UAAM,kBAAgB,UAAK,UAAU,QAAQ,mBAAvB,mBAAuC,SAAQ;AAErE,UAAM,qBAAqB,WAAW,aAAa;AAEnD,QAAI,KAAK,YAAY,IAAI,kBAAkB,GAAG;AAC5C,aAAO,KAAK,YAAY,IAAI,kBAAkB;AAAA,IAChD;AAEA,UAAM,aAAa,iBAAAA,QAAK,QAAQ,OAAO;AAEvC,QAAI,CAAC,aAAa,gBAAgB,KAAK,IAAI,iBAAiB,KAAK,CAAC,eAAAC,QAAG,WAAW,UAAU,GAAG;AAE3F,qBAAAA,QAAG,UAAU,YAAY,EAAE,WAAW,KAAK,CAAC;AAAA,IAC9C;AAEA,UAAM,aAAa,MAAM,IAAI,QAA0B,CAAC,SAAS,WAAW;AAC1E,YAAM,qBAAqB,IAAI,KAAK,IAAI;AAAA,QACtC;AAAA,QACA;AAAA,QACA,CAAC,QAAsB;AACrB,cAAI,KAAK;AACP,mBAAO,KAAK,OAAO,IAAI,8BAAgB,GAAG,CAAC;AAAA,UAC7C;AAEA,gBAAM,uBAAuB,gBAAgB;AAC7C,eAAK,YAAY,IAAI,oBAAoB,kBAAkB;AAE3D,kBAAQ,kBAAkB;AAAA,QAC5B;AAAA,MACF;AAAA,IACF,CAAC;AAED,UAAM,KAAK,qBAAqB,UAAU;AAE1C,QAAI,KAAK,UAAU,OAAO,UAAU;AAElC,iBAAW,IAAI,cAAc,KAAK,UAAU,OAAO,KAAK,UAAU,OAAO,QAAQ,GAAG;AAAA,IACtF;AAEA,QAAI,KAAK,UAAU,QAAQ,gBAAgB,OAAO;AAGhD,iBAAW,IAAI,wBAAwB;AAAA,IACzC;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,WAAW,aAA8C;AAAA,EAAC;AAAA,EAEhE,MAAM,kBAAkB,YAA8B,OAAgC;AACpF,QAAI,WAAW,aAAa,cAAc,UAAU,MAAM;AACxD;AAAA,IACF;AAEA,QAAI,WAAW,MAAM;AACnB,iBAAW,MAAM;AACjB,YAAM,uBAAuB,WAAW,MAAM;AAC9C,WAAK,YAAY,OAAO,WAAW,IAAI;AAAA,IACzC;AAAA,EACF;AACF;",
  "names": ["path", "fs"]
}
