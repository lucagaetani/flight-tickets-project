{
  "version": 3,
  "sources": ["../../../src/dialects/sqlite/index.ts"],
  "sourcesContent": ["import type { Sequelize } from '../../sequelize.js';\nimport { createNamedParamBindCollector } from '../../utils/sql';\nimport { AbstractDialect } from '../abstract';\nimport { SqliteConnectionManager } from './connection-manager';\nimport * as DataTypes from './data-types.js';\nimport { SqliteQuery } from './query';\nimport { SqliteQueryGenerator } from './query-generator';\nimport { SqliteQueryInterface } from './query-interface';\n\nexport class SqliteDialect extends AbstractDialect {\n  static supports = AbstractDialect.extendSupport({\n    DEFAULT: false,\n    'DEFAULT VALUES': true,\n    'UNION ALL': false,\n    'RIGHT JOIN': false,\n    inserts: {\n      ignoreDuplicates: ' OR IGNORE',\n      updateOnDuplicate: ' ON CONFLICT DO UPDATE SET',\n      conflictFields: true,\n      onConflictWhere: true,\n    },\n    index: {\n      using: false,\n      where: true,\n      functionBased: true,\n    },\n    transactionOptions: {\n      type: true,\n    },\n    constraints: {\n      foreignKeyChecksDisableable: true,\n      add: false,\n      remove: false,\n    },\n    groupedLimit: false,\n    dataTypes: {\n      CHAR: false,\n      COLLATE_BINARY: true,\n      CITEXT: true,\n      DECIMAL: false,\n      JSON: true,\n    },\n    // TODO: add support for JSON operations https://www.sqlite.org/json1.html (bundled in sqlite3)\n    //  be careful: json_extract, ->, and ->> don't have the exact same meanings as mysql & mariadb\n    jsonOperations: false,\n    jsonExtraction: {\n      unquoted: false,\n      quoted: false,\n    },\n  });\n\n  readonly defaultVersion = '3.8.0';\n  readonly Query = SqliteQuery;\n  readonly TICK_CHAR_LEFT = '`';\n  readonly TICK_CHAR_RIGHT = '`';\n  readonly connectionManager: SqliteConnectionManager;\n  readonly queryGenerator: SqliteQueryGenerator;\n  readonly queryInterface: SqliteQueryInterface;\n  readonly dataTypesDocumentationUrl = 'https://www.sqlite.org/datatype3.html';\n\n  constructor(sequelize: Sequelize) {\n    super(sequelize, DataTypes, 'sqlite');\n    this.connectionManager = new SqliteConnectionManager(this, sequelize);\n    this.queryGenerator = new SqliteQueryGenerator({\n      dialect: this,\n      sequelize,\n    });\n\n    this.queryInterface = new SqliteQueryInterface(\n      sequelize,\n      this.queryGenerator,\n    );\n  }\n\n  createBindCollector() {\n    return createNamedParamBindCollector('$');\n  }\n\n  getDefaultSchema(): string {\n    // Our SQLite implementation doesn't support schemas\n    return '';\n  }\n\n  static getDefaultPort() {\n    return 0;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,iBAA8C;AAC9C,sBAAgC;AAChC,gCAAwC;AACxC,gBAA2B;AAC3B,mBAA4B;AAC5B,6BAAqC;AACrC,6BAAqC;AAE9B,MAAM,sBAAsB,gCAAgB;AAAA,EACjD,OAAO,WAAW,gCAAgB,cAAc;AAAA,IAC9C,SAAS;AAAA,IACT,kBAAkB;AAAA,IAClB,aAAa;AAAA,IACb,cAAc;AAAA,IACd,SAAS;AAAA,MACP,kBAAkB;AAAA,MAClB,mBAAmB;AAAA,MACnB,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,IACnB;AAAA,IACA,OAAO;AAAA,MACL,OAAO;AAAA,MACP,OAAO;AAAA,MACP,eAAe;AAAA,IACjB;AAAA,IACA,oBAAoB;AAAA,MAClB,MAAM;AAAA,IACR;AAAA,IACA,aAAa;AAAA,MACX,6BAA6B;AAAA,MAC7B,KAAK;AAAA,MACL,QAAQ;AAAA,IACV;AAAA,IACA,cAAc;AAAA,IACd,WAAW;AAAA,MACT,MAAM;AAAA,MACN,gBAAgB;AAAA,MAChB,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,MAAM;AAAA,IACR;AAAA;AAAA;AAAA,IAGA,gBAAgB;AAAA,IAChB,gBAAgB;AAAA,MACd,UAAU;AAAA,MACV,QAAQ;AAAA,IACV;AAAA,EACF,CAAC;AAAA,EAEQ,iBAAiB;AAAA,EACjB,QAAQ;AAAA,EACR,iBAAiB;AAAA,EACjB,kBAAkB;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AAAA,EACA,4BAA4B;AAAA,EAErC,YAAY,WAAsB;AAChC,UAAM,WAAW,WAAW,QAAQ;AACpC,SAAK,oBAAoB,IAAI,kDAAwB,MAAM,SAAS;AACpE,SAAK,iBAAiB,IAAI,4CAAqB;AAAA,MAC7C,SAAS;AAAA,MACT;AAAA,IACF,CAAC;AAED,SAAK,iBAAiB,IAAI;AAAA,MACxB;AAAA,MACA,KAAK;AAAA,IACP;AAAA,EACF;AAAA,EAEA,sBAAsB;AACpB,eAAO,0CAA8B,GAAG;AAAA,EAC1C;AAAA,EAEA,mBAA2B;AAEzB,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,iBAAiB;AACtB,WAAO;AAAA,EACT;AACF;",
  "names": []
}
