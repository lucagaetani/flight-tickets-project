{
  "version": 3,
  "sources": ["../../../src/dialects/sqlite/data-types.ts"],
  "sourcesContent": ["import NodeUtil from 'node:util';\nimport { BaseError } from '../../errors/index.js';\nimport * as BaseTypes from '../abstract/data-types.js';\nimport type { AbstractDialect } from '../abstract/index.js';\n\nfunction removeUnsupportedIntegerOptions(dataType: BaseTypes.BaseIntegerDataType, dialect: AbstractDialect) {\n  if (dataType.options.length != null) {\n    dialect.warnDataTypeIssue(`${dialect.name} does not support '${dataType.getDataTypeId()}' with length. This option will be ignored.`);\n    delete dataType.options.length;\n  }\n}\n\nfunction removeUnsupportedDecimalNumberOptions(dataType: BaseTypes.BaseDecimalNumberDataType, dialect: AbstractDialect) {\n  if (dataType.options.scale != null || dataType.options.precision != null) {\n    dialect.warnDataTypeIssue(`${dialect.name} does not support '${dataType.getDataTypeId()}' with \"scale\" or \"precision\" specified. These options will be ignored.`);\n    dataType.options.scale = undefined;\n    dataType.options.precision = undefined;\n  }\n}\n\nexport class BOOLEAN extends BaseTypes.BOOLEAN {\n  // Note: the BOOLEAN type is SQLite maps to NUMERIC, but we still use BOOLEAN because introspecting the table\n  // still indicates that the column is a BOOLEAN column - which we may be able to exploit in the future to parse the value\n  // in raw queries where the DataType is not available.\n\n  escape(value: boolean): string {\n    return value ? '1' : '0';\n  }\n\n  toBindableValue(value: boolean): unknown {\n    return value ? 1 : 0;\n  }\n\n  toSql(): string {\n    return 'INTEGER';\n  }\n}\n\nexport class STRING extends BaseTypes.STRING {\n  // TODO: add length check constraint\n  //  check(length(col) <= 5))\n  toSql() {\n    if (this.options.binary) {\n      return `TEXT COLLATE BINARY`;\n    }\n\n    return 'TEXT';\n  }\n}\n\nexport class TEXT extends BaseTypes.TEXT {\n  protected _checkOptionSupport(dialect: AbstractDialect) {\n    super._checkOptionSupport(dialect);\n\n    if (this.options.length) {\n      dialect.warnDataTypeIssue(`${dialect.name} does not support TEXT with options. Plain 'TEXT' will be used instead.`);\n      this.options.length = undefined;\n    }\n  }\n}\n\nexport class CITEXT extends BaseTypes.CITEXT {\n  toSql() {\n    return 'TEXT COLLATE NOCASE';\n  }\n}\n\nexport class TINYINT extends BaseTypes.TINYINT {\n  protected _checkOptionSupport(dialect: AbstractDialect) {\n    super._checkOptionSupport(dialect);\n    removeUnsupportedIntegerOptions(this, dialect);\n  }\n\n  // TODO: add >= 0 =< 2^8-1 check when the unsigned option is true\n  // TODO: add >= -2^7 =< 2^7-1 check when the unsigned option is false\n\n  toSql(): string {\n    return 'INTEGER';\n  }\n}\n\nexport class SMALLINT extends BaseTypes.SMALLINT {\n  protected _checkOptionSupport(dialect: AbstractDialect) {\n    super._checkOptionSupport(dialect);\n    removeUnsupportedIntegerOptions(this, dialect);\n  }\n\n  // TODO: add >= 0 =< 2^16-1 check when the unsigned option is true\n  // TODO: add >= -2^15 =< 2^15-1 check when the unsigned option is false\n\n  toSql(): string {\n    return 'INTEGER';\n  }\n}\n\nexport class MEDIUMINT extends BaseTypes.MEDIUMINT {\n  protected _checkOptionSupport(dialect: AbstractDialect) {\n    super._checkOptionSupport(dialect);\n    removeUnsupportedIntegerOptions(this, dialect);\n  }\n\n  // TODO: add >= 0 =< 2^24-1 check when the unsigned option is true\n  // TODO: add >= -2^23 =< 2^23-1 check when the unsigned option is false\n\n  toSql(): string {\n    return 'INTEGER';\n  }\n}\n\nexport class INTEGER extends BaseTypes.INTEGER {\n  protected _checkOptionSupport(dialect: AbstractDialect) {\n    super._checkOptionSupport(dialect);\n    removeUnsupportedIntegerOptions(this, dialect);\n  }\n\n  // TODO: add >= 0 =< 2^32-1 check when the unsigned option is true\n  // TODO: add >= -2^31 =< 2^31-1 check when the unsigned option is false\n\n  toSql(): string {\n    return 'INTEGER';\n  }\n}\n\nexport class BIGINT extends BaseTypes.BIGINT {\n  protected _checkOptionSupport(dialect: AbstractDialect) {\n    super._checkOptionSupport(dialect);\n    removeUnsupportedIntegerOptions(this, dialect);\n  }\n\n  toSql(): string {\n    return 'INTEGER';\n  }\n}\n\nexport class FLOAT extends BaseTypes.FLOAT {\n  protected _checkOptionSupport(dialect: AbstractDialect) {\n    super._checkOptionSupport(dialect);\n    removeUnsupportedDecimalNumberOptions(this, dialect);\n    dialect.warnDataTypeIssue(`${dialect.name} does not support single-precision floating point numbers. SQLite's REAL type will be used instead, which in SQLite is a double-precision floating point type.`);\n  }\n\n  // TODO: add check constraint >= 0 if unsigned is true\n\n  protected getNumberSqlTypeName(): string {\n    return 'REAL';\n  }\n}\n\nexport class DOUBLE extends BaseTypes.DOUBLE {\n  protected _checkOptionSupport(dialect: AbstractDialect) {\n    super._checkOptionSupport(dialect);\n    removeUnsupportedDecimalNumberOptions(this, dialect);\n  }\n\n  // TODO: add check constraint >= 0 if unsigned is true\n\n  protected getNumberSqlTypeName(): string {\n    // in SQLite, REAL is 8 bytes, not 4.\n    return 'REAL';\n  }\n}\n\n/**\n * @deprecated use FLOAT.\n */\nexport class REAL extends BaseTypes.REAL {\n  protected _checkOptionSupport(dialect: AbstractDialect) {\n    super._checkOptionSupport(dialect);\n    removeUnsupportedDecimalNumberOptions(this, dialect);\n  }\n\n  protected getNumberSqlTypeName(): string {\n    // in SQLite, REAL is 8 bytes, not 4.\n    return 'REAL';\n  }\n}\n\nexport class TIME extends BaseTypes.TIME {\n  // TODO: add CHECK constraint\n  //  https://github.com/sequelize/sequelize/pull/14505#issuecomment-1259279743\n\n  toSql(): string {\n    return 'TEXT';\n  }\n}\n\nexport class DATE extends BaseTypes.DATE {\n  // TODO: add CHECK constraint\n  //  https://github.com/sequelize/sequelize/pull/14505#issuecomment-1259279743\n\n  toSql(): string {\n    return 'TEXT';\n  }\n}\n\nexport class DATEONLY extends BaseTypes.DATEONLY {\n  // TODO: add CHECK constraint\n  //  https://github.com/sequelize/sequelize/pull/14505#issuecomment-1259279743\n\n  toSql(): string {\n    return 'TEXT';\n  }\n}\n\nexport class BLOB extends BaseTypes.BLOB {\n  protected _checkOptionSupport(dialect: AbstractDialect) {\n    super._checkOptionSupport(dialect);\n\n    if (this.options.length) {\n      dialect.warnDataTypeIssue(`${dialect.name} does not support '${this.getDataTypeId()}' with length. This option will be ignored.`);\n      delete this.options.length;\n    }\n  }\n\n  toSql() {\n    return 'BLOB';\n  }\n}\n\nexport class JSON extends BaseTypes.JSON {\n  toBindableValue(value: any): string {\n    return globalThis.JSON.stringify(value);\n  }\n\n  parseDatabaseValue(value: unknown): unknown {\n    // sqlite3 being sqlite3, JSON numbers are returned as JS numbers, but everything else is returned as a JSON string\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    if (typeof value !== 'string') {\n      throw new Error(`DataTypes.JSON received a non-string value from the database, which it cannot parse: ${NodeUtil.inspect(value)}.`);\n    }\n\n    try {\n      return globalThis.JSON.parse(value);\n    } catch (error) {\n      throw new BaseError(`DataTypes.JSON received a value from the database that it not valid JSON: ${NodeUtil.inspect(value)}.`, { cause: error });\n    }\n  }\n\n  // TODO: add check constraint\n  //  https://www.sqlite.org/json1.html#jvalid\n  toSql(): string {\n    return 'TEXT';\n  }\n}\n\nexport class UUID extends BaseTypes.UUID {\n  // TODO: add check constraint to enforce GUID format\n  toSql() {\n    return 'TEXT';\n  }\n}\n\nexport class ENUM<Member extends string> extends BaseTypes.ENUM<Member> {\n  // TODO: add check constraint to enforce list of accepted values\n  toSql() {\n    return 'TEXT';\n  }\n}\n"],
  "mappings": "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",
  "names": ["NodeUtil"]
}
