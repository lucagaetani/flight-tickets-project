{
  "version": 3,
  "sources": ["../../../src/dialects/sqlite/query-interface.js"],
  "sourcesContent": ["'use strict';\n\nimport { noSchemaDelimiterParameter, noSchemaParameter } from '../../utils/deprecations';\n\nimport isEmpty from 'lodash/isEmpty';\n\nconst sequelizeErrors = require('../../errors');\nconst { QueryTypes } = require('../../query-types');\nconst { ColumnsDescription } = require('../abstract/query-interface.types');\nconst { QueryOptions } = require('../abstract/query-interface');\nconst { SqliteQueryInterfaceTypeScript } = require('./query-interface-typescript');\nconst crypto = require('node:crypto');\n\n/**\n * The interface that Sequelize uses to talk with SQLite database\n */\nexport class SqliteQueryInterface extends SqliteQueryInterfaceTypeScript {\n  /**\n   * A wrapper that fixes SQLite's inability to remove columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but without the obsolete column.\n   *\n   * @override\n   */\n  async removeColumn(tableName, columnName, options) {\n    const fields = await this.describeTable(tableName, options);\n    delete fields[columnName];\n\n    return this.alterTableInternal(tableName, fields, options);\n  }\n\n  /**\n   * A wrapper that fixes SQLite's inability to change columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but with a modified version of the respective column.\n   *\n   * @override\n   */\n  async changeColumn(tableName, columnName, dataTypeOrOptions, options) {\n    options = options || {};\n\n    const columns = await this.describeTable(tableName, options);\n    for (const column of Object.values(columns)) {\n      // This is handled by copying indexes over,\n      // we don't use \"unique\" because it creates an index with a name\n      // we can't control\n      delete column.unique;\n    }\n\n    Object.assign(columns[columnName], this.normalizeAttribute(dataTypeOrOptions));\n\n    return this.alterTableInternal(tableName, columns, options);\n  }\n\n  /**\n   * A wrapper that fixes SQLite's inability to rename columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but with a renamed version of the respective column.\n   *\n   * @override\n   */\n  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    const fields = await this.assertTableHasColumn(tableName, attrNameBefore, options);\n\n    fields[attrNameAfter] = { ...fields[attrNameBefore] };\n    delete fields[attrNameBefore];\n\n    const sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) {\n      await this.sequelize.queryRaw(`${subQuery};`, { raw: true, ...options });\n    }\n  }\n\n  /**\n   * @override\n   */\n  async describeTable(tableName, options) {\n    let table = {};\n\n    if (typeof tableName === 'string') {\n      table.tableName = tableName;\n    }\n\n    if (typeof tableName === 'object' && tableName !== null) {\n      table = tableName;\n    }\n\n    if (typeof options === 'string') {\n      noSchemaParameter();\n      table.schema = options;\n    }\n\n    if (typeof options === 'object' && options !== null) {\n      if (options.schema) {\n        noSchemaParameter();\n        table.schema = options.schema;\n      }\n\n      if (options.schemaDelimiter) {\n        noSchemaDelimiterParameter();\n        table.delimiter = options.schemaDelimiter;\n      }\n    }\n\n    const sql = this.queryGenerator.describeTableQuery(table);\n    const sqlIndexes = this.queryGenerator.showIndexesQuery(table);\n\n    try {\n      const data = await this.sequelize.queryRaw(sql, { ...options, type: QueryTypes.DESCRIBE });\n      /*\n       * If no data is returned from the query, then the table name may be wrong.\n       * Query generators that use information_schema for retrieving table info will just return an empty result set,\n       * it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\n       */\n      if (isEmpty(data)) {\n        throw new Error(`No description found for table ${table.tableName}${table.schema ? ` in schema ${table.schema}` : ''}. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      const indexes = await this.sequelize.queryRaw(sqlIndexes, { ...options, type: QueryTypes.SHOWINDEXES });\n      for (const prop in data) {\n        data[prop].unique = false;\n      }\n\n      for (const index of indexes) {\n        for (const field of index.fields) {\n          if (index.unique !== undefined) {\n            data[field.attribute].unique = index.unique;\n          }\n        }\n      }\n\n      const foreignKeys = await this.showConstraints(tableName, { ...options, constraintType: 'FOREIGN KEY' });\n      for (const foreignKey of foreignKeys) {\n        for (const [index, columnName] of foreignKey.columnNames.entries()) {\n          // Add constraints to column definition\n          Object.assign(data[columnName], {\n            references: {\n              table: foreignKey.referencedTableName,\n              key: foreignKey.referencedColumnNames.at(index),\n            },\n            onUpdate: foreignKey.updateAction,\n            onDelete: foreignKey.deleteAction,\n          });\n        }\n      }\n\n      return data;\n    } catch (error) {\n      if (error.cause && error.cause.code === 'ER_NO_SUCH_TABLE') {\n        throw new Error(`No description found for table ${table.tableName}${table.schema ? ` in schema ${table.schema}` : ''}. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Alters a table in sqlite.\n   * Workaround for sqlite's limited alter table support.\n   *\n   * @param {string} tableName - The table's name\n   * @param {ColumnsDescription} columns - The table's description\n   * @param {QueryOptions} options - Query options\n   * @private\n   */\n  async alterTableInternal(tableName, columns, options) {\n    return this.withForeignKeysOff(options, async () => {\n      const savepointName = this.getSavepointName();\n      await this.sequelize.query(`SAVEPOINT ${savepointName};`, options);\n\n      try {\n        const indexes = await this.showIndex(tableName, options);\n        for (const index of indexes) {\n          // This index is reserved by SQLite, we can't add it through addIndex and must use \"UNIQUE\" on the column definition instead.\n          if (!index.constraintName.startsWith('sqlite_autoindex_')) {\n            continue;\n          }\n\n          if (!index.unique) {\n            continue;\n          }\n\n          for (const field of index.fields) {\n            if (columns[field.attribute]) {\n              columns[field.attribute].unique = true;\n            }\n          }\n        }\n\n        const sql = this.queryGenerator._replaceTableQuery(tableName, columns);\n        const subQueries = sql.split(';').filter(q => q !== '');\n\n        for (const subQuery of subQueries) {\n          await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n        }\n\n        // Run a foreign keys integrity check\n        const foreignKeyCheckResult = await this.sequelize.query(this.queryGenerator.foreignKeyCheckQuery(tableName), {\n          ...options,\n          type: QueryTypes.SELECT,\n        });\n\n        if (foreignKeyCheckResult.length > 0) {\n          // There are foreign key violations, exit\n          throw new sequelizeErrors.ForeignKeyConstraintError({\n            message: `Foreign key violations detected: ${JSON.stringify(foreignKeyCheckResult, null, 2)}`,\n            table: tableName,\n          });\n        }\n\n        await Promise.all(indexes.map(async index => {\n          // This index is reserved by SQLite, we can't add it through addIndex and must use \"UNIQUE\" on the column definition instead.\n          if (index.constraintName.startsWith('sqlite_autoindex_')) {\n            return;\n          }\n\n          return this.addIndex(tableName, index);\n        }));\n\n        await this.sequelize.query(`RELEASE ${savepointName};`, options);\n      } catch (error) {\n        await this.sequelize.query(`ROLLBACK TO ${savepointName};`, options);\n        throw error;\n      }\n    });\n  }\n\n  /**\n   * Runs the provided callback with foreign keys disabled.\n   *\n   * @param {QueryOptions} [options]\n   * @param {Function<Promise<any>>} cb\n   * @private\n   */\n  async withForeignKeysOff(options, cb) {\n    await this.sequelize.query('PRAGMA foreign_keys = OFF;', options);\n\n    try {\n      return await cb();\n    } finally {\n      await this.sequelize.query('PRAGMA foreign_keys = ON;', options);\n    }\n  }\n\n  /**\n   * Returns a randomly generated savepoint name\n   *\n   * @param {string} prefix\n   * @returns {string}\n   */\n  getSavepointName(prefix = 'sequelize') {\n    // sqlite does not support \"-\" (dashes) in transaction's name\n    const suffix = crypto.randomUUID().replaceAll('-', '_');\n\n    return `${prefix}_${suffix}`;\n  }\n}\n"],
  "mappings": "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",
  "names": ["isEmpty"]
}
