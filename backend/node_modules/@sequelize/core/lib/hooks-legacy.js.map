{
  "version": 3,
  "sources": ["../src/hooks-legacy.ts"],
  "sourcesContent": ["import type { HookHandler, HookHandlerBuilder } from './hooks.js';\nimport { hooksReworked } from './utils/deprecations.js';\n\n// TODO: delete this in Sequelize v8\n\nexport interface LegacyRunHookFunction<HookConfig extends {}, Return> {\n  <HookName extends keyof HookConfig>(\n    hookName: HookName,\n    ...args: HookConfig[HookName] extends (...args2: any) => any\n      ? Parameters<HookConfig[HookName]>\n      : never\n  ): Return;\n}\n\nexport function legacyBuildRunHook<HookConfig extends {}>(\n  // added for typing purposes\n  _hookHandlerBuilder: HookHandlerBuilder<HookConfig>,\n): LegacyRunHookFunction<HookConfig, void> {\n\n  return async function runHooks<HookName extends keyof HookConfig>(\n    this: { hooks: HookHandler<HookConfig> },\n    hookName: HookName,\n    ...args: HookConfig[HookName] extends (...args2: any) => any\n      ? Parameters<HookConfig[HookName]>\n      : never\n  ): Promise<void> {\n    hooksReworked();\n\n    return this.hooks.runAsync(hookName, ...args);\n  };\n}\n\nexport interface LegacyAddAnyHookFunction<HookConfig extends {}> {\n  /**\n   * Adds a hook listener\n   */\n  <This, HookName extends keyof HookConfig>(this: This, hookName: HookName, hook: HookConfig[HookName]): This;\n\n  /**\n   * Adds a hook listener\n   *\n   * @param listenerName Provide a name for the hook function. It can be used to remove the hook later.\n   */\n  <This, HookName extends keyof HookConfig>(\n      this: This,\n      hookName: HookName,\n      listenerName: string,\n      hook: HookConfig[HookName]\n  ): This;\n}\n\nexport function legacyBuildAddAnyHook<HookConfig extends {}>(\n  // added for typing purposes\n  _hookHandlerBuilder: HookHandlerBuilder<HookConfig>,\n): LegacyAddAnyHookFunction<HookConfig> {\n\n  return function addHook<This extends { hooks: HookHandler<HookConfig> }, HookName extends keyof HookConfig>(\n    this: This,\n    hookName: HookName,\n    listenerNameOrHook: HookConfig[HookName] | string,\n    hook?: HookConfig[HookName],\n  ): This {\n    hooksReworked();\n\n    if (hook) {\n      // TODO [>=8.0.0]: remove this ignore once we drop support for TypeScript <= 5.0\n      // eslint-disable-next-line @typescript-eslint/prefer-ts-expect-error\n      // @ts-ignore -- Up to TypeScript 5.0 (including), TypeScript struggled with the multiple possible signatures of addListener\n      this.hooks.addListener(hookName, hook, listenerNameOrHook);\n    } else {\n      // @ts-expect-error -- TypeScript struggles with the multiple possible signatures of addListener\n      this.hooks.addListener(hookName, listenerNameOrHook);\n    }\n\n    return this;\n  };\n}\n\nexport interface LegacyAddHookFunction<Fn> {\n  /**\n   * Adds a hook listener\n   */\n  <This extends object>(this: This, hook: Fn): This;\n\n  /**\n   * Adds a hook listener\n   *\n   * @param listenerName Provide a name for the hook function. It can be used to remove the hook later.\n   */\n  <This extends object>(this: This, listenerName: string, hook: Fn): This;\n}\n\nexport function legacyBuildAddHook<HookConfig extends {}, HookName extends keyof HookConfig>(\n  hookHandlerBuilder: HookHandlerBuilder<HookConfig>,\n  hookName: HookName,\n): LegacyAddHookFunction<HookConfig[HookName]> {\n  return function addHook<This extends { hooks: HookHandler<HookConfig> }>(\n    this: This,\n    listenerNameOrHook: HookConfig[HookName] | string,\n    hook?: HookConfig[HookName],\n  ): This {\n    hooksReworked();\n\n    if (hook) {\n      // TODO [>=8.0.0]: remove this ignore once we drop support for TypeScript <= 5.0\n      // eslint-disable-next-line @typescript-eslint/prefer-ts-expect-error\n      // @ts-ignore -- Up to TypeScript 5.0 (including), TypeScript struggled with the multiple possible signatures of addListener\n      this.hooks.addListener(hookName, hook, listenerNameOrHook);\n    } else {\n      // @ts-expect-error -- TypeScript struggles with the multiple possible signatures of addListener\n      this.hooks.addListener(hookName, listenerNameOrHook);\n    }\n\n    return this;\n  };\n}\n\nexport function legacyBuildHasHook<HookConfig extends {}>(\n  // added for typing purposes\n  _hookHandlerBuilder: HookHandlerBuilder<HookConfig>,\n) {\n  return function hasHook<HookName extends keyof HookConfig>(\n    this: { hooks: HookHandler<HookConfig> },\n    hookName: HookName,\n  ): boolean {\n    hooksReworked();\n\n    return this.hooks.hasListeners(hookName);\n  };\n}\n\nexport function legacyBuildRemoveHook<HookConfig extends {}>(\n  // added for typing purposes\n  _hookHandlerBuilder: HookHandlerBuilder<HookConfig>,\n) {\n  return function removeHook<HookName extends keyof HookConfig>(\n    this: { hooks: HookHandler<HookConfig> },\n    hookName: HookName,\n    listenerNameOrListener: HookConfig[HookName] | string,\n  ): void {\n    hooksReworked();\n\n    return this.hooks.removeListener(hookName, listenerNameOrListener);\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,0BAA8B;AAavB,SAAS,mBAEd,qBACyC;AAEzC,SAAO,eAAe,SAEpB,aACG,MAGY;AACf,2CAAc;AAEd,WAAO,KAAK,MAAM,SAAS,UAAU,GAAG,IAAI;AAAA,EAC9C;AACF;AAqBO,SAAS,sBAEd,qBACsC;AAEtC,SAAO,SAAS,QAEd,UACA,oBACA,MACM;AACN,2CAAc;AAEd,QAAI,MAAM;AAIR,WAAK,MAAM,YAAY,UAAU,MAAM,kBAAkB;AAAA,IAC3D,OAAO;AAEL,WAAK,MAAM,YAAY,UAAU,kBAAkB;AAAA,IACrD;AAEA,WAAO;AAAA,EACT;AACF;AAgBO,SAAS,mBACd,oBACA,UAC6C;AAC7C,SAAO,SAAS,QAEd,oBACA,MACM;AACN,2CAAc;AAEd,QAAI,MAAM;AAIR,WAAK,MAAM,YAAY,UAAU,MAAM,kBAAkB;AAAA,IAC3D,OAAO;AAEL,WAAK,MAAM,YAAY,UAAU,kBAAkB;AAAA,IACrD;AAEA,WAAO;AAAA,EACT;AACF;AAEO,SAAS,mBAEd,qBACA;AACA,SAAO,SAAS,QAEd,UACS;AACT,2CAAc;AAEd,WAAO,KAAK,MAAM,aAAa,QAAQ;AAAA,EACzC;AACF;AAEO,SAAS,sBAEd,qBACA;AACA,SAAO,SAAS,WAEd,UACA,wBACM;AACN,2CAAc;AAEd,WAAO,KAAK,MAAM,eAAe,UAAU,sBAAsB;AAAA,EACnE;AACF;",
  "names": []
}
